Index: org/omg/dds/type/dynamic/DynamicDataFactory.java
===================================================================
--- org/omg/dds/type/dynamic/DynamicDataFactory.java	(revision 0)
+++ org/omg/dds/type/dynamic/DynamicDataFactory.java	(revision 207)
@@ -0,0 +1,18 @@
+package org.omg.dds.type.dynamic;
+
+import org.omg.dds.core.ServiceEnvironment;
+
+
+public abstract class DynamicDataFactory implements org.omg.dds.core.DDSObject {
+	
+	/**
+     * @param env       Identifies the Service instance to which the
+     *                  object will belong.
+     */
+    public static DynamicDataFactory getInstance(ServiceEnvironment env)
+    {
+        return env.getSPI().getDynamicDataFactory();
+    }
+    
+    public abstract DynamicData newDynamicData(DynamicType type); 
+}
Index: org/omg/dds/type/dynamic/DynamicType.java
===================================================================
--- org/omg/dds/type/dynamic/DynamicType.java	(revision 205)
+++ org/omg/dds/type/dynamic/DynamicType.java	(revision 207)
@@ -35,17 +35,31 @@
 
     public DynamicTypeMember getMember(int id);
 
+    public DynamicTypeMember getMember(String name);
+
     public Map<Integer, DynamicTypeMember> getAllMembers();
 
-    public DynamicTypeMember getMemberByName(String name);
+    public Map<Integer, DynamicTypeMember> getAllMembers(int... id);
 
-    public Map<String, DynamicTypeMember> getAllMembersByName();
+    public Map<String, DynamicTypeMember> getAllMembers(String... id);
 
-    public List<AnnotationDescriptor> getAnnotations();
+    public Map<Integer, AnnotationDescriptor> getAllAnnotations();
 
-    public void applyAnnotation(AnnotationDescriptor descriptor);
+    public AnnotationDescriptor getAnnotation(int id);
 
+    public AnnotationDescriptor getAnnotation(String name);
+
+    public Map<Integer, AnnotationDescriptor> getAnnotations(int... id);
+
+    public Map<String, AnnotationDescriptor> getAnnotations(String... name);
+
+    public void setAnnotation(AnnotationDescriptor descriptor);
+
+    public void setAnnotations(AnnotationDescriptor... descriptors);
+
     public DynamicTypeMember addMember(MemberDescriptor descriptor);
 
+    public List<DynamicTypeMember> addMembers(MemberDescriptor... descriptor);
+
     public DynamicType clone();
 }
Index: org/omg/dds/type/dynamic/DynamicData.java
===================================================================
--- org/omg/dds/type/dynamic/DynamicData.java	(revision 205)
+++ org/omg/dds/type/dynamic/DynamicData.java	(revision 207)
@@ -41,8 +41,14 @@
     public void clearAllValues();
     public void clearNonkeyValues();
     public void clearValue(int id);
+    public void clearValue(String name);
+    
+    public <T> void setValue (int id, T value, Class<T> type);
+    public <T> void setValue (String name, T value, Class<T> type);
+    
+    public <T> T getValue (int id, Class<T> type);
+    public <T> T getValue (String name, Class<T> type);
 
-
     public DynamicData loanValue(int id);
     public void returnLoanedValue(DynamicData value);
 
@@ -113,7 +119,9 @@
      */
     public DynamicData setStringValue(int id, CharSequence value);
 
-    public DynamicData getComplexValue(DynamicData value, int id);
+    public DynamicData getComplexValue(int id);
+    public DynamicData getComplexValue(String name);
+
     /**
      * @return  this
      */
Index: org/omg/dds/type/dynamic/DynamicTypeFactory.java
===================================================================
--- org/omg/dds/type/dynamic/DynamicTypeFactory.java	(revision 205)
+++ org/omg/dds/type/dynamic/DynamicTypeFactory.java	(revision 207)
@@ -49,18 +49,40 @@
     public abstract DynamicType createType(TypeDescriptor descriptor);
     public abstract DynamicType createStringType(int bound);
     public abstract DynamicType createWStringType(int bound);
+    /**
+     * Create unbounded sequence
+     * @param elementType
+     * @return A new sequence type for unbounded sequence.
+     */
     public abstract DynamicType createSequenceType(
+            DynamicType elementType);
+    
+    /**
+     * Create bounded sequence
+     * @param elementType
+     * @param bound
+     * @return A new sequence type for bounded sequence. 
+     */
+    public abstract DynamicType createSequenceType(
             DynamicType elementType, int bound);
+    
     public abstract DynamicType createArrayType(
             DynamicType elementType, int... bound);
+    
     public abstract DynamicType createMapType(
             DynamicType keyElementType, DynamicType elementType, int bound);
+    
     public abstract DynamicType createBitSetType(int bound);
 
-    public abstract DynamicType loadTypeFromUrl(
-            String documentUrl, String typeName, String... includePaths);
-    public abstract DynamicType loadTypeFromDocument(
-            String document, String typeName, String... includePaths);
+    /**
+     * Load a type from the specified URI. If multiple types are defined
+     * only the first one is returned.
+     */
+    public abstract DynamicType loadType(String documentUrl);
+    public abstract java.util.Collection<DynamicType> loadTypes(String documentUrl);
+    
+    public abstract DynamicType loadType(String documentUrl, String name);
+    public abstract java.util.Collection<DynamicType> loadTypes(String documentUrl, String... names);
 
     public abstract TypeDescriptor newTypeDescriptor();
     public abstract MemberDescriptor newMemberDescriptor();
Index: org/omg/dds/type/dynamic/DynamicTypeMember.java
===================================================================
--- org/omg/dds/type/dynamic/DynamicTypeMember.java	(revision 205)
+++ org/omg/dds/type/dynamic/DynamicTypeMember.java	(revision 207)
@@ -32,8 +32,10 @@
      */
     public List<AnnotationDescriptor> getAnnotations();
 
-    public void applyAnnotation(AnnotationDescriptor descriptor);
+    public void setAnnotation(AnnotationDescriptor descriptor);
 
+    public void setAnnotations(AnnotationDescriptor... descriptor);
+
     public int getId();
 
     public String getName();
Index: org/omg/dds/type/builtin/KeyedBytesDataWriter.java
===================================================================
--- org/omg/dds/type/builtin/KeyedBytesDataWriter.java	(revision 205)
+++ org/omg/dds/type/builtin/KeyedBytesDataWriter.java	(revision 207)
@@ -1,141 +0,0 @@
-/* Copyright 2010, Object Management Group, Inc.
- * Copyright 2010, PrismTech, Inc.
- * Copyright 2010, Real-Time Innovations, Inc.
- * All rights reserved.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.omg.dds.type.builtin;
-
-import java.util.concurrent.TimeUnit;
-import java.util.concurrent.TimeoutException;
-
-import org.omg.dds.core.InstanceHandle;
-import org.omg.dds.core.ModifiableInstanceHandle;
-import org.omg.dds.core.Time;
-import org.omg.dds.pub.DataWriter;
-
-
-public interface KeyedBytesDataWriter extends DataWriter<KeyedBytes> 
-{
-    /**
-     * @see     DataWriter#registerInstance(Object)
-     */
-    public InstanceHandle registerInstance(String key)
-    throws TimeoutException;
-
-    /**
-     * @see     DataWriter#registerInstance(Object, Time)
-     */
-    public InstanceHandle registerInstance(String key, Time sourceTimestamp)
-    throws TimeoutException;
-
-    /**
-     * @see     DataWriter#registerInstance(Object, long, TimeUnit)
-     */
-    public InstanceHandle registerInstance(
-            String key, long sourceTimestamp, TimeUnit unit)
-    throws TimeoutException;
-
-    /**
-     * @see     DataWriter#unregisterInstance(InstanceHandle, Object)
-     */
-    public void unregisterInstance(String key) throws TimeoutException;
-
-    /**
-     * @see     DataWriter#unregisterInstance(InstanceHandle, Object, Time)
-     */
-    public void unregisterInstance(String key, Time sourceTimestamp)
-    throws TimeoutException;
-
-    /**
-     * @see     DataWriter#unregisterInstance(InstanceHandle, Object, long, TimeUnit)
-     */
-    public void unregisterInstance(
-            String key, long sourceTimestamp, TimeUnit unit)
-    throws TimeoutException;
-
-    /**
-     * @see     DataWriter#write(Object)
-     */
-    public void write(String key, byte[] bytes)
-    throws TimeoutException;
-
-    /**
-     * @see     DataWriter#write(Object)
-     */
-    public void write(
-            String key,
-            byte[] bytes,
-            int offset,
-            int length)
-    throws TimeoutException;
-
-    /**
-     * @see     DataWriter#write(Object, Time)
-     */
-    public void write(
-            String key,
-            byte[] bytes,
-            int offset,
-            int length,
-            Time sourceTimestamp)
-    throws TimeoutException;
-
-    /**
-     * @see     DataWriter#write(Object, long, TimeUnit)
-     */
-    public void write(
-            String key,
-            byte[] bytes,
-            int offset,
-            int length,
-            long sourceTimestamp,
-            TimeUnit unit)
-    throws TimeoutException;
-
-    /**
-     * @see     DataWriter#dispose(InstanceHandle, Object)
-     */
-    public void dispose(String key) throws TimeoutException;
-
-    /**
-     * @see     DataWriter#dispose(InstanceHandle, Object, Time)
-     */
-    public void dispose(String key, Time sourceTimestamp)
-    throws TimeoutException;
-
-    /**
-     * @see     DataWriter#dispose(InstanceHandle, Object, long, TimeUnit)
-     */
-    public void dispose(String key, long sourceTimestamp, TimeUnit unit)
-    throws TimeoutException;
-
-    /**
-     * @see     DataWriter#getKeyValue(Object, InstanceHandle)
-     */
-    public StringBuilder getKeyValue(
-            StringBuilder key, InstanceHandle handle);
-
-    /**
-     * @see     DataWriter#lookupInstance(ModifiableInstanceHandle, Object)
-     */
-    public ModifiableInstanceHandle lookupInstance(
-            ModifiableInstanceHandle handle, String key);
-
-    /**
-     * @see     DataWriter#lookupInstance(Object)
-     */
-    public InstanceHandle lookupInstance(String key);
-}
Index: org/omg/dds/type/builtin/KeyedStringDataWriter.java
===================================================================
--- org/omg/dds/type/builtin/KeyedStringDataWriter.java	(revision 205)
+++ org/omg/dds/type/builtin/KeyedStringDataWriter.java	(revision 207)
@@ -1,127 +0,0 @@
-/* Copyright 2010, Object Management Group, Inc.
- * Copyright 2010, PrismTech, Inc.
- * Copyright 2010, Real-Time Innovations, Inc.
- * All rights reserved.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.omg.dds.type.builtin;
-
-import java.util.concurrent.TimeUnit;
-import java.util.concurrent.TimeoutException;
-
-import org.omg.dds.core.InstanceHandle;
-import org.omg.dds.core.ModifiableInstanceHandle;
-import org.omg.dds.core.Time;
-import org.omg.dds.pub.DataWriter;
-
-
-public interface KeyedStringDataWriter extends DataWriter<KeyedString> 
-{
-    /**
-     * @see     DataWriter#registerInstance(Object)
-     */
-    public InstanceHandle registerInstance(String key)
-    throws TimeoutException;
-
-    /**
-     * @see     DataWriter#registerInstance(Object, Time)
-     */
-    public InstanceHandle registerInstance(String key, Time sourceTimestamp)
-    throws TimeoutException;
-
-    /**
-     * @see     DataWriter#registerInstance(Object, long, TimeUnit)
-     */
-    public InstanceHandle registerInstance(
-            String key, long sourceTimestamp, TimeUnit unit)
-    throws TimeoutException;
-
-    /**
-     * @see     DataWriter#unregisterInstance(InstanceHandle, Object)
-     */
-    public void unregisterInstance(String key) throws TimeoutException;
-
-    /**
-     * @see     DataWriter#unregisterInstance(InstanceHandle, Object, Time)
-     */
-    public void unregisterInstance(String key, Time sourceTimestamp)
-    throws TimeoutException;
-
-    /**
-     * @see     DataWriter#unregisterInstance(InstanceHandle, Object, long, TimeUnit)
-     */
-    public void unregisterInstance(
-            String key, long sourceTimestamp, TimeUnit unit)
-    throws TimeoutException;
-
-    /**
-     * @see     DataWriter#write(Object)
-     */
-    public void write(String key, String str) throws TimeoutException;
-
-    /**
-     * @see     DataWriter#write(Object, Time)
-     */
-    public void write(
-            String key,
-            String str,
-            Time sourceTimestamp)
-    throws TimeoutException;
-
-    /**
-     * @see     DataWriter#write(Object, long, TimeUnit)
-     */
-    public void write(
-            String key,
-            String str,
-            long sourceTimestamp,
-            TimeUnit unit)
-    throws TimeoutException;
-
-    /**
-     * @see     DataWriter#dispose(InstanceHandle, Object)
-     */
-    public void dispose(String key) throws TimeoutException;
-
-    /**
-     * @see     DataWriter#dispose(InstanceHandle, Object, Time)
-     */
-    public void dispose(String key, Time sourceTimestamp)
-    throws TimeoutException;
-
-    /**
-     * @see     DataWriter#dispose(InstanceHandle, Object, long, TimeUnit)
-     */
-    public void dispose(String key, long sourceTimestamp, TimeUnit unit)
-    throws TimeoutException;
-
-    /**
-     * @see     DataWriter#getKeyValue(Object, InstanceHandle)
-     */
-    public StringBuilder getKeyValue(StringBuilder key, InstanceHandle handle);
-
-    /**
-     * @see     #lookupInstance(String)
-     * @see     DataWriter#lookupInstance(ModifiableInstanceHandle, Object)
-     */
-    public ModifiableInstanceHandle lookupInstance(
-            ModifiableInstanceHandle handle, String key);
-
-    /**
-     * @see     #lookupInstance(ModifiableInstanceHandle, String)
-     * @see     DataWriter#lookupInstance(Object)
-     */
-    public InstanceHandle lookupInstance(String key);
-}
Index: org/omg/dds/type/builtin/BytesDataReader.java
===================================================================
--- org/omg/dds/type/builtin/BytesDataReader.java	(revision 205)
+++ org/omg/dds/type/builtin/BytesDataReader.java	(revision 207)
@@ -1,27 +0,0 @@
-/* Copyright 2010, Object Management Group, Inc.
- * Copyright 2010, PrismTech, Inc.
- * Copyright 2010, Real-Time Innovations, Inc.
- * All rights reserved.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.omg.dds.type.builtin;
-
-import org.omg.dds.sub.DataReader;
-
-
-public interface BytesDataReader extends DataReader<byte[]> 
-{
-    // empty
-}
Index: org/omg/dds/type/builtin/StringDataReader.java
===================================================================
--- org/omg/dds/type/builtin/StringDataReader.java	(revision 205)
+++ org/omg/dds/type/builtin/StringDataReader.java	(revision 207)
@@ -1,27 +0,0 @@
-/* Copyright 2010, Object Management Group, Inc.
- * Copyright 2010, PrismTech, Inc.
- * Copyright 2010, Real-Time Innovations, Inc.
- * All rights reserved.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.omg.dds.type.builtin;
-
-import org.omg.dds.sub.DataReader;
-
-
-public interface StringDataReader extends DataReader<String> 
-{
-    // empty
-}
Index: org/omg/dds/type/builtin/KeyedStringDataReader.java
===================================================================
--- org/omg/dds/type/builtin/KeyedStringDataReader.java	(revision 205)
+++ org/omg/dds/type/builtin/KeyedStringDataReader.java	(revision 207)
@@ -1,27 +0,0 @@
-/* Copyright 2010, Object Management Group, Inc.
- * Copyright 2010, PrismTech, Inc.
- * Copyright 2010, Real-Time Innovations, Inc.
- * All rights reserved.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.omg.dds.type.builtin;
-
-import org.omg.dds.sub.DataReader;
-
-
-public interface KeyedStringDataReader extends DataReader<KeyedString> 
-{
-    // empty
-}
Index: org/omg/dds/type/builtin/KeyedBytesDataReader.java
===================================================================
--- org/omg/dds/type/builtin/KeyedBytesDataReader.java	(revision 205)
+++ org/omg/dds/type/builtin/KeyedBytesDataReader.java	(revision 207)
@@ -1,27 +0,0 @@
-/* Copyright 2010, Object Management Group, Inc.
- * Copyright 2010, PrismTech, Inc.
- * Copyright 2010, Real-Time Innovations, Inc.
- * All rights reserved.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.omg.dds.type.builtin;
-
-import org.omg.dds.sub.DataReader;
-
-
-public interface KeyedBytesDataReader extends DataReader<KeyedBytes> 
-{
-    // empty
-}
Index: org/omg/dds/type/builtin/BytesDataWriter.java
===================================================================
--- org/omg/dds/type/builtin/BytesDataWriter.java	(revision 205)
+++ org/omg/dds/type/builtin/BytesDataWriter.java	(revision 207)
@@ -1,47 +0,0 @@
-/* Copyright 2010, Object Management Group, Inc.
- * Copyright 2010, PrismTech, Inc.
- * Copyright 2010, Real-Time Innovations, Inc.
- * All rights reserved.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.omg.dds.type.builtin;
-
-import java.util.concurrent.TimeUnit;
-import java.util.concurrent.TimeoutException;
-
-import org.omg.dds.core.Time;
-import org.omg.dds.pub.DataWriter;
-
-
-public interface BytesDataWriter extends DataWriter<byte[]>
-{
-    public void write(byte[] bytes, int offset, int length)
-    throws TimeoutException;
-
-    public void write(
-            byte[] bytes,
-            int offset,
-            int length,
-            Time sourceTimestamp)
-    throws TimeoutException;
-
-    public void write(
-            byte[] bytes,
-            int offset,
-            int length,
-            long sourceTimestamp,
-            TimeUnit unit)
-    throws TimeoutException;
-}
Index: org/omg/dds/type/builtin/StringDataWriter.java
===================================================================
--- org/omg/dds/type/builtin/StringDataWriter.java	(revision 205)
+++ org/omg/dds/type/builtin/StringDataWriter.java	(revision 207)
@@ -1,27 +0,0 @@
-/* Copyright 2010, Object Management Group, Inc.
- * Copyright 2010, PrismTech, Inc.
- * Copyright 2010, Real-Time Innovations, Inc.
- * All rights reserved.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.omg.dds.type.builtin;
-
-import org.omg.dds.pub.DataWriter;
-
-
-public interface StringDataWriter extends DataWriter<String> 
-{
-    // empty
-}
Index: org/omg/dds/type/builtin/KeyedBytes.java
===================================================================
--- org/omg/dds/type/builtin/KeyedBytes.java	(revision 205)
+++ org/omg/dds/type/builtin/KeyedBytes.java	(revision 207)
@@ -19,42 +19,52 @@
 package org.omg.dds.type.builtin;
 
 import java.io.Serializable;
-
 import org.omg.dds.core.DDSObject;
+import org.omg.dds.core.ServiceEnvironment;
 
-
-public interface KeyedBytes extends Cloneable, Serializable, DDSObject
+public abstract class KeyedBytes implements Cloneable, Serializable, DDSObject
 {
     /**
+	 * 
+	 */
+	private static final long serialVersionUID = 2666227708313407807L;
+
+    public static KeyedBytes newKeyedBytes(ServiceEnvironment env)
+    {
+        return env.getSPI().newKeyedBytes();
+    }
+
+	
+	/**
      * @return the key
      */
-    public String getKey();
+    public abstract String getKey();
 
     /**
      * @param key the key to set
      * 
      * @return  this
      */
-    public KeyedBytes setKey(CharSequence key);
+    public abstract KeyedBytes setKey(CharSequence key);
 
     /**
      * @return the value
      */
-    public byte[] getValue();
+    public abstract byte[] getValue();
 
     /**
      * @param value the value to set
      * 
      * @return  this
      */
-    public KeyedBytes setValue(byte value[]);
+    public abstract KeyedBytes setValue(byte value[]);
 
     /**
      * @param value the value to set
      * 
      * @return  this
      */
-    public KeyedBytes setValue(byte value[], int offset, int length);
+    public abstract KeyedBytes setValue(byte value[], int offset, int length);
 
 
     // -----------------------------------------------------------------------
@@ -62,7 +72,7 @@
     /**
      * Overwrite the state of this object with that of the given object.
      */
-    public void copyFrom(KeyedBytes src);
+    public abstract void copyFrom(KeyedBytes src);
 
-    public KeyedBytes clone();
+    public abstract KeyedBytes clone();
 }
Index: org/omg/dds/type/builtin/KeyedString.java
===================================================================
--- org/omg/dds/type/builtin/KeyedString.java	(revision 205)
+++ org/omg/dds/type/builtin/KeyedString.java	(revision 207)
@@ -21,33 +21,45 @@
 import java.io.Serializable;
 
 import org.omg.dds.core.DDSObject;
+import org.omg.dds.core.ServiceEnvironment;
 
 
-public interface KeyedString extends Cloneable, Serializable, DDSObject
+public abstract class KeyedString implements Cloneable, Serializable, DDSObject
 {
     /**
+	 * 
+	 */
+	private static final long serialVersionUID = 5185023295888681379L;
+
+	
+    public static KeyedString newKeyedString(ServiceEnvironment env)
+    {
+        return env.getSPI().newKeyedString();
+    }
+
+	/**
      * @param key the key to set
      * 
      * @return  this
      */
-    public KeyedString setKey(CharSequence key);
+    public abstract KeyedString setKey(CharSequence key);
 
     /**
      * @return the key
      */
-    public String getKey();
+    public abstract String getKey();
 
     /**
      * @param value the value to set
      * 
      * @return  this
      */
-    public KeyedString setValue(CharSequence value);
+    public abstract KeyedString setValue(CharSequence value);
 
     /**
      * @return the value
      */
-    public String getValue();
+    public abstract String getValue();
 
 
     // -----------------------------------------------------------------------
@@ -55,7 +67,7 @@
     /**
      * Overwrite the state of this object with that of the given object.
      */
-    public void copyFrom(KeyedString src);
+    public abstract void copyFrom(KeyedString src);
 
-    public KeyedString clone();
+    public abstract KeyedString clone();
 }
Index: org/omg/dds/type/TypeKind.java
===================================================================
--- org/omg/dds/type/TypeKind.java	(revision 205)
+++ org/omg/dds/type/TypeKind.java	(revision 207)
@@ -63,33 +63,38 @@
 
     public static final class Values {
         /** sentinel indicating "null" value */
-        public static final short NO_TYPE_VALUE          =  0;
-        public static final short BOOLEAN_TYPE_VALUE     =  1;
-        public static final short BYTE_TYPE_VALUE        =  2;
-        public static final short INT_16_TYPE_VALUE      =  3;
-        public static final short UINT_16_TYPE_VALUE     =  4;
-        public static final short INT_32_TYPE_VALUE      =  5;
-        public static final short UINT_32_TYPE_VALUE     =  6;
-        public static final short INT_64_TYPE_VALUE      =  7;
-        public static final short UINT_64_TYPE_VALUE     =  8;
-        public static final short FLOAT_32_TYPE_VALUE    =  9;
-        public static final short FLOAT_64_TYPE_VALUE    = 10;
-        public static final short FLOAT_128_TYPE_VALUE   = 11;
-        public static final short CHAR_8_TYPE_VALUE      = 12;
-        public static final short CHAR_32_TYPE_VALUE     = 13;
+        public static final int NO_TYPE_VALUE           = 0x0000;
+        public static final int PRIMITIVE_TYPE_VALUE    = 0x4000;
+        public static final int CONSTRUCTED_TYPE_VALUE  = 0x8000;
+        public static final int COLLECTION_TYPE_VALUE   = 0x0200;
+        public static final int AGGREGATION_TYPE_VALUE  = 0x0100;
+        public static final int ANNOTATION_TYPE_VALUE   = 0x0080;
+        
+        public static final int BOOLEAN_TYPE_VALUE     =  PRIMITIVE_TYPE_VALUE | 0x1;
+        public static final int BYTE_TYPE_VALUE        =  PRIMITIVE_TYPE_VALUE | 0x2;
+        public static final int INT_16_TYPE_VALUE      =  PRIMITIVE_TYPE_VALUE | 0x3;
+        public static final int UINT_16_TYPE_VALUE     =  PRIMITIVE_TYPE_VALUE | 0x4;
+        public static final int INT_32_TYPE_VALUE      =  PRIMITIVE_TYPE_VALUE | 0x5;
+        public static final int UINT_32_TYPE_VALUE     =  PRIMITIVE_TYPE_VALUE | 0x6;
+        public static final int INT_64_TYPE_VALUE      =  PRIMITIVE_TYPE_VALUE | 0x7;
+        public static final int UINT_64_TYPE_VALUE     =  PRIMITIVE_TYPE_VALUE | 0x8;
+        public static final int FLOAT_32_TYPE_VALUE    =  PRIMITIVE_TYPE_VALUE | 0x9;
+        public static final int FLOAT_64_TYPE_VALUE    =  PRIMITIVE_TYPE_VALUE | 0xA;
+        public static final int FLOAT_128_TYPE_VALUE   =  PRIMITIVE_TYPE_VALUE | 0xB;
+        public static final int CHAR_8_TYPE_VALUE      =  PRIMITIVE_TYPE_VALUE | 0xC;
+        public static final int CHAR_32_TYPE_VALUE     =  PRIMITIVE_TYPE_VALUE | 0xD;
 
-        public static final short ENUMERATION_TYPE_VALUE = 14;
-        public static final short BITSET_TYPE_VALUE      = 15;
-        public static final short ALIAS_TYPE_VALUE       = 16;
+        public static final int ENUMERATION_TYPE_VALUE =  CONSTRUCTED_TYPE_VALUE | 0x1;
+        public static final int BITSET_TYPE_VALUE      =  CONSTRUCTED_TYPE_VALUE | 0x2;
+        public static final int ALIAS_TYPE_VALUE       =  CONSTRUCTED_TYPE_VALUE | 0x3;
 
-        public static final short ARRAY_TYPE_VALUE       = 17;
-        public static final short SEQUENCE_TYPE_VALUE    = 18;
-        public static final short STRING_TYPE_VALUE      = 19;
-        public static final short MAP_TYPE_VALUE         = 20;
+        public static final int ARRAY_TYPE_VALUE       =  CONSTRUCTED_TYPE_VALUE | COLLECTION_TYPE_VALUE | 0x0004;
+        public static final int SEQUENCE_TYPE_VALUE    =  CONSTRUCTED_TYPE_VALUE | COLLECTION_TYPE_VALUE | 0x0005;
+        public static final int STRING_TYPE_VALUE      =  CONSTRUCTED_TYPE_VALUE | COLLECTION_TYPE_VALUE | 0x0006;
+        public static final int MAP_TYPE_VALUE         =  CONSTRUCTED_TYPE_VALUE | COLLECTION_TYPE_VALUE | 0x0007;
 
-        public static final short UNION_TYPE_VALUE       = 21;
-        public static final short STRUCTURE_TYPE_VALUE   = 22;
-        public static final short ANNOTATION_TYPE_VALUE  = 23;
+        public static final int UNION_TYPE_VALUE       = CONSTRUCTED_TYPE_VALUE | AGGREGATION_TYPE_VALUE | 0x0008;
+        public static final int STRUCTURE_TYPE_VALUE   = CONSTRUCTED_TYPE_VALUE | AGGREGATION_TYPE_VALUE | 0x0009;
     }
 
 
@@ -97,7 +102,7 @@
     // Fields
     // -----------------------------------------------------------------------
 
-    public final short value;
+    public final int value;
 
 
 
@@ -105,7 +110,7 @@
     // Constructor
     // -----------------------------------------------------------------------
 
-    private TypeKind(short value) {
+    private TypeKind(int value) {
         this.value = value;
     }
 }
Index: org/omg/dds/type/BitSet.java
===================================================================
--- org/omg/dds/type/BitSet.java	(revision 205)
+++ org/omg/dds/type/BitSet.java	(revision 207)
@@ -44,6 +44,6 @@
      * java.util.BitSet, it indicates the BitSet-annotated enum class that
      * defines the members of the bit set.
      */
-    @SuppressWarnings("unchecked")
+    @SuppressWarnings("rawtypes")
     public Class<? extends Enum> elementType() default Enum.class;
 }
Index: org/omg/dds/pub/Publisher.java
===================================================================
--- org/omg/dds/pub/Publisher.java	(revision 205)
+++ org/omg/dds/pub/Publisher.java	(revision 207)
@@ -33,14 +33,7 @@
 import org.omg.dds.sub.DataReader;
 import org.omg.dds.topic.Topic;
 import org.omg.dds.topic.TopicQos;
-import org.omg.dds.type.builtin.BytesDataWriter;
-import org.omg.dds.type.builtin.KeyedBytes;
-import org.omg.dds.type.builtin.KeyedBytesDataWriter;
-import org.omg.dds.type.builtin.KeyedString;
-import org.omg.dds.type.builtin.KeyedStringDataWriter;
-import org.omg.dds.type.builtin.StringDataWriter;
 
-
 /**
  * A Publisher is the object responsible for the actual dissemination of
  * publications.
@@ -136,110 +129,7 @@
             Collection<Class<? extends Status>> statuses);
 
 
-    // --- Create DataWriter for built-in bytes type: ------------------------
 
-    /**
-     * Create a new data writer for this built-in type.
-     * 
-     * @see     #createDataWriter(Topic)
-     */
-    public BytesDataWriter createBytesDataWriter(
-            Topic<byte[]> topic);
-
-    /**
-     * Create a new data writer for this built-in type.
-     * 
-     * @param statuses  Of which status changes the listener should be
-     *                  notified. A null collection signifies all status
-     *                  changes.
-     * 
-     * @see     #createDataWriter(Topic, DataWriterQos, DataWriterListener, Collection)
-     */
-    public BytesDataWriter createBytesDataWriter(
-            Topic<byte[]> topic,
-            DataWriterQos qos,
-            DataWriterListener<byte[]> listener,
-            Collection<Class<? extends Status>> statuses);
-
-
-    // --- Create DataWriter for built-in KeyedBytes type: -------------------
-
-    /**
-     * Create a new data writer for this built-in type.
-     * 
-     * @see     #createDataWriter(Topic)
-     */
-    public KeyedBytesDataWriter createKeyedBytesDataWriter(
-            Topic<KeyedBytes> topic);
-
-    /**
-     * Create a new data writer for this built-in type.
-     * 
-     * @param statuses  Of which status changes the listener should be
-     *                  notified. A null collection signifies all status
-     *                  changes.
-     * 
-     * @see     #createDataWriter(Topic, DataWriterQos, DataWriterListener, Collection)
-     */
-    public KeyedBytesDataWriter createKeyedBytesDataWriter(
-            Topic<KeyedBytes> topic,
-            DataWriterQos qos,
-            DataWriterListener<KeyedBytes> listener,
-            Collection<Class<? extends Status>> statuses);
-
-
-    // --- Create DataWriter for built-in string type: -----------------------
-
-    /**
-     * Create a new data writer for this built-in type.
-     * 
-     * @see     #createDataWriter(Topic)
-     */
-    public StringDataWriter createStringDataWriter(
-            Topic<String> topic);
-
-    /**
-     * Create a new data writer for this built-in type.
-     * 
-     * @param statuses  Of which status changes the listener should be
-     *                  notified. A null collection signifies all status
-     *                  changes.
-     * 
-     * @see     #createDataWriter(Topic, DataWriterQos, DataWriterListener, Collection)
-     */
-    public StringDataWriter createStringDataWriter(
-            Topic<String> topic,
-            DataWriterQos qos,
-            DataWriterListener<String> listener,
-            Collection<Class<? extends Status>> statuses);
-
-
-    // --- Create DataWriter for built-in KeyedString type: ------------------
-
-    /**
-     * Create a new data writer for this built-in type.
-     * 
-     * @see     #createDataWriter(Topic)
-     */
-    public KeyedStringDataWriter createKeyedStringDataWriter(
-            Topic<KeyedString> topic);
-
-    /**
-     * Create a new data writer for this built-in type.
-     * 
-     * @param statuses  Of which status changes the listener should be
-     *                  notified. A null collection signifies all status
-     *                  changes.
-     * 
-     * @see     #createDataWriter(Topic, DataWriterQos, DataWriterListener, Collection)
-     */
-    public KeyedStringDataWriter createKeyedStringDataWriter(
-            Topic<KeyedString> topic,
-            DataWriterQos qos,
-            DataWriterListener<KeyedString> listener,
-            Collection<Class<? extends Status>> statuses);
-
-
     // --- Lookup operations: ------------------------------------------------
 
     /**
@@ -270,49 +160,6 @@
      */
     public <TYPE> DataWriter<TYPE> lookupDataWriter(Topic<TYPE> topic);
 
-    /**
-     * Look up a DataWriter for the given built-in data type.
-     * 
-     * @throws  ClassCastException      if a DataWriter exists on the given
-     *          Topic but is of a different type.
-     *
-     * @see     #lookupDataWriter(Topic)
-     */
-    public BytesDataWriter lookupBytesDataWriter(Topic<byte[]> topic);
-
-    /**
-     * Look up a DataWriter for the given built-in data type.
-     * 
-     * @throws  ClassCastException      if a DataWriter exists on the given
-     *          Topic but is of a different type.
-     *
-     * @see     #lookupDataWriter(Topic)
-     */
-    public KeyedBytesDataWriter lookupKeyedBytesDataWriter(
-            Topic<KeyedBytes> topic);
-
-    /**
-     * Look up a DataWriter for the given built-in data type.
-     * 
-     * @throws  ClassCastException      if a DataWriter exists on the given
-     *          Topic but is of a different type.
-     *
-     * @see     #lookupDataWriter(Topic)
-     */
-    public StringDataWriter lookupStringDataWriter(Topic<String> topic);
-
-    /**
-     * Look up a DataWriter for the given built-in data type.
-     * 
-     * @throws  ClassCastException      if a DataWriter exists on the given
-     *          Topic but is of a different type.
-     *
-     * @see     #lookupDataWriter(Topic)
-     */
-    public KeyedStringDataWriter lookupKeyedStringDataWriter(
-            Topic<KeyedString> topic);
-
-
     // --- Other operations: -------------------------------------------------
 
     /**
Index: org/omg/dds/domain/DomainParticipant.java
===================================================================
--- org/omg/dds/domain/DomainParticipant.java	(revision 205)
+++ org/omg/dds/domain/DomainParticipant.java	(revision 207)
@@ -55,6 +55,7 @@
 import org.omg.dds.topic.TopicListener;
 import org.omg.dds.topic.TopicQos;
 import org.omg.dds.type.TypeSupport;
+import org.omg.dds.type.dynamic.DynamicType;
 
 
 /**
@@ -254,6 +255,99 @@
             TopicListener<TYPE> listener,
             Collection<Class<? extends Status>> statuses);
 
+    // --- Create Topic with implicit TypeSupport: ---------------------------
+
+    /**
+     * This operation creates a Topic with default QoS policies and no
+     * TopicListener.
+     * 
+     * The created Topic belongs to the DomainParticipant that is its
+     * factory.
+     * 
+     * @param   topicName   The name of the new Topic.
+     * @param   type        A {@link DynamicType} of all samples to be published and
+     *                      subscribed over the new Topic. The Service will
+     *                      attempt to locate an appropriate
+     *                      {@link TypeSupport} instance based on this type.
+     */
+    public Topic<DynamicType> createTopic(
+            String topicName,
+            DynamicType type);
+
+    /**
+     * This operation creates a Topic with the desired QoS policies and
+     * attaches to it the specified TopicListener.
+     * 
+     * The created Topic belongs to the DomainParticipant that is its
+     * factory.
+     * 
+     * @param   topicName   The name of the new Topic.
+     * @param   type        A {@link DynamicType} of all samples to be published and
+     *                      subscribed over the new Topic. The Service will
+     *                      attempt to locate an appropriate
+     *                      {@link TypeSupport} instance based on this type.
+     * @param   qos         The desired QoS policies. If the specified QoS
+     *                      policies are not consistent, the operation will
+     *                      fail and no Publisher will be created.
+     * @param   listener    The listener to be attached.
+     * @param   statuses    Of which status changes the listener should be
+     *                      notified. A null collection signifies all status
+     *                      changes.
+     */
+    public Topic<DynamicType> createTopic(
+            String topicName,
+            DynamicType type,
+            TopicQos qos,
+            TopicListener<DynamicType> listener,
+            Collection<Class<? extends Status>> statuses);
+
+    // --- Create Topic with explicit TypeSupport: ---------------------------
+
+    /**
+     * This operation creates a Topic with default QoS policies and no
+     * TopicListener.
+     * 
+     * The created Topic belongs to the DomainParticipant that is its
+     * factory.
+     * 
+     * @param   topicName    The name of the new Topic.
+     * @param   type         A {@link DynamicType} representing the type of
+     *                       all samples to be published and subscribed over
+     *                       the new Topic.
+     * @param   typeSupport  A {@link TypeSupport} for {@link DynamicType}.
+     */
+    public Topic<DynamicType> createTopic(
+            String topicName,
+            DynamicType type,
+            TypeSupport<DynamicType> typeSupport);
+
+    /**
+     * This operation creates a Topic with the desired QoS policies and
+     * attaches to it the specified TopicListener.
+     * 
+     * The created Topic belongs to the DomainParticipant that is its
+     * factory.
+     * 
+     * @param   topicName   The name of the new Topic.
+     * @param   type        A {@link DynamicType}
+     * @param   typeSupport A {@link TypeSupport} for {@link DynamicType}
+     * @param   qos         The desired QoS policies. If the specified QoS
+     *                      policies are not consistent, the operation will
+     *                      fail and no Publisher will be created.
+     * @param   listener    The listener to be attached.
+     * @param   statuses    Of which status changes the listener should be
+     *                      notified. A null collection signifies all status
+     *                      changes.
+     */
+    public Topic<DynamicType>createTopic(
+            String topicName,
+            DynamicType type,
+            TypeSupport<DynamicType> typeSupport,
+            TopicQos qos,
+            TopicListener<DynamicType> listener,
+            Collection<Class<? extends Status>> statuses);
+
+    
     // --- Other operations: -------------------------------------------------
 
     /**
Index: org/omg/dds/core/ServiceEnvironment.java
===================================================================
--- org/omg/dds/core/ServiceEnvironment.java	(revision 205)
+++ org/omg/dds/core/ServiceEnvironment.java	(revision 207)
@@ -29,8 +29,10 @@
 import org.omg.dds.domain.DomainParticipantFactory;
 import org.omg.dds.type.TypeSupport;
 import org.omg.dds.type.dynamic.DynamicTypeFactory;
+import org.omg.dds.type.dynamic.DynamicDataFactory;
 import org.omg.dds.core.QosProvider;
 import org.omg.dds.core.policy.PolicyFactory;
+import org.omg.dds.type.builtin.*;
 
 
 /**
@@ -487,5 +489,13 @@
          * @return An instance of {@link PolicyFactory}
          */
         public abstract PolicyFactory getPolicyFactory();
+        
+        public abstract DynamicDataFactory getDynamicDataFactory();
+        
+     // --- Built-in Types -----------------------------------------------------
+        
+        public abstract KeyedString newKeyedString();
+        
+        public abstract KeyedBytes newKeyedBytes();
     }
 }
Index: org/omg/dds/sub/Subscriber.java
===================================================================
--- org/omg/dds/sub/Subscriber.java	(revision 205)
+++ org/omg/dds/sub/Subscriber.java	(revision 207)
@@ -35,14 +35,7 @@
 import org.omg.dds.topic.Topic;
 import org.omg.dds.topic.TopicDescription;
 import org.omg.dds.topic.TopicQos;
-import org.omg.dds.type.builtin.BytesDataReader;
-import org.omg.dds.type.builtin.KeyedBytes;
-import org.omg.dds.type.builtin.KeyedBytesDataReader;
-import org.omg.dds.type.builtin.KeyedString;
-import org.omg.dds.type.builtin.KeyedStringDataReader;
-import org.omg.dds.type.builtin.StringDataReader;
 
-
 /**
  * A Subscriber is the object responsible for the actual reception of the
  * data resulting from its subscriptions.
@@ -132,111 +125,6 @@
             DataReaderListener<TYPE> listener,
             Collection<Class<? extends Status>> statuses);
 
-
-    // --- Create DataReader of built-in bytes type: -------------------------
-
-    /**
-     * Create a new data reader for this built-in type.
-     * 
-     * @see     #createDataReader(TopicDescription)
-     */
-    public BytesDataReader createBytesDataReader(
-            TopicDescription<byte[]> topic);
-
-    /**
-     * Create a new data reader for this built-in type.
-     * 
-     * @param statuses  Of which status changes the listener should be
-     *                  notified. A null collection signifies all status
-     *                  changes.
-     * 
-     * @see     #createDataReader(TopicDescription, DataReaderQos, DataReaderListener, Collection)
-     */
-    public BytesDataReader createBytesDataReader(
-            TopicDescription<byte[]> topic,
-            DataReaderQos qos,
-            DataReaderListener<byte[]> listener,
-            Collection<Class<? extends Status>> statuses);
-
-
-    // --- Create DataReader of built-in KeyedBytes type: --------------------
-
-    /**
-     * Create a new data reader for this built-in type.
-     * 
-     * @see     #createDataReader(TopicDescription)
-     */
-    public KeyedBytesDataReader createKeyedBytesDataReader(
-            TopicDescription<KeyedBytes> topic);
-
-    /**
-     * Create a new data reader for this built-in type.
-     * 
-     * @param statuses  Of which status changes the listener should be
-     *                  notified. A null collection signifies all status
-     *                  changes.
-     * 
-     * @see     #createDataReader(TopicDescription, DataReaderQos, DataReaderListener, Collection)
-     */
-    public KeyedBytesDataReader createKeyedBytesDataReader(
-            TopicDescription<KeyedBytes> topic,
-            DataReaderQos qos,
-            DataReaderListener<KeyedBytes> listener,
-            Collection<Class<? extends Status>> statuses);
-
-
-    // --- Create DataReader of built-in string type: ------------------------
-
-    /**
-     * Create a new data reader for this built-in type.
-     * 
-     * @see     #createDataReader(TopicDescription)
-     */
-    public StringDataReader createStringDataReader(
-            TopicDescription<String> topic);
-
-    /**
-     * Create a new data reader for this built-in type.
-     * 
-     * @param statuses  Of which status changes the listener should be
-     *                  notified. A null collection signifies all status
-     *                  changes.
-     * 
-     * @see     #createDataReader(TopicDescription, DataReaderQos, DataReaderListener, Collection)
-     */
-    public StringDataReader createStringDataReader(
-            TopicDescription<String> topic,
-            DataReaderQos qos,
-            DataReaderListener<String> listener,
-            Collection<Class<? extends Status>> statuses);
-
-
-    // --- Create DataReader of built-in KeyedString type: -------------------
-
-    /**
-     * Create a new data reader for this built-in type.
-     * 
-     * @see     #createDataReader(TopicDescription)
-     */
-    public KeyedStringDataReader createKeyedStringDataReader(
-            TopicDescription<KeyedString> topic);
-
-    /**
-     * Create a new data reader for this built-in type.
-     * 
-     * @param statuses  Of which status changes the listener should be
-     *                  notified. A null collection signifies all status
-     *                  changes.
-     * 
-     * @see     #createDataReader(TopicDescription, DataReaderQos, DataReaderListener, Collection)
-     */
-    public KeyedStringDataReader createKeyedStringDataReader(
-            TopicDescription<KeyedString> topic,
-            DataReaderQos qos,
-            DataReaderListener<KeyedString> listener,
-            Collection<Class<? extends Status>> statuses);
-
-
     // --- Lookup operations: ------------------------------------------------
 
     /**
@@ -273,51 +161,7 @@
     public <TYPE> DataReader<TYPE> lookupDataReader(
             TopicDescription<TYPE> topicName);
 
-    /**
-     * Look up a DataReader for the given built-in data type.
-     * 
-     * @throws  ClassCastException      if a DataReader exists on the given
-     *          TopicDescription but is of a different type.
-     *
-     * @see     #lookupDataReader(TopicDescription)
-     */
-    public BytesDataReader lookupBytesDataReader(
-            TopicDescription<byte[]> topic);
 
-    /**
-     * Look up a DataReader for the given built-in data type.
-     * 
-     * @throws  ClassCastException      if a DataReader exists on the given
-     *          TopicDescription but is of a different type.
-     *
-     * @see     #lookupDataReader(TopicDescription)
-     */
-    public KeyedBytesDataReader lookupKeyedBytesDataReader(
-            TopicDescription<KeyedBytes> topic);
-
-    /**
-     * Look up a DataReader for the given built-in data type.
-     * 
-     * @throws  ClassCastException      if a DataReader exists on the given
-     *          TopicDescription but is of a different type.
-     *
-     * @see     #lookupDataReader(TopicDescription)
-     */
-    public StringDataReader lookupStringDataReader(
-            TopicDescription<String> topic);
-
-    /**
-     * Look up a DataReader for the given built-in data type.
-     * 
-     * @throws  ClassCastException      if a DataReader exists on the given
-     *          TopicDescription but is of a different type.
-     *
-     * @see     #lookupDataReader(TopicDescription)
-     */
-    public KeyedStringDataReader lookupKeyedStringDataReader(
-            TopicDescription<KeyedString> topic);
-
-
     // --- Other operations: -------------------------------------------------
 
     /**
