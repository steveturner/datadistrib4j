
Property changes on: ftf_vote_01
___________________________________________________________________
Modified: svn:mergeinfo
   Merged /trunk:r133,138

Index: ftf_vote_01/srcJavaExample/org/omg/example/dds/helloworld/GreetingSubscribingApp.java
===================================================================
--- ftf_vote_01/srcJavaExample/org/omg/example/dds/helloworld/GreetingSubscribingApp.java	(revision 140)
+++ ftf_vote_01/srcJavaExample/org/omg/example/dds/helloworld/GreetingSubscribingApp.java	(working copy)
@@ -23,7 +23,7 @@
 
 import org.omg.dds.core.Bootstrap;
 import org.omg.dds.core.InstanceHandle;
-import org.omg.dds.core.status.DataAvailableStatus;
+import org.omg.dds.core.status.DataAvailableEvent;
 import org.omg.dds.domain.DomainParticipant;
 import org.omg.dds.domain.DomainParticipantFactory;
 import org.omg.dds.sub.DataReader;
@@ -82,9 +82,9 @@
     private static class MyListener extends DataReaderAdapter<Greeting>
     {
         @Override
-        public void onDataAvailable(DataAvailableStatus<Greeting> status)
+        public void onDataAvailable(DataAvailableEvent<Greeting> evt)
         {
-            DataReader<Greeting> dr = status.getSource();
+            DataReader<Greeting> dr = evt.getSource();
             Sample.Iterator<Greeting> it = dr.take();
             while (it.hasNext()) {
                 Sample<Greeting> smp = it.next();
Index: ftf_vote_01/srcJava/org/omg/dds/pub/PublisherListener.java
===================================================================
--- ftf_vote_01/srcJava/org/omg/dds/pub/PublisherListener.java	(revision 140)
+++ ftf_vote_01/srcJava/org/omg/dds/pub/PublisherListener.java	(working copy)
@@ -21,10 +21,10 @@
 import java.util.EventListener;
 
 import org.omg.dds.core.Entity;
-import org.omg.dds.core.status.LivelinessLostStatus;
-import org.omg.dds.core.status.OfferedDeadlineMissedStatus;
-import org.omg.dds.core.status.OfferedIncompatibleQosStatus;
-import org.omg.dds.core.status.PublicationMatchedStatus;
+import org.omg.dds.core.status.LivelinessLostEvent;
+import org.omg.dds.core.status.OfferedDeadlineMissedEvent;
+import org.omg.dds.core.status.OfferedIncompatibleQosEvent;
+import org.omg.dds.core.status.PublicationMatchedEvent;
 
 
 /**
@@ -34,12 +34,12 @@
  */
 public interface PublisherListener extends EventListener {
     public void onOfferedDeadlineMissed(
-            OfferedDeadlineMissedStatus<?> status);
+            OfferedDeadlineMissedEvent<?> status);
 
     public void onOfferedIncompatibleQos(
-            OfferedIncompatibleQosStatus<?> status);
+            OfferedIncompatibleQosEvent<?> status);
 
-    public void onLivelinessLost(LivelinessLostStatus<?> status);
+    public void onLivelinessLost(LivelinessLostEvent<?> status);
 
-    public void onPublicationMatched(PublicationMatchedStatus<?> status);
+    public void onPublicationMatched(PublicationMatchedEvent<?> status);
 }
Index: ftf_vote_01/srcJava/org/omg/dds/pub/DataWriter.java
===================================================================
--- ftf_vote_01/srcJava/org/omg/dds/pub/DataWriter.java	(revision 146)
+++ ftf_vote_01/srcJava/org/omg/dds/pub/DataWriter.java	(working copy)
@@ -140,8 +140,8 @@
      * 
      * @see     org.omg.dds.core.status
      */
-    public LivelinessLostStatus<TYPE> getLivelinessLostStatus(
-            LivelinessLostStatus<TYPE> status);
+    public LivelinessLostStatus getLivelinessLostStatus(
+            LivelinessLostStatus status);
 
     /**
      * This operation allows access to the OFFERED_DEADLINE_MISSED
@@ -153,8 +153,8 @@
      * 
      * @see     org.omg.dds.core.status
      */
-    public OfferedDeadlineMissedStatus<TYPE> getOfferedDeadlineMissedStatus(
-            OfferedDeadlineMissedStatus<TYPE> status);
+    public OfferedDeadlineMissedStatus getOfferedDeadlineMissedStatus(
+            OfferedDeadlineMissedStatus status);
 
     /**
      * This operation allows access to the OFFERED_INCOMPATIBLE_QOS
@@ -166,8 +166,8 @@
      * 
      * @see     org.omg.dds.core.status
      */
-    public OfferedIncompatibleQosStatus<TYPE> getOfferedIncompatibleQosStatus(
-            OfferedIncompatibleQosStatus<TYPE> status);
+    public OfferedIncompatibleQosStatus getOfferedIncompatibleQosStatus(
+            OfferedIncompatibleQosStatus status);
 
     /**
      * This operation allows access to the PUBLICATION_MATCHED
@@ -179,8 +179,8 @@
      * 
      * @see     org.omg.dds.core.status
      */
-    public PublicationMatchedStatus<TYPE> getPublicationMatchedStatus(
-            PublicationMatchedStatus<TYPE> status);
+    public PublicationMatchedStatus getPublicationMatchedStatus(
+            PublicationMatchedStatus status);
 
     /**
      * This operation manually asserts the liveliness of the DataWriter. This
Index: ftf_vote_01/srcJava/org/omg/dds/pub/DataWriterAdapter.java
===================================================================
--- ftf_vote_01/srcJava/org/omg/dds/pub/DataWriterAdapter.java	(revision 140)
+++ ftf_vote_01/srcJava/org/omg/dds/pub/DataWriterAdapter.java	(working copy)
@@ -18,30 +18,31 @@
 
 package org.omg.dds.pub;
 
-import org.omg.dds.core.status.LivelinessLostStatus;
-import org.omg.dds.core.status.OfferedDeadlineMissedStatus;
-import org.omg.dds.core.status.OfferedIncompatibleQosStatus;
-import org.omg.dds.core.status.PublicationMatchedStatus;
+import org.omg.dds.core.status.LivelinessLostEvent;
+import org.omg.dds.core.status.OfferedDeadlineMissedEvent;
+import org.omg.dds.core.status.OfferedIncompatibleQosEvent;
+import org.omg.dds.core.status.PublicationMatchedEvent;
 
 
 public class DataWriterAdapter<TYPE> implements DataWriterListener<TYPE> {
-    public void onLivelinessLost(LivelinessLostStatus<TYPE> status)
+    public void onLivelinessLost(LivelinessLostEvent<TYPE> status)
     {
         // empty
     }
 
     public void onOfferedDeadlineMissed(
-            OfferedDeadlineMissedStatus<TYPE> status)
+            OfferedDeadlineMissedEvent<TYPE> status)
     {
         // empty
     }
 
     public void onOfferedIncompatibleQos(
-            OfferedIncompatibleQosStatus<TYPE> status) {
+            OfferedIncompatibleQosEvent<TYPE> status)
+    {
         // empty
     }
 
-    public void onPublicationMatched(PublicationMatchedStatus<TYPE> status)
+    public void onPublicationMatched(PublicationMatchedEvent<TYPE> status)
     {
         // empty
     }
Index: ftf_vote_01/srcJava/org/omg/dds/pub/DataWriterListener.java
===================================================================
--- ftf_vote_01/srcJava/org/omg/dds/pub/DataWriterListener.java	(revision 140)
+++ ftf_vote_01/srcJava/org/omg/dds/pub/DataWriterListener.java	(working copy)
@@ -21,10 +21,10 @@
 import java.util.EventListener;
 
 import org.omg.dds.core.Entity;
-import org.omg.dds.core.status.LivelinessLostStatus;
-import org.omg.dds.core.status.OfferedDeadlineMissedStatus;
-import org.omg.dds.core.status.OfferedIncompatibleQosStatus;
-import org.omg.dds.core.status.PublicationMatchedStatus;
+import org.omg.dds.core.status.LivelinessLostEvent;
+import org.omg.dds.core.status.OfferedDeadlineMissedEvent;
+import org.omg.dds.core.status.OfferedIncompatibleQosEvent;
+import org.omg.dds.core.status.PublicationMatchedEvent;
 
 
 /**
@@ -36,12 +36,12 @@
  */
 public interface DataWriterListener<TYPE> extends EventListener {
     public void onOfferedDeadlineMissed(
-            OfferedDeadlineMissedStatus<TYPE> status);
+            OfferedDeadlineMissedEvent<TYPE> status);
 
     public void onOfferedIncompatibleQos(
-            OfferedIncompatibleQosStatus<TYPE> status);
+            OfferedIncompatibleQosEvent<TYPE> status);
 
-    public void onLivelinessLost(LivelinessLostStatus<TYPE> status);
+    public void onLivelinessLost(LivelinessLostEvent<TYPE> status);
 
-    public void onPublicationMatched(PublicationMatchedStatus<TYPE> status);
+    public void onPublicationMatched(PublicationMatchedEvent<TYPE> status);
 }
Index: ftf_vote_01/srcJava/org/omg/dds/pub/Publisher.java
===================================================================
--- ftf_vote_01/srcJava/org/omg/dds/pub/Publisher.java	(revision 140)
+++ ftf_vote_01/srcJava/org/omg/dds/pub/Publisher.java	(working copy)
@@ -129,7 +129,7 @@
             Topic<TYPE> topic,
             DataWriterQos qos,
             DataWriterListener<TYPE> listener,
-            Collection<Class<? extends Status<?, ?>>> statuses);
+            Collection<Class<? extends Status<?>>> statuses);
 
     /**
      * Create a new data writer.
@@ -145,7 +145,7 @@
             String qosLibraryName,
             String qosProfileName,
             DataWriterListener<TYPE> listener,
-            Collection<Class<? extends Status<?, ?>>> statuses);
+            Collection<Class<? extends Status<?>>> statuses);
 
 
     // --- Create DataWriter for built-in bytes type: ------------------------
@@ -171,7 +171,7 @@
             Topic<byte[]> topic,
             DataWriterQos qos,
             DataWriterListener<byte[]> listener,
-            Collection<Class<? extends Status<?, ?>>> statuses);
+            Collection<Class<? extends Status<?>>> statuses);
 
     /**
      * Create a new data writer for this built-in type.
@@ -187,7 +187,7 @@
             String qosLibraryName,
             String qosProfileName,
             DataWriterListener<byte[]> listener,
-            Collection<Class<? extends Status<?, ?>>> statuses);
+            Collection<Class<? extends Status<?>>> statuses);
 
 
     // --- Create DataWriter for built-in KeyedBytes type: -------------------
@@ -213,7 +213,7 @@
             Topic<KeyedBytes> topic,
             DataWriterQos qos,
             DataWriterListener<KeyedBytes> listener,
-            Collection<Class<? extends Status<?, ?>>> statuses);
+            Collection<Class<? extends Status<?>>> statuses);
 
     /**
      * Create a new data writer for this built-in type.
@@ -229,7 +229,7 @@
             String qosLibraryName,
             String qosProfileName,
             DataWriterListener<KeyedBytes> listener,
-            Collection<Class<? extends Status<?, ?>>> statuses);
+            Collection<Class<? extends Status<?>>> statuses);
 
 
     // --- Create DataWriter for built-in string type: -----------------------
@@ -255,7 +255,7 @@
             Topic<String> topic,
             DataWriterQos qos,
             DataWriterListener<String> listener,
-            Collection<Class<? extends Status<?, ?>>> statuses);
+            Collection<Class<? extends Status<?>>> statuses);
 
     /**
      * Create a new data writer for this built-in type.
@@ -271,7 +271,7 @@
             String qosLibraryName,
             String qosProfileName,
             DataWriterListener<String> listener,
-            Collection<Class<? extends Status<?, ?>>> statuses);
+            Collection<Class<? extends Status<?>>> statuses);
 
 
     // --- Create DataWriter for built-in KeyedString type: ------------------
@@ -297,7 +297,7 @@
             Topic<KeyedString> topic,
             DataWriterQos qos,
             DataWriterListener<KeyedString> listener,
-            Collection<Class<? extends Status<?, ?>>> statuses);
+            Collection<Class<? extends Status<?>>> statuses);
 
     /**
      * Create a new data writer for this built-in type.
@@ -313,7 +313,7 @@
             String qosLibraryName,
             String qosProfileName,
             DataWriterListener<KeyedString> listener,
-            Collection<Class<? extends Status<?, ?>>> statuses);
+            Collection<Class<? extends Status<?>>> statuses);
 
 
     // --- Lookup operations: ------------------------------------------------
Index: ftf_vote_01/srcJava/org/omg/dds/pub/PublisherAdapter.java
===================================================================
--- ftf_vote_01/srcJava/org/omg/dds/pub/PublisherAdapter.java	(revision 140)
+++ ftf_vote_01/srcJava/org/omg/dds/pub/PublisherAdapter.java	(working copy)
@@ -18,32 +18,32 @@
 
 package org.omg.dds.pub;
 
-import org.omg.dds.core.status.LivelinessLostStatus;
-import org.omg.dds.core.status.OfferedDeadlineMissedStatus;
-import org.omg.dds.core.status.OfferedIncompatibleQosStatus;
-import org.omg.dds.core.status.PublicationMatchedStatus;
+import org.omg.dds.core.status.LivelinessLostEvent;
+import org.omg.dds.core.status.OfferedDeadlineMissedEvent;
+import org.omg.dds.core.status.OfferedIncompatibleQosEvent;
+import org.omg.dds.core.status.PublicationMatchedEvent;
 
 
 public class PublisherAdapter implements PublisherListener
 {
-    public void onLivelinessLost(LivelinessLostStatus<?> status)
+    public void onLivelinessLost(LivelinessLostEvent<?> status)
     {
         // empty
     }
 
     public void onOfferedDeadlineMissed(
-            OfferedDeadlineMissedStatus<?> status)
+            OfferedDeadlineMissedEvent<?> status)
     {
         // empty
     }
 
     public void onOfferedIncompatibleQos(
-            OfferedIncompatibleQosStatus<?> status)
+            OfferedIncompatibleQosEvent<?> status)
     {
         // empty
     }
 
-    public void onPublicationMatched(PublicationMatchedStatus<?> status)
+    public void onPublicationMatched(PublicationMatchedEvent<?> status)
     {
         // empty
     }
Index: ftf_vote_01/srcJava/org/omg/dds/domain/DomainParticipant.java
===================================================================
--- ftf_vote_01/srcJava/org/omg/dds/domain/DomainParticipant.java	(revision 143)
+++ ftf_vote_01/srcJava/org/omg/dds/domain/DomainParticipant.java	(working copy)
@@ -114,7 +114,7 @@
     public Publisher createPublisher(
             PublisherQos qos,
             PublisherListener listener,
-            Collection<Class<? extends Status<?, ?>>> statuses);
+            Collection<Class<? extends Status<?>>> statuses);
 
     /**
      * This operation creates a Publisher.
@@ -133,7 +133,7 @@
             String qosLibraryName,
             String qosProfileName,
             PublisherListener listener,
-            Collection<Class<? extends Status<?, ?>>> statuses);
+            Collection<Class<? extends Status<?>>> statuses);
 
     // --- Create Subscriber: ------------------------------------------------
 
@@ -167,7 +167,7 @@
     public Subscriber createSubscriber(
             SubscriberQos qos,
             SubscriberListener listener,
-            Collection<Class<? extends Status<?, ?>>> statuses);
+            Collection<Class<? extends Status<?>>> statuses);
 
     /**
      * This operation creates a Subscriber.
@@ -186,7 +186,7 @@
             String qosLibraryName,
             String qosProfileName,
             SubscriberListener listener,
-            Collection<Class<? extends Status<?, ?>>> statuses);
+            Collection<Class<? extends Status<?>>> statuses);
 
     /**
      * This operation allows access to the built-in Subscriber. Each
@@ -245,7 +245,7 @@
             Class<TYPE> type,
             TopicQos qos,
             TopicListener<TYPE> listener,
-            Collection<Class<? extends Status<?, ?>>> statuses);
+            Collection<Class<? extends Status<?>>> statuses);
 
     /**
      * This operation creates a Topic with the desired QoS policies and
@@ -269,7 +269,7 @@
             String qosLibraryName,
             String qosProfileName,
             TopicListener<TYPE> listener,
-            Collection<Class<? extends Status<?, ?>>> statuses);
+            Collection<Class<? extends Status<?>>> statuses);
 
 
     // --- Create Topic with explicit TypeSupport: ---------------------------
@@ -314,7 +314,7 @@
             TypeSupport<TYPE> type,
             TopicQos qos,
             TopicListener<TYPE> listener,
-            Collection<Class<? extends Status<?, ?>>> statuses);
+            Collection<Class<? extends Status<?>>> statuses);
 
     /**
      * This operation creates a Topic with the desired QoS policies and
@@ -337,7 +337,7 @@
             String qosLibraryName,
             String qosProfileName,
             TopicListener<TYPE> listener,
-            Collection<Class<? extends Status<?, ?>>> statuses);
+            Collection<Class<? extends Status<?>>> statuses);
 
 
     // --- Other operations: -------------------------------------------------
Index: ftf_vote_01/srcJava/org/omg/dds/domain/DomainParticipantAdapter.java
===================================================================
--- ftf_vote_01/srcJava/org/omg/dds/domain/DomainParticipantAdapter.java	(revision 140)
+++ ftf_vote_01/srcJava/org/omg/dds/domain/DomainParticipantAdapter.java	(working copy)
@@ -18,87 +18,87 @@
 
 package org.omg.dds.domain;
 
-import org.omg.dds.core.status.DataAvailableStatus;
-import org.omg.dds.core.status.DataOnReadersStatus;
-import org.omg.dds.core.status.InconsistentTopicStatus;
-import org.omg.dds.core.status.LivelinessChangedStatus;
-import org.omg.dds.core.status.LivelinessLostStatus;
-import org.omg.dds.core.status.OfferedDeadlineMissedStatus;
-import org.omg.dds.core.status.OfferedIncompatibleQosStatus;
-import org.omg.dds.core.status.PublicationMatchedStatus;
-import org.omg.dds.core.status.RequestedDeadlineMissedStatus;
-import org.omg.dds.core.status.RequestedIncompatibleQosStatus;
-import org.omg.dds.core.status.SampleLostStatus;
-import org.omg.dds.core.status.SampleRejectedStatus;
-import org.omg.dds.core.status.SubscriptionMatchedStatus;
+import org.omg.dds.core.status.DataAvailableEvent;
+import org.omg.dds.core.status.DataOnReadersEvent;
+import org.omg.dds.core.status.InconsistentTopicEvent;
+import org.omg.dds.core.status.LivelinessChangedEvent;
+import org.omg.dds.core.status.LivelinessLostEvent;
+import org.omg.dds.core.status.OfferedDeadlineMissedEvent;
+import org.omg.dds.core.status.OfferedIncompatibleQosEvent;
+import org.omg.dds.core.status.PublicationMatchedEvent;
+import org.omg.dds.core.status.RequestedDeadlineMissedEvent;
+import org.omg.dds.core.status.RequestedIncompatibleQosEvent;
+import org.omg.dds.core.status.SampleLostEvent;
+import org.omg.dds.core.status.SampleRejectedEvent;
+import org.omg.dds.core.status.SubscriptionMatchedEvent;
 
 
 public class DomainParticipantAdapter implements DomainParticipantListener
 {
-    public void onInconsistentTopic(InconsistentTopicStatus<?> status)
+    public void onInconsistentTopic(InconsistentTopicEvent<?> status)
     {
         // empty
     }
 
-    public void onLivelinessLost(LivelinessLostStatus<?> status)
+    public void onLivelinessLost(LivelinessLostEvent<?> status)
     {
         // empty
     }
 
-    public void onOfferedDeadlineMissed(OfferedDeadlineMissedStatus<?> status)
+    public void onOfferedDeadlineMissed(OfferedDeadlineMissedEvent<?> status)
     {
         // empty
     }
 
     public void onOfferedIncompatibleQos(
-            OfferedIncompatibleQosStatus<?> status)
+            OfferedIncompatibleQosEvent<?> status)
     {
         // empty
     }
 
-    public void onPublicationMatched(PublicationMatchedStatus<?> status)
+    public void onPublicationMatched(PublicationMatchedEvent<?> status)
     {
         // empty
     }
 
-    public void onDataOnReaders(DataOnReadersStatus status)
+    public void onDataOnReaders(DataOnReadersEvent status)
     {
         // empty
     }
 
-    public void onDataAvailable(DataAvailableStatus<?> status)
+    public void onDataAvailable(DataAvailableEvent<?> status)
     {
         // empty
     }
 
-    public void onLivelinessChanged(LivelinessChangedStatus<?> status)
+    public void onLivelinessChanged(LivelinessChangedEvent<?> status)
     {
         // empty
     }
 
     public void onRequestedDeadlineMissed(
-            RequestedDeadlineMissedStatus<?> status)
+            RequestedDeadlineMissedEvent<?> status)
     {
         // empty
     }
 
     public void onRequestedIncompatibleQos(
-            RequestedIncompatibleQosStatus<?> status)
+            RequestedIncompatibleQosEvent<?> status)
     {
         // empty
     }
 
-    public void onSampleLost(SampleLostStatus<?> status)
+    public void onSampleLost(SampleLostEvent<?> status)
     {
         // empty
     }
 
-    public void onSampleRejected(SampleRejectedStatus<?> status)
+    public void onSampleRejected(SampleRejectedEvent<?> status)
     {
         // empty
     }
 
-    public void onSubscriptionMatched(SubscriptionMatchedStatus<?> status)
+    public void onSubscriptionMatched(SubscriptionMatchedEvent<?> status)
     {
         // empty
     }
Index: ftf_vote_01/srcJava/org/omg/dds/domain/DomainParticipantListener.java
===================================================================
--- ftf_vote_01/srcJava/org/omg/dds/domain/DomainParticipantListener.java	(revision 140)
+++ ftf_vote_01/srcJava/org/omg/dds/domain/DomainParticipantListener.java	(working copy)
@@ -19,7 +19,7 @@
 package org.omg.dds.domain;
 
 import org.omg.dds.core.DomainEntity;
-import org.omg.dds.core.status.InconsistentTopicStatus;
+import org.omg.dds.core.status.InconsistentTopicEvent;
 import org.omg.dds.pub.PublisherListener;
 import org.omg.dds.sub.SubscriberListener;
 
@@ -39,5 +39,5 @@
  */
 public interface DomainParticipantListener
 extends PublisherListener, SubscriberListener {
-    public void onInconsistentTopic(InconsistentTopicStatus<?> status);
+    public void onInconsistentTopic(InconsistentTopicEvent<?> status);
 }
Index: ftf_vote_01/srcJava/org/omg/dds/domain/DomainParticipantFactory.java
===================================================================
--- ftf_vote_01/srcJava/org/omg/dds/domain/DomainParticipantFactory.java	(revision 140)
+++ ftf_vote_01/srcJava/org/omg/dds/domain/DomainParticipantFactory.java	(working copy)
@@ -103,7 +103,7 @@
             int domainId,
             DomainParticipantQos qos,
             DomainParticipantListener listener,
-            Collection<Class<? extends Status<?, ?>>> statuses);
+            Collection<Class<? extends Status<?>>> statuses);
 
     /**
      * Create a new domain participant.
@@ -119,7 +119,7 @@
             String qosLibraryName,
             String qosProfileName,
             DomainParticipantListener listener,
-            Collection<Class<? extends Status<?, ?>>> statuses);
+            Collection<Class<? extends Status<?>>> statuses);
 
     /**
      * This operation retrieves a previously created DomainParticipant
Index: ftf_vote_01/srcJava/org/omg/dds/core/status/RequestedDeadlineMissedStatus.java
===================================================================
--- ftf_vote_01/srcJava/org/omg/dds/core/status/RequestedDeadlineMissedStatus.java	(revision 140)
+++ ftf_vote_01/srcJava/org/omg/dds/core/status/RequestedDeadlineMissedStatus.java	(working copy)
@@ -28,17 +28,16 @@
  * The deadline that the {@link DataReader} was expecting through its
  * {@link DeadlineQosPolicy} was not respected for a specific instance.
  *
- * @param <TYPE>    The data type of the source {@link DataReader}.
- * 
+ * @see RequestedDeadlineMissedEvent
  * @see OfferedDeadlineMissedStatus
  */
-public abstract class RequestedDeadlineMissedStatus<TYPE>
-extends Status<RequestedDeadlineMissedStatus<TYPE>, DataReader<TYPE>> {
+public abstract class RequestedDeadlineMissedStatus
+extends Status<RequestedDeadlineMissedStatus> {
     // -----------------------------------------------------------------------
     // Constants
     // -----------------------------------------------------------------------
 
-    private static final long serialVersionUID = 8571367679700186607L;
+    private static final long serialVersionUID = 4552827018168249989L;
 
 
 
@@ -50,20 +49,13 @@
      * @param bootstrap Identifies the Service instance to which the new
      *                  object will belong.
      */
-    public static <TYPE> RequestedDeadlineMissedStatus<TYPE>
+    public static RequestedDeadlineMissedStatus
     newRequestedDeadlineMissedStatus(Bootstrap bootstrap) {
         return bootstrap.getSPI().newRequestedDeadlineMissedStatus();
     }
 
 
-    // -----------------------------------------------------------------------
 
-    protected RequestedDeadlineMissedStatus(DataReader<TYPE> source) {
-        super(source);
-    }
-
-
-
     // -----------------------------------------------------------------------
     // Methods
     // -----------------------------------------------------------------------
Index: ftf_vote_01/srcJava/org/omg/dds/core/status/PublicationMatchedStatus.java
===================================================================
--- ftf_vote_01/srcJava/org/omg/dds/core/status/PublicationMatchedStatus.java	(revision 140)
+++ ftf_vote_01/srcJava/org/omg/dds/core/status/PublicationMatchedStatus.java	(working copy)
@@ -30,17 +30,16 @@
  * {@link Topic} and has compatible QoS, or has ceased to be matched with a
  * DataReader that was previously considered to be matched.
  *
- * @param <TYPE>    The data type of the source {@link DataWriter}.
- * 
+ * @see PublicationMatchedEvent
  * @see SubscriptionMatchedStatus
  */
-public abstract class PublicationMatchedStatus<TYPE>
-extends Status<PublicationMatchedStatus<TYPE>, DataWriter<TYPE>> {
+public abstract class PublicationMatchedStatus
+extends Status<PublicationMatchedStatus> {
     // -----------------------------------------------------------------------
     // Constants
     // -----------------------------------------------------------------------
 
-    private static final long serialVersionUID = -2133794660702966974L;
+    private static final long serialVersionUID = 275828934444687975L;
 
 
 
@@ -52,20 +51,14 @@
      * @param bootstrap Identifies the Service instance to which the new
      *                  object will belong.
      */
-    public static <TYPE> PublicationMatchedStatus<TYPE>
-    newPublicationMatchedStatus(Bootstrap bootstrap) {
+    public static PublicationMatchedStatus newPublicationMatchedStatus(
+            Bootstrap bootstrap)
+    {
         return bootstrap.getSPI().newPublicationMatchedStatus();
     }
 
 
-    // -----------------------------------------------------------------------
 
-    protected PublicationMatchedStatus(DataWriter<TYPE> source) {
-        super(source);
-    }
-
-
-
     // -----------------------------------------------------------------------
     // Methods
     // -----------------------------------------------------------------------
Index: ftf_vote_01/srcJava/org/omg/dds/core/status/OfferedDeadlineMissedStatus.java
===================================================================
--- ftf_vote_01/srcJava/org/omg/dds/core/status/OfferedDeadlineMissedStatus.java	(revision 140)
+++ ftf_vote_01/srcJava/org/omg/dds/core/status/OfferedDeadlineMissedStatus.java	(working copy)
@@ -28,17 +28,16 @@
  * The deadline that the {@link DataWriter} has committed through its
  * {@link DeadlineQosPolicy} was not respected for a specific instance.
  *
- * @param <TYPE>    The data type of the source {@link DataWriter}.
- * 
+ * @see OfferedDeadlineMissedEvent
  * @see RequestedDeadlineMissedStatus
  */
-public abstract class OfferedDeadlineMissedStatus<TYPE>
-extends Status<OfferedDeadlineMissedStatus<TYPE>, DataWriter<TYPE>> {
+public abstract class OfferedDeadlineMissedStatus
+extends Status<OfferedDeadlineMissedStatus> {
     // -----------------------------------------------------------------------
     // Constants
     // -----------------------------------------------------------------------
 
-    private static final long serialVersionUID = 7958557115889148585L;
+    private static final long serialVersionUID = 6088889577826357336L;
 
 
 
@@ -50,20 +49,14 @@
      * @param bootstrap Identifies the Service instance to which the new
      *                  object will belong.
      */
-    public static <TYPE> OfferedDeadlineMissedStatus<TYPE>
-    newOfferedDeadlineMissedStatus(Bootstrap bootstrap) {
+    public static OfferedDeadlineMissedStatus newOfferedDeadlineMissedStatus(
+            Bootstrap bootstrap)
+    {
         return bootstrap.getSPI().newOfferedDeadlineMissedStatus();
     }
 
 
-    // -----------------------------------------------------------------------
 
-    protected OfferedDeadlineMissedStatus(DataWriter<TYPE> source) {
-        super(source);
-    }
-
-
-
     // -----------------------------------------------------------------------
     // Methods
     // -----------------------------------------------------------------------
Index: ftf_vote_01/srcJava/org/omg/dds/core/status/DataAvailableEvent.java
===================================================================
--- ftf_vote_01/srcJava/org/omg/dds/core/status/DataAvailableEvent.java	(revision 140)
+++ ftf_vote_01/srcJava/org/omg/dds/core/status/DataAvailableEvent.java	(working copy)
@@ -43,9 +43,6 @@
    // Methods
    // -----------------------------------------------------------------------
 
-   public abstract DataAvailableStatus getStatus();
-
-
    // --- Object Life Cycle: ------------------------------------------------
 
     protected DataAvailableEvent(DataReader<TYPE> source) {
Index: ftf_vote_01/srcJava/org/omg/dds/core/status/SubscriptionMatchedStatus.java
===================================================================
--- ftf_vote_01/srcJava/org/omg/dds/core/status/SubscriptionMatchedStatus.java	(revision 140)
+++ ftf_vote_01/srcJava/org/omg/dds/core/status/SubscriptionMatchedStatus.java	(working copy)
@@ -30,17 +30,16 @@
  * {@link Topic} and has compatible QoS, or has ceased to be matched with a
  * DataWriter that was previously considered to be matched.
  *
- * @param <TYPE>    The data type of the source {@link DataReader}.
- * 
+ * @see SubscriptionMatchedEvent
  * @see PublicationMatchedStatus
  */
-public abstract class SubscriptionMatchedStatus<TYPE>
-extends Status<SubscriptionMatchedStatus<TYPE>, DataReader<TYPE>> {
+public abstract class SubscriptionMatchedStatus
+extends Status<SubscriptionMatchedStatus> {
     // -----------------------------------------------------------------------
     // Constants
     // -----------------------------------------------------------------------
 
-    private static final long serialVersionUID = -8311789136391541797L;
+    private static final long serialVersionUID = 8269669800428084585L;
 
 
 
@@ -52,20 +51,14 @@
      * @param bootstrap Identifies the Service instance to which the new
      *                  object will belong.
      */
-    public static <TYPE> SubscriptionMatchedStatus<TYPE>
-    newSubscriptionMatchedStatus(Bootstrap bootstrap) {
+    public static SubscriptionMatchedStatus newSubscriptionMatchedStatus(
+            Bootstrap bootstrap)
+    {
         return bootstrap.getSPI().newSubscriptionMatchedStatus();
     }
 
 
-    // -----------------------------------------------------------------------
 
-    protected SubscriptionMatchedStatus(DataReader<TYPE> source) {
-        super(source);
-    }
-
-
-
     // -----------------------------------------------------------------------
     // Methods
     // -----------------------------------------------------------------------
Index: ftf_vote_01/srcJava/org/omg/dds/core/status/DataAvailableStatus.java
===================================================================
--- ftf_vote_01/srcJava/org/omg/dds/core/status/DataAvailableStatus.java	(revision 148)
+++ ftf_vote_01/srcJava/org/omg/dds/core/status/DataAvailableStatus.java	(working copy)
@@ -1,61 +0,0 @@
-/* Copyright 2010, Object Management Group, Inc.
- * Copyright 2010, PrismTech, Inc.
- * Copyright 2010, Real-Time Innovations, Inc.
- * All rights reserved.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.omg.dds.core.status;
-
-import org.omg.dds.core.Bootstrap;
-import org.omg.dds.sub.DataReader;
-
-
-/**
- * New information is available.
- *
- * @param <TYPE>    The data type of the source {@link DataReader}.
- * 
- * @see DataOnReadersStatus
- */
-public abstract class DataAvailableStatus<TYPE>
-extends Status<DataAvailableStatus<TYPE>, DataReader<TYPE>> {
-    // -----------------------------------------------------------------------
-    // Constants
-    // -----------------------------------------------------------------------
-
-    private static final long serialVersionUID = -865384611703927431L;
-
-
-
-    // -----------------------------------------------------------------------
-    // Object Life Cycle
-    // -----------------------------------------------------------------------
-
-    /**
-     * @param bootstrap Identifies the Service instance to which the new
-     *                  object will belong.
-     */
-    public static <TYPE> DataAvailableStatus<TYPE>
-    newDataAvailableStatus(Bootstrap bootstrap) {
-        return bootstrap.getSPI().newDataAvailableStatus();
-    }
-
-
-    // -----------------------------------------------------------------------
-
-    protected DataAvailableStatus(DataReader<TYPE> source) {
-        super(source);
-    }
-}
Index: ftf_vote_01/srcJava/org/omg/dds/core/status/DataOnReadersEvent.java
===================================================================
--- ftf_vote_01/srcJava/org/omg/dds/core/status/DataOnReadersEvent.java	(revision 140)
+++ ftf_vote_01/srcJava/org/omg/dds/core/status/DataOnReadersEvent.java	(working copy)
@@ -41,9 +41,6 @@
     // Methods
     // -----------------------------------------------------------------------
 
-    public abstract DataOnReadersStatus getStatus();
-
-
     // --- Object Life Cycle: ------------------------------------------------
 
     protected DataOnReadersEvent(Subscriber source) {
Index: ftf_vote_01/srcJava/org/omg/dds/core/status/RequestedIncompatibleQosStatus.java
===================================================================
--- ftf_vote_01/srcJava/org/omg/dds/core/status/RequestedIncompatibleQosStatus.java	(revision 140)
+++ ftf_vote_01/srcJava/org/omg/dds/core/status/RequestedIncompatibleQosStatus.java	(working copy)
@@ -31,17 +31,16 @@
 /**
  * A {@link QosPolicy} value was incompatible with what is offered.
  *
- * @param <TYPE>    The data type of the source {@link DataReader}.
- * 
+ * @see RequestedIncompatibleQosEvent
  * @see OfferedIncompatibleQosStatus
  */
-public abstract class RequestedIncompatibleQosStatus<TYPE>
-extends Status<RequestedIncompatibleQosStatus<TYPE>, DataReader<TYPE>> {
+public abstract class RequestedIncompatibleQosStatus
+extends Status<RequestedIncompatibleQosStatus> {
     // -----------------------------------------------------------------------
     // Constants
     // -----------------------------------------------------------------------
 
-    private static final long serialVersionUID = 4709309312402183531L;
+    private static final long serialVersionUID = -2043838384277714409L;
 
 
 
@@ -53,20 +52,13 @@
      * @param bootstrap Identifies the Service instance to which the new
      *                  object will belong.
      */
-    public static <TYPE> RequestedIncompatibleQosStatus<TYPE>
+    public static RequestedIncompatibleQosStatus
     newRequestedIncompatibleQosStatus(Bootstrap bootstrap) {
         return bootstrap.getSPI().newRequestedIncompatibleQosStatus();
     }
 
 
-    // -----------------------------------------------------------------------
 
-    protected RequestedIncompatibleQosStatus(DataReader<TYPE> source) {
-        super(source);
-    }
-
-
-
     // -----------------------------------------------------------------------
     // Methods
     // -----------------------------------------------------------------------
Index: ftf_vote_01/srcJava/org/omg/dds/core/status/DataOnReadersStatus.java
===================================================================
--- ftf_vote_01/srcJava/org/omg/dds/core/status/DataOnReadersStatus.java	(revision 148)
+++ ftf_vote_01/srcJava/org/omg/dds/core/status/DataOnReadersStatus.java	(working copy)
@@ -1,59 +0,0 @@
-/* Copyright 2010, Object Management Group, Inc.
- * Copyright 2010, PrismTech, Inc.
- * Copyright 2010, Real-Time Innovations, Inc.
- * All rights reserved.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.omg.dds.core.status;
-
-import org.omg.dds.core.Bootstrap;
-import org.omg.dds.sub.Subscriber;
-
-
-/**
- * New information is available.
- * 
- * @see DataAvailableStatus
- */
-public abstract class DataOnReadersStatus
-extends Status<DataOnReadersStatus, Subscriber> {
-    // -----------------------------------------------------------------------
-    // Constants
-    // -----------------------------------------------------------------------
-
-    private static final long serialVersionUID = -770537656671131411L;
-
-
-
-    // -----------------------------------------------------------------------
-    // Object Life Cycle
-    // -----------------------------------------------------------------------
-
-    /**
-     * @param bootstrap Identifies the Service instance to which the new
-     *                  object will belong.
-     */
-    public static DataOnReadersStatus newDataOnReadersStatus(
-            Bootstrap bootstrap) {
-        return bootstrap.getSPI().newDataOnReadersStatus();
-    }
-
-
-    // -----------------------------------------------------------------------
-
-    protected DataOnReadersStatus(Subscriber source) {
-        super(source);
-    }
-}
Index: ftf_vote_01/srcJava/org/omg/dds/core/status/Status.java
===================================================================
--- ftf_vote_01/srcJava/org/omg/dds/core/status/Status.java	(revision 140)
+++ ftf_vote_01/srcJava/org/omg/dds/core/status/Status.java	(working copy)
@@ -18,7 +18,6 @@
 
 package org.omg.dds.core.status;
 
-import java.util.EventObject;
 import java.util.Set;
 
 import org.omg.dds.core.Bootstrap;
@@ -37,16 +36,16 @@
  * The changes on these status values are the ones that both cause activation
  * of the corresponding {@link StatusCondition} objects and trigger invocation
  * of the proper Listener objects to asynchronously inform the application.
+ * 
+ * @see StatusChangedEvent
  */
-public abstract class Status<SELF extends Status<SELF, SOURCE>,
-                             SOURCE extends Entity<SOURCE, ?, ?>>
-extends EventObject
+public abstract class Status<SELF extends Status<SELF>>
 implements ModifiableValue<SELF, SELF> {
     // -----------------------------------------------------------------------
     // Constants
     // -----------------------------------------------------------------------
 
-    private static final long serialVersionUID = 1989817719529565165L;
+    private static final long serialVersionUID = 8294883446033723160L;
 
 
 
@@ -58,8 +57,9 @@
      * @param bootstrap Identifies the Service instance to which the
      *                  object will belong.
      */
-    public static Set<Class<? extends Status<?, ?>>> allStatuses(
-            Bootstrap bootstrap) {
+    public static Set<Class<? extends Status<?>>> allStatuses(
+            Bootstrap bootstrap)
+    {
         return bootstrap.getSPI().allStatusKinds();
     }
 
@@ -68,37 +68,18 @@
      * @param bootstrap Identifies the Service instance to which the
      *                  object will belong.
      */
-    public static Set<Class<? extends Status<?, ?>>> noStatuses(
-            Bootstrap bootstrap) {
+    public static Set<Class<? extends Status<?>>> noStatuses(
+            Bootstrap bootstrap)
+    {
         return bootstrap.getSPI().noStatusKinds();
     }
 
 
-    // -----------------------------------------------------------------------
 
-    protected Status(SOURCE source) {
-        super(source);
-    }
-
-
-
     // -----------------------------------------------------------------------
     // Methods
     // -----------------------------------------------------------------------
 
-    // --- API: --------------------------------------------------------------
-
     @Override
-    public abstract SOURCE getSource();
-
-
-    @Override
     public abstract SELF clone();
-
-
-    // --- SPI: --------------------------------------------------------------
-
-    protected void setSource(SOURCE source) {
-        super.source = source;
-    }
 }
Index: ftf_vote_01/srcJava/org/omg/dds/core/status/InconsistentTopicStatus.java
===================================================================
--- ftf_vote_01/srcJava/org/omg/dds/core/status/InconsistentTopicStatus.java	(revision 140)
+++ ftf_vote_01/srcJava/org/omg/dds/core/status/InconsistentTopicStatus.java	(working copy)
@@ -25,15 +25,15 @@
 /**
  * Another topic exists with the same name but different characteristics.
  * 
- * @param <TYPE>    The data type of the source {@link Topic}
+ * @see InconsistentTopicEvent
  */
-public abstract class InconsistentTopicStatus<TYPE>
-extends Status<InconsistentTopicStatus<TYPE>, Topic<TYPE>> {
+public abstract class InconsistentTopicStatus
+extends Status<InconsistentTopicStatus> {
     // -----------------------------------------------------------------------
     // Constants
     // -----------------------------------------------------------------------
 
-    private static final long serialVersionUID = 4436349983298916816L;
+    private static final long serialVersionUID = -1695476267550323893L;
 
 
 
@@ -45,20 +45,14 @@
      * @param bootstrap Identifies the Service instance to which the new
      *                  object will belong.
      */
-    public static <TYPE> InconsistentTopicStatus<TYPE>
-    newInconsistentTopicStatus(Bootstrap bootstrap) {
+    public static InconsistentTopicStatus newInconsistentTopicStatus(
+            Bootstrap bootstrap)
+    {
         return bootstrap.getSPI().newInconsistentTopicStatus();
     }
 
 
-    // -----------------------------------------------------------------------
 
-    protected InconsistentTopicStatus(Topic<TYPE> source) {
-        super(source);
-    }
-
-
-
     // -----------------------------------------------------------------------
     // Methods
     // -----------------------------------------------------------------------
Index: ftf_vote_01/srcJava/org/omg/dds/core/status/LivelinessLostStatus.java
===================================================================
--- ftf_vote_01/srcJava/org/omg/dds/core/status/LivelinessLostStatus.java	(revision 140)
+++ ftf_vote_01/srcJava/org/omg/dds/core/status/LivelinessLostStatus.java	(working copy)
@@ -29,17 +29,17 @@
  * {@link LivelinessQosPolicy} was not respected; thus {@link DataReader}
  * entities will consider the DataWriter as no longer "active."
  *
- * @param <TYPE>    The data type of the source {@link DataWriter}.
- * 
+ * @see LivelinessLostEvent
+ * @see LivelinessChangedStatus
  * @see SubscriptionMatchedStatus
  */
-public abstract class LivelinessLostStatus<TYPE>
-extends Status<LivelinessLostStatus<TYPE>, DataWriter<TYPE>> {
+public abstract class LivelinessLostStatus
+extends Status<LivelinessLostStatus> {
     // -----------------------------------------------------------------------
     // Constants
     // -----------------------------------------------------------------------
 
-    private static final long serialVersionUID = -3741038559289576020L;
+    private static final long serialVersionUID = -8294734757039670162L;
 
 
 
@@ -51,20 +51,14 @@
      * @param bootstrap Identifies the Service instance to which the new
      *                  object will belong.
      */
-    public static <TYPE> LivelinessLostStatus<TYPE>
-    newLivelinessLostStatus(Bootstrap bootstrap) {
+    public static LivelinessLostStatus newLivelinessLostStatus(
+            Bootstrap bootstrap)
+    {
         return bootstrap.getSPI().newLivelinessLostStatus();
     }
 
 
-    // -----------------------------------------------------------------------
 
-    protected LivelinessLostStatus(DataWriter<TYPE> source) {
-        super(source);
-    }
-
-
-
     // -----------------------------------------------------------------------
     // Methods
     // -----------------------------------------------------------------------
Index: ftf_vote_01/srcJava/org/omg/dds/core/status/package-info.java
===================================================================
--- ftf_vote_01/srcJava/org/omg/dds/core/status/package-info.java	(revision 140)
+++ ftf_vote_01/srcJava/org/omg/dds/core/status/package-info.java	(working copy)
@@ -97,15 +97,15 @@
  * 
  * <ul>
  *     <li>The DATA_AVAILABLE StatusChangedFlag becomes false when either the
- *         {@link org.omg.dds.sub.DataReaderListener#onDataAvailable(DataAvailableStatus)}
+ *         {@link org.omg.dds.sub.DataReaderListener#onDataAvailable(DataAvailableEvent)}
  *         is called or the {@link org.omg.dds.sub.DataReader#read()} or
  *         {@link org.omg.dds.sub.DataReader#take()} operation (or their
  *         variants) is called on the associated DataReader.</li>
  *     <li>The DATA_ON_READERS StatusChangedFlag becomes false when any of
  *         the following events occur:<ul>
- *         <li>{@link org.omg.dds.sub.SubscriberListener#onDataOnReaders(DataOnReadersStatus)}
+ *         <li>{@link org.omg.dds.sub.SubscriberListener#onDataOnReaders(DataOnReadersEvent)}
  *             is called.</li>
- *         <li>{@link org.omg.dds.sub.DataReaderListener#onDataAvailable(DataAvailableStatus)}
+ *         <li>{@link org.omg.dds.sub.DataReaderListener#onDataAvailable(DataAvailableEvent)}
  *             is called on any DataReader belonging to the
  *             {@link org.omg.dds.sub.Subscriber}.</li>
  *         <li>The {@link org.omg.dds.sub.DataReader#read()} or
Index: ftf_vote_01/srcJava/org/omg/dds/core/status/SampleLostStatus.java
===================================================================
--- ftf_vote_01/srcJava/org/omg/dds/core/status/SampleLostStatus.java	(revision 140)
+++ ftf_vote_01/srcJava/org/omg/dds/core/status/SampleLostStatus.java	(working copy)
@@ -19,22 +19,20 @@
 package org.omg.dds.core.status;
 
 import org.omg.dds.core.Bootstrap;
-import org.omg.dds.sub.DataReader;
 import org.omg.dds.topic.Topic;
 
 
 /**
  * A sample has been lost (never received).
  *
- * @param <TYPE>    The data type of the source {@link DataReader}.
+ * @see SampleLostEvent
  */
-public abstract class SampleLostStatus<TYPE>
-extends Status<SampleLostStatus<TYPE>, DataReader<TYPE>> {
+public abstract class SampleLostStatus extends Status<SampleLostStatus> {
     // -----------------------------------------------------------------------
     // Constants
     // -----------------------------------------------------------------------
 
-    private static final long serialVersionUID = -520330521363610833L;
+    private static final long serialVersionUID = 6522885693257415947L;
 
 
 
@@ -46,20 +44,13 @@
      * @param bootstrap Identifies the Service instance to which the new
      *                  object will belong.
      */
-    public static <TYPE> SampleLostStatus<TYPE>
-    newSampleLostStatus(Bootstrap bootstrap) {
+    public static SampleLostStatus newSampleLostStatus(Bootstrap bootstrap)
+    {
         return bootstrap.getSPI().newSampleLostStatus();
     }
 
 
-    // -----------------------------------------------------------------------
 
-    protected SampleLostStatus(DataReader<TYPE> source) {
-        super(source);
-    }
-
-
-
     // -----------------------------------------------------------------------
     // Methods
     // -----------------------------------------------------------------------
Index: ftf_vote_01/srcJava/org/omg/dds/core/status/OfferedIncompatibleQosStatus.java
===================================================================
--- ftf_vote_01/srcJava/org/omg/dds/core/status/OfferedIncompatibleQosStatus.java	(revision 140)
+++ ftf_vote_01/srcJava/org/omg/dds/core/status/OfferedIncompatibleQosStatus.java	(working copy)
@@ -31,17 +31,16 @@
 /**
  * A {@link QosPolicy} value was incompatible with what was requested.
  *
- * @param <TYPE>    The data type of the source {@link DataWriter}.
- * 
+ * @see OfferedIncompatibleQosEvent
  * @see RequestedIncompatibleQosStatus
  */
-public abstract class OfferedIncompatibleQosStatus<TYPE>
-extends Status<OfferedIncompatibleQosStatus<TYPE>, DataWriter<TYPE>> {
+public abstract class OfferedIncompatibleQosStatus
+extends Status<OfferedIncompatibleQosStatus> {
     // -----------------------------------------------------------------------
     // Constants
     // -----------------------------------------------------------------------
 
-    private static final long serialVersionUID = 8389878229396890980L;
+    private static final long serialVersionUID = 2435270267101388501L;
 
 
 
@@ -53,20 +52,13 @@
      * @param bootstrap Identifies the Service instance to which the new
      *                  object will belong.
      */
-    public static <TYPE> OfferedIncompatibleQosStatus<TYPE>
+    public static OfferedIncompatibleQosStatus
     newOfferedIncompatibleQosStatus(Bootstrap bootstrap) {
         return bootstrap.getSPI().newOfferedIncompatibleQosStatus();
     }
 
 
-    // -----------------------------------------------------------------------
 
-    protected OfferedIncompatibleQosStatus(DataWriter<TYPE> source) {
-        super(source);
-    }
-
-
-
     // -----------------------------------------------------------------------
     // Methods
     // -----------------------------------------------------------------------
Index: ftf_vote_01/srcJava/org/omg/dds/core/status/SampleRejectedStatus.java
===================================================================
--- ftf_vote_01/srcJava/org/omg/dds/core/status/SampleRejectedStatus.java	(revision 140)
+++ ftf_vote_01/srcJava/org/omg/dds/core/status/SampleRejectedStatus.java	(working copy)
@@ -26,15 +26,15 @@
 /**
  * A (received) sample has been rejected.
  * 
- * @param <TYPE>    The data type of the source {@link DataReader}.
+ * @see SampleRejectedEvent
  */
-public abstract class SampleRejectedStatus<TYPE>
-extends Status<SampleRejectedStatus<TYPE>, DataReader<TYPE>> {
+public abstract class SampleRejectedStatus
+extends Status<SampleRejectedStatus> {
     // -----------------------------------------------------------------------
     // Constants
     // -----------------------------------------------------------------------
 
-    private static final long serialVersionUID = -3473343064305797468L;
+    private static final long serialVersionUID = -612709680820262641L;
 
 
 
@@ -46,20 +46,14 @@
      * @param bootstrap Identifies the Service instance to which the new
      *                  object will belong.
      */
-    public static <TYPE> SampleRejectedStatus<TYPE>
-    newSampleRejectedStatus(Bootstrap bootstrap) {
+    public static SampleRejectedStatus newSampleRejectedStatus(
+            Bootstrap bootstrap)
+    {
         return bootstrap.getSPI().newSampleRejectedStatus();
     }
 
 
-    // -----------------------------------------------------------------------
 
-    protected SampleRejectedStatus(DataReader<TYPE> source) {
-        super(source);
-    }
-
-
-
     // -----------------------------------------------------------------------
     // Methods
     // -----------------------------------------------------------------------
Index: ftf_vote_01/srcJava/org/omg/dds/core/status/LivelinessChangedStatus.java
===================================================================
--- ftf_vote_01/srcJava/org/omg/dds/core/status/LivelinessChangedStatus.java	(revision 140)
+++ ftf_vote_01/srcJava/org/omg/dds/core/status/LivelinessChangedStatus.java	(working copy)
@@ -30,17 +30,16 @@
  * instances read through the {@link DataReader} has changed. Some
  * DataWriter(s) have become "active" or "inactive."
  *
- * @param <TYPE>    The data type of the source {@link DataReader}.
- * 
+ * @see LivelinessChangedEvent
  * @see LivelinessLostStatus
  */
-public abstract class LivelinessChangedStatus<TYPE>
-extends Status<LivelinessChangedStatus<TYPE>, DataReader<TYPE>> {
+public abstract class LivelinessChangedStatus
+extends Status<LivelinessChangedStatus> {
     // -----------------------------------------------------------------------
     // Constants
     // -----------------------------------------------------------------------
 
-    private static final long serialVersionUID = -6569834894650163848L;
+    private static final long serialVersionUID = -8771335633962700621L;
 
 
 
@@ -52,20 +51,14 @@
      * @param bootstrap Identifies the Service instance to which the new
      *                  object will belong.
      */
-    public static <TYPE> LivelinessChangedStatus<TYPE>
-    newLivelinessChangedStatus(Bootstrap bootstrap) {
+    public static LivelinessChangedStatus newLivelinessChangedStatus(
+            Bootstrap bootstrap)
+    {
         return bootstrap.getSPI().newLivelinessChangedStatus();
     }
 
 
-    // -----------------------------------------------------------------------
 
-    protected LivelinessChangedStatus(DataReader<TYPE> source) {
-        super(source);
-    }
-
-
-
     // -----------------------------------------------------------------------
     // Methods
     // -----------------------------------------------------------------------
Index: ftf_vote_01/srcJava/org/omg/dds/core/Entity.java
===================================================================
--- ftf_vote_01/srcJava/org/omg/dds/core/Entity.java	(revision 141)
+++ ftf_vote_01/srcJava/org/omg/dds/core/Entity.java	(working copy)
@@ -94,7 +94,7 @@
      */
     public void setListener(
             LISTENER listener,
-            Collection<Class<? extends Status<?, ?>>> statuses);
+            Collection<Class<? extends Status<?>>> statuses);
 
     /**
      * This operation allows access to the existing set of QoS policies for
@@ -237,8 +237,8 @@
      * @return  the argument as a convenience in order to facilitate call
      *          chaining. 
      */
-    public Collection<Class<? extends Status<?, ?>>> getStatusChanges(
-            Collection<Class<? extends Status<?, ?>>> statuses);
+    public Collection<Class<? extends Status<?>>> getStatusChanges(
+            Collection<Class<? extends Status<?>>> statuses);
 
     /**
      * @return  the {@link InstanceHandle} that represents the Entity.
Index: ftf_vote_01/srcJava/org/omg/dds/core/Bootstrap.java
===================================================================
--- ftf_vote_01/srcJava/org/omg/dds/core/Bootstrap.java	(revision 144)
+++ ftf_vote_01/srcJava/org/omg/dds/core/Bootstrap.java	(working copy)
@@ -28,8 +28,6 @@
 import org.omg.dds.core.modifiable.ModifiableInstanceHandle;
 import org.omg.dds.core.modifiable.ModifiableTime;
 import org.omg.dds.core.policy.QosPolicy;
-import org.omg.dds.core.status.DataAvailableStatus;
-import org.omg.dds.core.status.DataOnReadersStatus;
 import org.omg.dds.core.status.InconsistentTopicStatus;
 import org.omg.dds.core.status.LivelinessChangedStatus;
 import org.omg.dds.core.status.LivelinessLostStatus;
@@ -431,48 +429,39 @@
 
         // --- Status: -------------------------------------------------------
 
-        public abstract Set<Class<? extends Status<?, ?>>> allStatusKinds();
+        public abstract Set<Class<? extends Status<?>>> allStatusKinds();
 
-        public abstract Set<Class<? extends Status<?, ?>>> noStatusKinds();
+        public abstract Set<Class<? extends Status<?>>> noStatusKinds();
 
-        public abstract <TYPE> LivelinessLostStatus<TYPE>
-        newLivelinessLostStatus();
+        public abstract LivelinessLostStatus newLivelinessLostStatus();
 
-        public abstract <TYPE> OfferedDeadlineMissedStatus<TYPE>
+        public abstract OfferedDeadlineMissedStatus
         newOfferedDeadlineMissedStatus();
 
-        public abstract <TYPE> OfferedIncompatibleQosStatus<TYPE>
+        public abstract OfferedIncompatibleQosStatus
         newOfferedIncompatibleQosStatus();
 
-        public abstract <TYPE> PublicationMatchedStatus<TYPE>
+        public abstract PublicationMatchedStatus
         newPublicationMatchedStatus();
 
-        public abstract <TYPE> LivelinessChangedStatus<TYPE>
-        newLivelinessChangedStatus();
+        public abstract LivelinessChangedStatus newLivelinessChangedStatus();
 
-        public abstract <TYPE> RequestedDeadlineMissedStatus<TYPE>
+        public abstract RequestedDeadlineMissedStatus
         newRequestedDeadlineMissedStatus();
 
-        public abstract <TYPE> RequestedIncompatibleQosStatus<TYPE>
+        public abstract RequestedIncompatibleQosStatus
         newRequestedIncompatibleQosStatus();
 
-        public abstract <TYPE> SampleLostStatus<TYPE> newSampleLostStatus();
+        public abstract SampleLostStatus newSampleLostStatus();
 
-        public abstract <TYPE> SampleRejectedStatus<TYPE>
-        newSampleRejectedStatus();
+        public abstract SampleRejectedStatus newSampleRejectedStatus();
 
-        public abstract <TYPE> SubscriptionMatchedStatus<TYPE>
+        public abstract SubscriptionMatchedStatus
         newSubscriptionMatchedStatus();
 
-        public abstract <TYPE> DataAvailableStatus<TYPE>
-        newDataAvailableStatus();
+        public abstract InconsistentTopicStatus newInconsistentTopicStatus();
 
-        public abstract DataOnReadersStatus newDataOnReadersStatus();
 
-        public abstract <TYPE> InconsistentTopicStatus<TYPE>
-        newInconsistentTopicStatus();
-
-
         // --- Sample & Instance Life Cycle: ---------------------------------
 
         public abstract Set<InstanceState> anyInstanceStateSet();
Index: ftf_vote_01/srcJava/org/omg/dds/core/StatusCondition.java
===================================================================
--- ftf_vote_01/srcJava/org/omg/dds/core/StatusCondition.java	(revision 145)
+++ ftf_vote_01/srcJava/org/omg/dds/core/StatusCondition.java	(working copy)
@@ -54,8 +54,8 @@
      * 
      * @see     #setEnabledStatuses(Collection)
      */
-    public Collection<Class<? extends Status<?, ?>>> getEnabledStatuses(
-            Collection<Class<? extends Status<?, ?>>> statuses);
+    public Collection<Class<? extends Status<?>>> getEnabledStatuses(
+            Collection<Class<? extends Status<?>>> statuses);
 
     /**
      * This operation defines the list of communication statuses that are
@@ -77,7 +77,7 @@
      * @see     #getEnabledStatuses(Collection)
      */
     public void setEnabledStatuses(
-            Collection<Class<? extends Status<?, ?>>> statuses);
+            Collection<Class<? extends Status<?>>> statuses);
 
     /**
      * @return  the Entity associated with the StatusCondition. Note that
Index: ftf_vote_01/srcJava/org/omg/dds/sub/DataReaderListener.java
===================================================================
--- ftf_vote_01/srcJava/org/omg/dds/sub/DataReaderListener.java	(revision 140)
+++ ftf_vote_01/srcJava/org/omg/dds/sub/DataReaderListener.java	(working copy)
@@ -21,13 +21,13 @@
 import java.util.EventListener;
 
 import org.omg.dds.core.Entity;
-import org.omg.dds.core.status.DataAvailableStatus;
-import org.omg.dds.core.status.LivelinessChangedStatus;
-import org.omg.dds.core.status.RequestedDeadlineMissedStatus;
-import org.omg.dds.core.status.RequestedIncompatibleQosStatus;
-import org.omg.dds.core.status.SampleLostStatus;
-import org.omg.dds.core.status.SampleRejectedStatus;
-import org.omg.dds.core.status.SubscriptionMatchedStatus;
+import org.omg.dds.core.status.DataAvailableEvent;
+import org.omg.dds.core.status.LivelinessChangedEvent;
+import org.omg.dds.core.status.RequestedDeadlineMissedEvent;
+import org.omg.dds.core.status.RequestedIncompatibleQosEvent;
+import org.omg.dds.core.status.SampleLostEvent;
+import org.omg.dds.core.status.SampleRejectedEvent;
+import org.omg.dds.core.status.SubscriptionMatchedEvent;
 import org.omg.dds.pub.DataWriter;
 
 
@@ -47,18 +47,18 @@
  */
 public interface DataReaderListener<TYPE> extends EventListener {
     public void onRequestedDeadlineMissed(
-            RequestedDeadlineMissedStatus<TYPE> status);
+            RequestedDeadlineMissedEvent<TYPE> status);
 
     public void onRequestedIncompatibleQos(
-            RequestedIncompatibleQosStatus<TYPE> status);
+            RequestedIncompatibleQosEvent<TYPE> status);
 
-    public void onSampleRejected(SampleRejectedStatus<TYPE> status);
+    public void onSampleRejected(SampleRejectedEvent<TYPE> status);
 
-    public void onLivelinessChanged(LivelinessChangedStatus<TYPE> status);
+    public void onLivelinessChanged(LivelinessChangedEvent<TYPE> status);
 
-    public void onDataAvailable(DataAvailableStatus<TYPE> status);
+    public void onDataAvailable(DataAvailableEvent<TYPE> status);
 
-    public void onSubscriptionMatched(SubscriptionMatchedStatus<TYPE> status);
+    public void onSubscriptionMatched(SubscriptionMatchedEvent<TYPE> status);
 
-    public void onSampleLost(SampleLostStatus<TYPE> status);
+    public void onSampleLost(SampleLostEvent<TYPE> status);
 }
Index: ftf_vote_01/srcJava/org/omg/dds/sub/Subscriber.java
===================================================================
--- ftf_vote_01/srcJava/org/omg/dds/sub/Subscriber.java	(revision 140)
+++ ftf_vote_01/srcJava/org/omg/dds/sub/Subscriber.java	(working copy)
@@ -27,7 +27,6 @@
 import org.omg.dds.core.NotEnabledException;
 import org.omg.dds.core.PreconditionNotMetException;
 import org.omg.dds.core.policy.PresentationQosPolicy;
-import org.omg.dds.core.status.DataAvailableStatus;
 import org.omg.dds.core.status.Status;
 import org.omg.dds.domain.DomainParticipant;
 import org.omg.dds.topic.Topic;
@@ -128,7 +127,7 @@
             TopicDescription<TYPE> topic,
             DataReaderQos qos,
             DataReaderListener<TYPE> listener,
-            Collection<Class<? extends Status<?, ?>>> statuses);
+            Collection<Class<? extends Status<?>>> statuses);
 
     /**
      * Create a new data reader.
@@ -144,7 +143,7 @@
             String qosLibraryName,
             String qosProfileName,
             DataReaderListener<TYPE> listener,
-            Collection<Class<? extends Status<?, ?>>> statuses);
+            Collection<Class<? extends Status<?>>> statuses);
 
 
     // --- Create DataReader of built-in bytes type: -------------------------
@@ -170,7 +169,7 @@
             TopicDescription<byte[]> topic,
             DataReaderQos qos,
             DataReaderListener<byte[]> listener,
-            Collection<Class<? extends Status<?, ?>>> statuses);
+            Collection<Class<? extends Status<?>>> statuses);
 
     /**
      * Create a new data reader for this built-in type.
@@ -186,7 +185,7 @@
             String qosLibraryName,
             String qosProfileName,
             DataReaderListener<byte[]> listener,
-            Collection<Class<? extends Status<?, ?>>> statuses);
+            Collection<Class<? extends Status<?>>> statuses);
 
 
     // --- Create DataReader of built-in KeyedBytes type: --------------------
@@ -212,7 +211,7 @@
             TopicDescription<KeyedBytes> topic,
             DataReaderQos qos,
             DataReaderListener<KeyedBytes> listener,
-            Collection<Class<? extends Status<?, ?>>> statuses);
+            Collection<Class<? extends Status<?>>> statuses);
 
     /**
      * Create a new data reader for this built-in type.
@@ -228,7 +227,7 @@
             String qosLibraryName,
             String qosProfileName,
             DataReaderListener<KeyedBytes> listener,
-            Collection<Class<? extends Status<?, ?>>> statuses);
+            Collection<Class<? extends Status<?>>> statuses);
 
 
     // --- Create DataReader of built-in string type: ------------------------
@@ -254,7 +253,7 @@
             TopicDescription<String> topic,
             DataReaderQos qos,
             DataReaderListener<String> listener,
-            Collection<Class<? extends Status<?, ?>>> statuses);
+            Collection<Class<? extends Status<?>>> statuses);
 
     /**
      * Create a new data reader for this built-in type.
@@ -270,7 +269,7 @@
             String qosLibraryName,
             String qosProfileName,
             DataReaderListener<String> listener,
-            Collection<Class<? extends Status<?, ?>>> statuses);
+            Collection<Class<? extends Status<?>>> statuses);
 
 
     // --- Create DataReader of built-in KeyedString type: -------------------
@@ -296,7 +295,7 @@
             TopicDescription<KeyedString> topic,
             DataReaderQos qos,
             DataReaderListener<KeyedString> listener,
-            Collection<Class<? extends Status<?, ?>>> statuses);
+            Collection<Class<? extends Status<?>>> statuses);
 
     /**
      * Create a new data reader for this built-in type.
@@ -312,7 +311,7 @@
             String qosLibraryName,
             String qosProfileName,
             DataReaderListener<KeyedString> listener,
-            Collection<Class<? extends Status<?, ?>>> statuses);
+            Collection<Class<? extends Status<?>>> statuses);
 
 
     // --- Lookup operations: ------------------------------------------------
@@ -516,13 +515,13 @@
 
     /**
      * This operation invokes the operation
-     * {@link DataReaderListener#onDataAvailable(org.omg.dds.core.status.DataAvailableStatus)}
+     * {@link DataReaderListener#onDataAvailable(org.omg.dds.core.status.DataAvailableEvent)}
      * on the DataReaderListener objects attached to contained DataReader
      * entities with a {@link DataAvailableStatus} that is considered
      * changed.
      * 
      * This operation is typically invoked from
-     * {@link SubscriberListener#onDataOnReaders(org.omg.dds.core.status.DataOnReadersStatus)}.
+     * {@link SubscriberListener#onDataOnReaders(org.omg.dds.core.status.DataOnReadersEvent)}.
      * That way the SubscriberListener can delegate to the DataReaderListener
      * objects the handling of the data.
      */
Index: ftf_vote_01/srcJava/org/omg/dds/sub/SubscriberAdapter.java
===================================================================
--- ftf_vote_01/srcJava/org/omg/dds/sub/SubscriberAdapter.java	(revision 140)
+++ ftf_vote_01/srcJava/org/omg/dds/sub/SubscriberAdapter.java	(working copy)
@@ -18,56 +18,56 @@
 
 package org.omg.dds.sub;
 
-import org.omg.dds.core.status.DataAvailableStatus;
-import org.omg.dds.core.status.DataOnReadersStatus;
-import org.omg.dds.core.status.LivelinessChangedStatus;
-import org.omg.dds.core.status.RequestedDeadlineMissedStatus;
-import org.omg.dds.core.status.RequestedIncompatibleQosStatus;
-import org.omg.dds.core.status.SampleLostStatus;
-import org.omg.dds.core.status.SampleRejectedStatus;
-import org.omg.dds.core.status.SubscriptionMatchedStatus;
+import org.omg.dds.core.status.DataAvailableEvent;
+import org.omg.dds.core.status.DataOnReadersEvent;
+import org.omg.dds.core.status.LivelinessChangedEvent;
+import org.omg.dds.core.status.RequestedDeadlineMissedEvent;
+import org.omg.dds.core.status.RequestedIncompatibleQosEvent;
+import org.omg.dds.core.status.SampleLostEvent;
+import org.omg.dds.core.status.SampleRejectedEvent;
+import org.omg.dds.core.status.SubscriptionMatchedEvent;
 
 
 public class SubscriberAdapter implements SubscriberListener
 {
-    public void onDataAvailable(DataAvailableStatus<?> status)
+    public void onDataAvailable(DataAvailableEvent<?> status)
     {
         // empty
     }
 
-    public void onLivelinessChanged(LivelinessChangedStatus<?> status)
+    public void onLivelinessChanged(LivelinessChangedEvent<?> status)
     {
         // empty
     }
 
     public void onRequestedDeadlineMissed(
-            RequestedDeadlineMissedStatus<?> status)
+            RequestedDeadlineMissedEvent<?> status)
     {
         // empty
     }
 
     public void onRequestedIncompatibleQos(
-            RequestedIncompatibleQosStatus<?> status)
+            RequestedIncompatibleQosEvent<?> status)
     {
         // empty
     }
 
-    public void onSampleLost(SampleLostStatus<?> status)
+    public void onSampleLost(SampleLostEvent<?> status)
     {
         // empty
     }
 
-    public void onSampleRejected(SampleRejectedStatus<?> status)
+    public void onSampleRejected(SampleRejectedEvent<?> status)
     {
         // empty
     }
 
-    public void onSubscriptionMatched(SubscriptionMatchedStatus<?> status)
+    public void onSubscriptionMatched(SubscriptionMatchedEvent<?> status)
     {
         // empty
     }
 
-    public void onDataOnReaders(DataOnReadersStatus status)
+    public void onDataOnReaders(DataOnReadersEvent status)
     {
         // empty
     }
Index: ftf_vote_01/srcJava/org/omg/dds/sub/SubscriberListener.java
===================================================================
--- ftf_vote_01/srcJava/org/omg/dds/sub/SubscriberListener.java	(revision 140)
+++ ftf_vote_01/srcJava/org/omg/dds/sub/SubscriberListener.java	(working copy)
@@ -21,14 +21,14 @@
 import java.util.EventListener;
 
 import org.omg.dds.core.Entity;
-import org.omg.dds.core.status.DataAvailableStatus;
-import org.omg.dds.core.status.DataOnReadersStatus;
-import org.omg.dds.core.status.LivelinessChangedStatus;
-import org.omg.dds.core.status.RequestedDeadlineMissedStatus;
-import org.omg.dds.core.status.RequestedIncompatibleQosStatus;
-import org.omg.dds.core.status.SampleLostStatus;
-import org.omg.dds.core.status.SampleRejectedStatus;
-import org.omg.dds.core.status.SubscriptionMatchedStatus;
+import org.omg.dds.core.status.DataAvailableEvent;
+import org.omg.dds.core.status.DataOnReadersEvent;
+import org.omg.dds.core.status.LivelinessChangedEvent;
+import org.omg.dds.core.status.RequestedDeadlineMissedEvent;
+import org.omg.dds.core.status.RequestedIncompatibleQosEvent;
+import org.omg.dds.core.status.SampleLostEvent;
+import org.omg.dds.core.status.SampleRejectedEvent;
+import org.omg.dds.core.status.SubscriptionMatchedEvent;
 
 
 /**
@@ -38,20 +38,20 @@
  */
 public interface SubscriberListener extends EventListener {
     public void onRequestedDeadlineMissed(
-            RequestedDeadlineMissedStatus<?> status);
+            RequestedDeadlineMissedEvent<?> status);
 
     public void onRequestedIncompatibleQos(
-            RequestedIncompatibleQosStatus<?> status);
+            RequestedIncompatibleQosEvent<?> status);
 
-    public void onSampleRejected(SampleRejectedStatus<?> status);
+    public void onSampleRejected(SampleRejectedEvent<?> status);
 
-    public void onLivelinessChanged(LivelinessChangedStatus<?> status);
+    public void onLivelinessChanged(LivelinessChangedEvent<?> status);
 
-    public void onDataAvailable(DataAvailableStatus<?> status);
+    public void onDataAvailable(DataAvailableEvent<?> status);
 
-    public void onSubscriptionMatched(SubscriptionMatchedStatus<?> status);
+    public void onSubscriptionMatched(SubscriptionMatchedEvent<?> status);
 
-    public void onSampleLost(SampleLostStatus<?> status);
+    public void onSampleLost(SampleLostEvent<?> status);
 
-    public void onDataOnReaders(DataOnReadersStatus status);
+    public void onDataOnReaders(DataOnReadersEvent status);
 }
Index: ftf_vote_01/srcJava/org/omg/dds/sub/DataReader.java
===================================================================
--- ftf_vote_01/srcJava/org/omg/dds/sub/DataReader.java	(revision 147)
+++ ftf_vote_01/srcJava/org/omg/dds/sub/DataReader.java	(working copy)
@@ -187,8 +187,8 @@
      * 
      * @see     org.omg.dds.core.status
      */
-    public SampleRejectedStatus<TYPE> getSampleRejectedStatus(
-            SampleRejectedStatus<TYPE> status);
+    public SampleRejectedStatus getSampleRejectedStatus(
+            SampleRejectedStatus status);
 
     /**
      * This operation allows access to the LIVELINESS_CHANGED communication
@@ -199,8 +199,8 @@
      * 
      * @see     org.omg.dds.core.status
      */
-    public LivelinessChangedStatus<TYPE> getLivelinessChangedStatus(
-            LivelinessChangedStatus<TYPE> status);
+    public LivelinessChangedStatus getLivelinessChangedStatus(
+            LivelinessChangedStatus status);
 
     /**
      * This operation allows access to the REQUESTED_DEADLINE_MISSED
@@ -211,9 +211,8 @@
      * 
      * @see     org.omg.dds.core.status
      */
-    public RequestedDeadlineMissedStatus<TYPE>
-    getRequestedDeadlineMissedStatus(
-            RequestedDeadlineMissedStatus<TYPE> status);
+    public RequestedDeadlineMissedStatus getRequestedDeadlineMissedStatus(
+            RequestedDeadlineMissedStatus status);
 
     /**
      * This operation allows access to the REQUESTED_INCOMPATIBLE_QOS
@@ -224,9 +223,8 @@
      * 
      * @see     org.omg.dds.core.status
      */
-    public RequestedIncompatibleQosStatus<TYPE>
-    getRequestedIncompatibleQosStatus(
-            RequestedIncompatibleQosStatus<TYPE> status);
+    public RequestedIncompatibleQosStatus getRequestedIncompatibleQosStatus(
+            RequestedIncompatibleQosStatus status);
 
     /**
      * This operation allows access to the SUBSCRIPTION_MATCHED communication
@@ -237,8 +235,8 @@
      * 
      * @see     org.omg.dds.core.status
      */
-    public SubscriptionMatchedStatus<TYPE> getSubscriptionMatchedStatus(
-            SubscriptionMatchedStatus<TYPE> status);
+    public SubscriptionMatchedStatus getSubscriptionMatchedStatus(
+            SubscriptionMatchedStatus status);
 
     /**
      * This operation allows access to the SAMPLE_LOST communication status.
@@ -249,8 +247,8 @@
      * 
      * @see     org.omg.dds.core.status
      */
-    public SampleLostStatus<TYPE> getSampleLostStatus(
-            SampleLostStatus<TYPE> status);
+    public SampleLostStatus getSampleLostStatus(
+            SampleLostStatus status);
 
     /**
      * This operation is intended only for DataReader entities for which
Index: ftf_vote_01/srcJava/org/omg/dds/sub/DataReaderAdapter.java
===================================================================
--- ftf_vote_01/srcJava/org/omg/dds/sub/DataReaderAdapter.java	(revision 140)
+++ ftf_vote_01/srcJava/org/omg/dds/sub/DataReaderAdapter.java	(working copy)
@@ -18,50 +18,50 @@
 
 package org.omg.dds.sub;
 
-import org.omg.dds.core.status.DataAvailableStatus;
-import org.omg.dds.core.status.LivelinessChangedStatus;
-import org.omg.dds.core.status.RequestedDeadlineMissedStatus;
-import org.omg.dds.core.status.RequestedIncompatibleQosStatus;
-import org.omg.dds.core.status.SampleLostStatus;
-import org.omg.dds.core.status.SampleRejectedStatus;
-import org.omg.dds.core.status.SubscriptionMatchedStatus;
+import org.omg.dds.core.status.DataAvailableEvent;
+import org.omg.dds.core.status.LivelinessChangedEvent;
+import org.omg.dds.core.status.RequestedDeadlineMissedEvent;
+import org.omg.dds.core.status.RequestedIncompatibleQosEvent;
+import org.omg.dds.core.status.SampleLostEvent;
+import org.omg.dds.core.status.SampleRejectedEvent;
+import org.omg.dds.core.status.SubscriptionMatchedEvent;
 
 
 public class DataReaderAdapter<TYPE> implements DataReaderListener<TYPE>
 {
-    public void onDataAvailable(DataAvailableStatus<TYPE> status)
+    public void onDataAvailable(DataAvailableEvent<TYPE> status)
     {
         // empty
     }
 
-    public void onLivelinessChanged(LivelinessChangedStatus<TYPE> status)
+    public void onLivelinessChanged(LivelinessChangedEvent<TYPE> status)
     {
         // empty
     }
 
     public void onRequestedDeadlineMissed(
-            RequestedDeadlineMissedStatus<TYPE> status)
+            RequestedDeadlineMissedEvent<TYPE> status)
     {
         // empty
     }
 
     public void onRequestedIncompatibleQos(
-            RequestedIncompatibleQosStatus<TYPE> status)
+            RequestedIncompatibleQosEvent<TYPE> status)
     {
         // empty
     }
 
-    public void onSampleLost(SampleLostStatus<TYPE> status)
+    public void onSampleLost(SampleLostEvent<TYPE> status)
     {
         // empty
     }
 
-    public void onSampleRejected(SampleRejectedStatus<TYPE> status)
+    public void onSampleRejected(SampleRejectedEvent<TYPE> status)
     {
         // empty
     }
 
-    public void onSubscriptionMatched(SubscriptionMatchedStatus<TYPE> status)
+    public void onSubscriptionMatched(SubscriptionMatchedEvent<TYPE> status)
     {
         // empty
     }
Index: ftf_vote_01/srcJava/org/omg/dds/topic/TopicAdapter.java
===================================================================
--- ftf_vote_01/srcJava/org/omg/dds/topic/TopicAdapter.java	(revision 140)
+++ ftf_vote_01/srcJava/org/omg/dds/topic/TopicAdapter.java	(working copy)
@@ -18,12 +18,12 @@
 
 package org.omg.dds.topic;
 
-import org.omg.dds.core.status.InconsistentTopicStatus;
+import org.omg.dds.core.status.InconsistentTopicEvent;
 
 
 public class TopicAdapter<TYPE> implements TopicListener<TYPE> {
     public void onInconsistentTopic(
-            InconsistentTopicStatus<TYPE> status)
+            InconsistentTopicEvent<TYPE> status)
     {
         // empty
     }
Index: ftf_vote_01/srcJava/org/omg/dds/topic/TopicListener.java
===================================================================
--- ftf_vote_01/srcJava/org/omg/dds/topic/TopicListener.java	(revision 140)
+++ ftf_vote_01/srcJava/org/omg/dds/topic/TopicListener.java	(working copy)
@@ -21,7 +21,7 @@
 import java.util.EventListener;
 
 import org.omg.dds.core.Entity;
-import org.omg.dds.core.status.InconsistentTopicStatus;
+import org.omg.dds.core.status.InconsistentTopicEvent;
 
 
 /**
@@ -33,6 +33,5 @@
  *                  by the readers and writers that use to topic.
  */
 public interface TopicListener<TYPE> extends EventListener {
-    public void onInconsistentTopic(
-            InconsistentTopicStatus<TYPE> status);
+    public void onInconsistentTopic(InconsistentTopicEvent<TYPE> status);
 }
Index: ftf_vote_01/srcJava/org/omg/dds/topic/Topic.java
===================================================================
--- ftf_vote_01/srcJava/org/omg/dds/topic/Topic.java	(revision 140)
+++ ftf_vote_01/srcJava/org/omg/dds/topic/Topic.java	(working copy)
@@ -63,6 +63,6 @@
      * @see     TopicListener
      * @see     StatusCondition
      */
-    public InconsistentTopicStatus<TYPE> getInconsistentTopicStatus(
-            InconsistentTopicStatus<TYPE> status);
+    public InconsistentTopicStatus getInconsistentTopicStatus(
+            InconsistentTopicStatus status);
 }
