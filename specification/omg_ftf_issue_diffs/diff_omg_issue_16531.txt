
Property changes on: .
___________________________________________________________________
Modified: svn:mergeinfo
   Merged /trunk:r139,151


Property changes on: specification
___________________________________________________________________
Modified: svn:mergeinfo
   Merged /trunk/specification:r139,151

Index: srcJavaExample/org/omg/example/dds/helloworld/GreetingSubscribingApp.java
===================================================================
--- srcJavaExample/org/omg/example/dds/helloworld/GreetingSubscribingApp.java	(revision 165)
+++ srcJavaExample/org/omg/example/dds/helloworld/GreetingSubscribingApp.java	(working copy)
@@ -21,8 +21,8 @@
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.TimeoutException;
 
-import org.omg.dds.core.Bootstrap;
 import org.omg.dds.core.InstanceHandle;
+import org.omg.dds.core.ServiceEnvironment;
 import org.omg.dds.core.status.DataAvailableEvent;
 import org.omg.dds.domain.DomainParticipant;
 import org.omg.dds.domain.DomainParticipantFactory;
@@ -36,8 +36,10 @@
 
 public class GreetingSubscribingApp {
     public static void main(String[] args) {
+        ServiceEnvironment env = ServiceEnvironment.createInstance(
+                GreetingSubscribingApp.class.getClassLoader());
         DomainParticipantFactory factory =
-            DomainParticipantFactory.getInstance(Bootstrap.createInstance());
+                DomainParticipantFactory.getInstance(env);
         DomainParticipant dp = factory.createParticipant();
 
         // Implicitly create TypeSupport and register type:
@@ -91,9 +93,10 @@
                     Sample<Greeting> smp = it.next();
                     // SampleInfo stuff is built into Sample:
                     InstanceHandle inst = smp.getInstanceHandle();
+                    System.out.println("Instance: " + inst);
                     // Data accessible from Sample; null if invalid:
                     Greeting dt = smp.getData();
-                    // ...
+                    System.out.println("Data: " + dt);
                 }
             } finally {
                 it.returnLoan();
Index: srcJavaExample/org/omg/example/dds/helloworld/GreetingPublishingApp.java
===================================================================
--- srcJavaExample/org/omg/example/dds/helloworld/GreetingPublishingApp.java	(revision 165)
+++ srcJavaExample/org/omg/example/dds/helloworld/GreetingPublishingApp.java	(working copy)
@@ -20,7 +20,7 @@
 
 import java.util.concurrent.TimeoutException;
 
-import org.omg.dds.core.Bootstrap;
+import org.omg.dds.core.ServiceEnvironment;
 import org.omg.dds.domain.DomainParticipant;
 import org.omg.dds.domain.DomainParticipantFactory;
 import org.omg.dds.pub.DataWriter;
@@ -31,15 +31,16 @@
 
 public class GreetingPublishingApp {
     public static void main(String[] args) {
-        Bootstrap bstp = Bootstrap.createInstance();
+        ServiceEnvironment env = ServiceEnvironment.createInstance(
+                GreetingPublishingApp.class.getClassLoader());
         DomainParticipantFactory factory =
-            DomainParticipantFactory.getInstance(bstp);
+                DomainParticipantFactory.getInstance(env);
         DomainParticipant dp = factory.createParticipant();
 
         // Implicitly register type:
         TypeSupport<Greeting> greetingType = TypeSupport.newTypeSupport(
                 Greeting.class,
-                bstp);
+                env);
         Topic<Greeting> tp = dp.createTopic("My Topic", greetingType);
 
         Publisher pub = dp.createPublisher();
Index: srcJavaExample/org/omg/example/dds/helloworld/QosExample.java
===================================================================
--- srcJavaExample/org/omg/example/dds/helloworld/QosExample.java	(revision 165)
+++ srcJavaExample/org/omg/example/dds/helloworld/QosExample.java	(working copy)
@@ -18,7 +18,7 @@
 
 package org.omg.example.dds.helloworld;
 
-import org.omg.dds.core.Bootstrap;
+import org.omg.dds.core.ServiceEnvironment;
 import org.omg.dds.core.policy.EntityFactoryQosPolicy;
 import org.omg.dds.core.policy.modifiable.ModifiableEntityFactoryQosPolicy;
 import org.omg.dds.domain.DomainParticipant;
@@ -29,8 +29,10 @@
 
 public final class QosExample {
     public static void main(String[] args) {
+        ServiceEnvironment env = ServiceEnvironment.createInstance(
+                QosExample.class.getClassLoader());
         DomainParticipantFactory factory =
-            DomainParticipantFactory.getInstance(Bootstrap.createInstance());
+                DomainParticipantFactory.getInstance(env);
         DomainParticipant dp = factory.createParticipant();
 
         // Get unmodifiable QoS for inspection:
Index: srcJava/org/omg/dds/type/dynamic/DynamicTypeFactory.java
===================================================================
--- srcJava/org/omg/dds/type/dynamic/DynamicTypeFactory.java	(revision 165)
+++ srcJava/org/omg/dds/type/dynamic/DynamicTypeFactory.java	(working copy)
@@ -18,7 +18,7 @@
 
 package org.omg.dds.type.dynamic;
 
-import org.omg.dds.core.Bootstrap;
+import org.omg.dds.core.ServiceEnvironment;
 import org.omg.dds.core.DDSObject;
 import org.omg.dds.type.TypeKind;
 
@@ -30,11 +30,12 @@
     // -----------------------------------------------------------------------
 
     /**
-     * @param bootstrap Identifies the Service instance to which the
+     * @param env       Identifies the Service instance to which the
      *                  object will belong.
      */
-    public static DynamicTypeFactory getInstance(Bootstrap bootstrap) {
-        return bootstrap.getSPI().getTypeFactory();
+    public static DynamicTypeFactory getInstance(ServiceEnvironment env)
+    {
+        return env.getSPI().getTypeFactory();
     }
 
 
Index: srcJava/org/omg/dds/type/TypeSupport.java
===================================================================
--- srcJava/org/omg/dds/type/TypeSupport.java	(revision 165)
+++ srcJava/org/omg/dds/type/TypeSupport.java	(working copy)
@@ -18,7 +18,7 @@
 
 package org.omg.dds.type;
 
-import org.omg.dds.core.Bootstrap;
+import org.omg.dds.core.ServiceEnvironment;
 import org.omg.dds.core.DDSObject;
 
 
@@ -44,11 +44,13 @@
      * 
      * <code>newTypeSupport(type, type.getClass().getName(), bootstrap)</code>
      * 
-     * @see #newTypeSupport(Class, String, Bootstrap)
+     * @see #newTypeSupport(Class, String, ServiceEnvironment)
      */
     public static <TYPE> TypeSupport<TYPE> newTypeSupport(
-            Class<TYPE> type, Bootstrap bootstrap) {
-        return newTypeSupport(type, type.getClass().getName(), bootstrap);
+            Class<TYPE> type,
+            ServiceEnvironment env)
+    {
+        return newTypeSupport(type, type.getClass().getName(), env);
     }
 
 
@@ -70,18 +72,21 @@
      *                          {@link org.omg.dds.domain.DomainParticipant}
      *                          with which the resulting
      *                          <code>TypeSupport</code> is used.
-     * @param bootstrap Identifies the Service instance to which the new
+     * @param env       Identifies the Service instance to which the new
      *                  object will belong.
      * 
      * @return          A new <code>TypeSupport</code> object, which can
      *                  subsequently be used to create one or more
      *                  {@link org.omg.dds.topic.Topic}s.
      * 
-     * @see #newTypeSupport(Class, Bootstrap)
+     * @see #newTypeSupport(Class, ServiceEnvironment)
      */
     public static <TYPE> TypeSupport<TYPE> newTypeSupport(
-            Class<TYPE> type, String registeredName, Bootstrap bootstrap) {
-        return bootstrap.getSPI().newTypeSupport(type, registeredName);
+            Class<TYPE> type,
+            String registeredName,
+            ServiceEnvironment env)
+    {
+        return env.getSPI().newTypeSupport(type, registeredName);
     }
 
 
Index: srcJava/org/omg/dds/pub/DataWriter.java
===================================================================
--- srcJava/org/omg/dds/pub/DataWriter.java	(revision 165)
+++ srcJava/org/omg/dds/pub/DataWriter.java	(working copy)
@@ -294,7 +294,7 @@
      * @see     #registerInstance(Object, long, TimeUnit)
      * @see     #unregisterInstance(InstanceHandle)
      * @see     #unregisterInstance(InstanceHandle, Object)
-     * @see     InstanceHandle#nilHandle(org.omg.dds.core.Bootstrap)
+     * @see     InstanceHandle#nilHandle(org.omg.dds.core.ServiceEnvironment)
      */
     public InstanceHandle registerInstance(
             TYPE instanceData) throws TimeoutException;
@@ -457,7 +457,7 @@
      * @see     #unregisterInstance(InstanceHandle, Object, Time)
      * @see     #unregisterInstance(InstanceHandle, Object, long, TimeUnit)
      * @see     #registerInstance(Object)
-     * @see     InstanceHandle#nilHandle(org.omg.dds.core.Bootstrap)
+     * @see     InstanceHandle#nilHandle(org.omg.dds.core.ServiceEnvironment)
      */
     public void unregisterInstance(
             InstanceHandle handle, 
@@ -666,7 +666,7 @@
      * @see     #write(Object)
      * @see     #write(Object, InstanceHandle, Time)
      * @see     #write(Object, InstanceHandle, long, TimeUnit)
-     * @see     InstanceHandle#nilHandle(org.omg.dds.core.Bootstrap)
+     * @see     InstanceHandle#nilHandle(org.omg.dds.core.ServiceEnvironment)
      */
     public void write(
             TYPE instanceData, 
Index: srcJava/org/omg/dds/domain/DomainParticipantFactory.java
===================================================================
--- srcJava/org/omg/dds/domain/DomainParticipantFactory.java	(revision 165)
+++ srcJava/org/omg/dds/domain/DomainParticipantFactory.java	(working copy)
@@ -20,7 +20,7 @@
 
 import java.util.Collection;
 
-import org.omg.dds.core.Bootstrap;
+import org.omg.dds.core.ServiceEnvironment;
 import org.omg.dds.core.DDSObject;
 import org.omg.dds.core.Entity;
 import org.omg.dds.core.InconsistentPolicyException;
@@ -30,9 +30,9 @@
 /**
  * The sole purpose of this class is to allow the creation and destruction of
  * {@link DomainParticipant} objects. DomainParticipantFactory itself has no
- * factory. It is a pre-existing per-{@link Bootstrap} singleton object that
- * can be accessed by means of the {@link #getInstance(Bootstrap)} operation
- * on the DomainParticipantFactory.
+ * factory. It is a pre-existing per-{@link ServiceEnvironment} singleton
+ * object that can be accessed by means of the
+ * {@link #getInstance(ServiceEnvironment)} operation.
  */
 public abstract class DomainParticipantFactory implements DDSObject
 {
@@ -41,20 +41,18 @@
     // -----------------------------------------------------------------------
 
     /**
-     * This operation returns the per-Bootstrap DomainParticipantFactory
-     * singleton. The operation is idempotent, that is, it can be called
-     * multiple times without side effects, and each time it will return a
-     * DomainParticipantFactory instance that is equal to the previous
-     * results.
+     * This operation returns the per-ServiceEnvironment
+     * DomainParticipantFactory singleton. The operation is idempotent, that
+     * is, it can be called multiple times without side effects, and each
+     * time it will return a DomainParticipantFactory instance that is equal
+     * to the previous results.
      * 
-     * @param bootstrap Identifies the Service instance to which the
+     * @param env       Identifies the Service instance to which the
      *                  object will belong.
-     *
-     * @see     Bootstrap
-     * @see     Object#equals(Object)
      */
-    public static DomainParticipantFactory getInstance(Bootstrap bootstrap) {
-        return bootstrap.getSPI().getParticipantFactory();
+    public static DomainParticipantFactory getInstance(ServiceEnvironment env)
+    {
+        return env.getSPI().getParticipantFactory();
     }
 
 
Index: srcJava/org/omg/dds/core/DDSObject.java
===================================================================
--- srcJava/org/omg/dds/core/DDSObject.java	(revision 165)
+++ srcJava/org/omg/dds/core/DDSObject.java	(working copy)
@@ -24,8 +24,8 @@
  */
 public interface DDSObject {
     /**
-     * @return  the {@link Bootstrap} object that directly or indirectly
-     *          created this object.
+     * @return  the {@link ServiceEnvironment} object that directly or
+     *          indirectly was used to create this object.
      */
-    public Bootstrap getBootstrap();
+    public ServiceEnvironment getEnvironment();
 }
Index: srcJava/org/omg/dds/core/status/RequestedDeadlineMissedStatus.java
===================================================================
--- srcJava/org/omg/dds/core/status/RequestedDeadlineMissedStatus.java	(revision 165)
+++ srcJava/org/omg/dds/core/status/RequestedDeadlineMissedStatus.java	(working copy)
@@ -18,7 +18,7 @@
 
 package org.omg.dds.core.status;
 
-import org.omg.dds.core.Bootstrap;
+import org.omg.dds.core.ServiceEnvironment;
 import org.omg.dds.core.modifiable.ModifiableInstanceHandle;
 import org.omg.dds.core.policy.DeadlineQosPolicy;
 import org.omg.dds.sub.DataReader;
@@ -46,12 +46,13 @@
     // -----------------------------------------------------------------------
 
     /**
-     * @param bootstrap Identifies the Service instance to which the new
+     * @param env       Identifies the Service instance to which the new
      *                  object will belong.
      */
     public static RequestedDeadlineMissedStatus
-    newRequestedDeadlineMissedStatus(Bootstrap bootstrap) {
-        return bootstrap.getSPI().newRequestedDeadlineMissedStatus();
+    newRequestedDeadlineMissedStatus(ServiceEnvironment env)
+    {
+        return env.getSPI().newRequestedDeadlineMissedStatus();
     }
 
 
Index: srcJava/org/omg/dds/core/status/PublicationMatchedStatus.java
===================================================================
--- srcJava/org/omg/dds/core/status/PublicationMatchedStatus.java	(revision 165)
+++ srcJava/org/omg/dds/core/status/PublicationMatchedStatus.java	(working copy)
@@ -18,7 +18,7 @@
 
 package org.omg.dds.core.status;
 
-import org.omg.dds.core.Bootstrap;
+import org.omg.dds.core.ServiceEnvironment;
 import org.omg.dds.core.modifiable.ModifiableInstanceHandle;
 import org.omg.dds.pub.DataWriter;
 import org.omg.dds.sub.DataReader;
@@ -48,13 +48,13 @@
     // -----------------------------------------------------------------------
 
     /**
-     * @param bootstrap Identifies the Service instance to which the new
+     * @param env       Identifies the Service instance to which the new
      *                  object will belong.
      */
     public static PublicationMatchedStatus newPublicationMatchedStatus(
-            Bootstrap bootstrap)
+            ServiceEnvironment env)
     {
-        return bootstrap.getSPI().newPublicationMatchedStatus();
+        return env.getSPI().newPublicationMatchedStatus();
     }
 
 
Index: srcJava/org/omg/dds/core/status/OfferedDeadlineMissedStatus.java
===================================================================
--- srcJava/org/omg/dds/core/status/OfferedDeadlineMissedStatus.java	(revision 165)
+++ srcJava/org/omg/dds/core/status/OfferedDeadlineMissedStatus.java	(working copy)
@@ -18,7 +18,7 @@
 
 package org.omg.dds.core.status;
 
-import org.omg.dds.core.Bootstrap;
+import org.omg.dds.core.ServiceEnvironment;
 import org.omg.dds.core.modifiable.ModifiableInstanceHandle;
 import org.omg.dds.core.policy.DeadlineQosPolicy;
 import org.omg.dds.pub.DataWriter;
@@ -46,13 +46,13 @@
     // -----------------------------------------------------------------------
 
     /**
-     * @param bootstrap Identifies the Service instance to which the new
+     * @param env       Identifies the Service instance to which the new
      *                  object will belong.
      */
     public static OfferedDeadlineMissedStatus newOfferedDeadlineMissedStatus(
-            Bootstrap bootstrap)
+            ServiceEnvironment env)
     {
-        return bootstrap.getSPI().newOfferedDeadlineMissedStatus();
+        return env.getSPI().newOfferedDeadlineMissedStatus();
     }
 
 
Index: srcJava/org/omg/dds/core/status/SubscriptionMatchedStatus.java
===================================================================
--- srcJava/org/omg/dds/core/status/SubscriptionMatchedStatus.java	(revision 165)
+++ srcJava/org/omg/dds/core/status/SubscriptionMatchedStatus.java	(working copy)
@@ -18,7 +18,7 @@
 
 package org.omg.dds.core.status;
 
-import org.omg.dds.core.Bootstrap;
+import org.omg.dds.core.ServiceEnvironment;
 import org.omg.dds.core.modifiable.ModifiableInstanceHandle;
 import org.omg.dds.pub.DataWriter;
 import org.omg.dds.sub.DataReader;
@@ -48,13 +48,13 @@
     // -----------------------------------------------------------------------
 
     /**
-     * @param bootstrap Identifies the Service instance to which the new
+     * @param env       Identifies the Service instance to which the new
      *                  object will belong.
      */
     public static SubscriptionMatchedStatus newSubscriptionMatchedStatus(
-            Bootstrap bootstrap)
+            ServiceEnvironment env)
     {
-        return bootstrap.getSPI().newSubscriptionMatchedStatus();
+        return env.getSPI().newSubscriptionMatchedStatus();
     }
 
 
Index: srcJava/org/omg/dds/core/status/RequestedIncompatibleQosStatus.java
===================================================================
--- srcJava/org/omg/dds/core/status/RequestedIncompatibleQosStatus.java	(revision 165)
+++ srcJava/org/omg/dds/core/status/RequestedIncompatibleQosStatus.java	(working copy)
@@ -20,7 +20,7 @@
 
 import java.util.Set;
 
-import org.omg.dds.core.Bootstrap;
+import org.omg.dds.core.ServiceEnvironment;
 import org.omg.dds.core.policy.QosPolicy;
 import org.omg.dds.core.policy.QosPolicyCount;
 import org.omg.dds.pub.DataWriter;
@@ -49,12 +49,13 @@
     // -----------------------------------------------------------------------
 
     /**
-     * @param bootstrap Identifies the Service instance to which the new
+     * @param env       Identifies the Service instance to which the new
      *                  object will belong.
      */
     public static RequestedIncompatibleQosStatus
-    newRequestedIncompatibleQosStatus(Bootstrap bootstrap) {
-        return bootstrap.getSPI().newRequestedIncompatibleQosStatus();
+    newRequestedIncompatibleQosStatus(ServiceEnvironment env)
+    {
+        return env.getSPI().newRequestedIncompatibleQosStatus();
     }
 
 
Index: srcJava/org/omg/dds/core/status/InconsistentTopicStatus.java
===================================================================
--- srcJava/org/omg/dds/core/status/InconsistentTopicStatus.java	(revision 165)
+++ srcJava/org/omg/dds/core/status/InconsistentTopicStatus.java	(working copy)
@@ -18,7 +18,7 @@
 
 package org.omg.dds.core.status;
 
-import org.omg.dds.core.Bootstrap;
+import org.omg.dds.core.ServiceEnvironment;
 import org.omg.dds.topic.Topic;
 
 
@@ -42,13 +42,13 @@
     // -----------------------------------------------------------------------
 
     /**
-     * @param bootstrap Identifies the Service instance to which the new
+     * @param env       Identifies the Service instance to which the new
      *                  object will belong.
      */
     public static InconsistentTopicStatus newInconsistentTopicStatus(
-            Bootstrap bootstrap)
+            ServiceEnvironment env)
     {
-        return bootstrap.getSPI().newInconsistentTopicStatus();
+        return env.getSPI().newInconsistentTopicStatus();
     }
 
 
Index: srcJava/org/omg/dds/core/status/LivelinessLostStatus.java
===================================================================
--- srcJava/org/omg/dds/core/status/LivelinessLostStatus.java	(revision 165)
+++ srcJava/org/omg/dds/core/status/LivelinessLostStatus.java	(working copy)
@@ -18,7 +18,7 @@
 
 package org.omg.dds.core.status;
 
-import org.omg.dds.core.Bootstrap;
+import org.omg.dds.core.ServiceEnvironment;
 import org.omg.dds.core.policy.LivelinessQosPolicy;
 import org.omg.dds.pub.DataWriter;
 import org.omg.dds.sub.DataReader;
@@ -48,13 +48,13 @@
     // -----------------------------------------------------------------------
 
     /**
-     * @param bootstrap Identifies the Service instance to which the new
+     * @param env       Identifies the Service instance to which the new
      *                  object will belong.
      */
     public static LivelinessLostStatus newLivelinessLostStatus(
-            Bootstrap bootstrap)
+            ServiceEnvironment env)
     {
-        return bootstrap.getSPI().newLivelinessLostStatus();
+        return env.getSPI().newLivelinessLostStatus();
     }
 
 
Index: srcJava/org/omg/dds/core/status/Status.java
===================================================================
--- srcJava/org/omg/dds/core/status/Status.java	(revision 165)
+++ srcJava/org/omg/dds/core/status/Status.java	(working copy)
@@ -20,7 +20,7 @@
 
 import java.util.Set;
 
-import org.omg.dds.core.Bootstrap;
+import org.omg.dds.core.ServiceEnvironment;
 import org.omg.dds.core.Entity;
 import org.omg.dds.core.StatusCondition;
 import org.omg.dds.core.modifiable.ModifiableValue;
@@ -54,24 +54,24 @@
     // -----------------------------------------------------------------------
 
     /**
-     * @param bootstrap Identifies the Service instance to which the
+     * @param env       Identifies the Service instance to which the
      *                  object will belong.
      */
     public static Set<Class<? extends Status<?>>> allStatuses(
-            Bootstrap bootstrap)
+            ServiceEnvironment env)
     {
-        return bootstrap.getSPI().allStatusKinds();
+        return env.getSPI().allStatusKinds();
     }
 
 
     /**
-     * @param bootstrap Identifies the Service instance to which the
+     * @param env Identifies the Service instance to which the
      *                  object will belong.
      */
     public static Set<Class<? extends Status<?>>> noStatuses(
-            Bootstrap bootstrap)
+            ServiceEnvironment env)
     {
-        return bootstrap.getSPI().noStatusKinds();
+        return env.getSPI().noStatusKinds();
     }
 
 
Index: srcJava/org/omg/dds/core/status/SampleLostStatus.java
===================================================================
--- srcJava/org/omg/dds/core/status/SampleLostStatus.java	(revision 165)
+++ srcJava/org/omg/dds/core/status/SampleLostStatus.java	(working copy)
@@ -18,7 +18,7 @@
 
 package org.omg.dds.core.status;
 
-import org.omg.dds.core.Bootstrap;
+import org.omg.dds.core.ServiceEnvironment;
 import org.omg.dds.topic.Topic;
 
 
@@ -41,12 +41,12 @@
     // -----------------------------------------------------------------------
 
     /**
-     * @param bootstrap Identifies the Service instance to which the new
+     * @param env       Identifies the Service instance to which the new
      *                  object will belong.
      */
-    public static SampleLostStatus newSampleLostStatus(Bootstrap bootstrap)
+    public static SampleLostStatus newSampleLostStatus(ServiceEnvironment env)
     {
-        return bootstrap.getSPI().newSampleLostStatus();
+        return env.getSPI().newSampleLostStatus();
     }
 
 
Index: srcJava/org/omg/dds/core/status/OfferedIncompatibleQosStatus.java
===================================================================
--- srcJava/org/omg/dds/core/status/OfferedIncompatibleQosStatus.java	(revision 165)
+++ srcJava/org/omg/dds/core/status/OfferedIncompatibleQosStatus.java	(working copy)
@@ -20,7 +20,7 @@
 
 import java.util.Set;
 
-import org.omg.dds.core.Bootstrap;
+import org.omg.dds.core.ServiceEnvironment;
 import org.omg.dds.core.policy.QosPolicy;
 import org.omg.dds.core.policy.QosPolicyCount;
 import org.omg.dds.pub.DataWriter;
@@ -49,12 +49,13 @@
     // -----------------------------------------------------------------------
 
     /**
-     * @param bootstrap Identifies the Service instance to which the new
+     * @param env       Identifies the Service instance to which the new
      *                  object will belong.
      */
     public static OfferedIncompatibleQosStatus
-    newOfferedIncompatibleQosStatus(Bootstrap bootstrap) {
-        return bootstrap.getSPI().newOfferedIncompatibleQosStatus();
+    newOfferedIncompatibleQosStatus(ServiceEnvironment env)
+    {
+        return env.getSPI().newOfferedIncompatibleQosStatus();
     }
 
 
Index: srcJava/org/omg/dds/core/status/SampleRejectedStatus.java
===================================================================
--- srcJava/org/omg/dds/core/status/SampleRejectedStatus.java	(revision 165)
+++ srcJava/org/omg/dds/core/status/SampleRejectedStatus.java	(working copy)
@@ -18,7 +18,7 @@
 
 package org.omg.dds.core.status;
 
-import org.omg.dds.core.Bootstrap;
+import org.omg.dds.core.ServiceEnvironment;
 import org.omg.dds.core.modifiable.ModifiableInstanceHandle;
 import org.omg.dds.sub.DataReader;
 
@@ -43,13 +43,13 @@
     // -----------------------------------------------------------------------
 
     /**
-     * @param bootstrap Identifies the Service instance to which the new
+     * @param env       Identifies the Service instance to which the new
      *                  object will belong.
      */
     public static SampleRejectedStatus newSampleRejectedStatus(
-            Bootstrap bootstrap)
+            ServiceEnvironment env)
     {
-        return bootstrap.getSPI().newSampleRejectedStatus();
+        return env.getSPI().newSampleRejectedStatus();
     }
 
 
Index: srcJava/org/omg/dds/core/status/LivelinessChangedStatus.java
===================================================================
--- srcJava/org/omg/dds/core/status/LivelinessChangedStatus.java	(revision 165)
+++ srcJava/org/omg/dds/core/status/LivelinessChangedStatus.java	(working copy)
@@ -18,7 +18,7 @@
 
 package org.omg.dds.core.status;
 
-import org.omg.dds.core.Bootstrap;
+import org.omg.dds.core.ServiceEnvironment;
 import org.omg.dds.core.modifiable.ModifiableInstanceHandle;
 import org.omg.dds.pub.DataWriter;
 import org.omg.dds.sub.DataReader;
@@ -48,13 +48,13 @@
     // -----------------------------------------------------------------------
 
     /**
-     * @param bootstrap Identifies the Service instance to which the new
+     * @param env       Identifies the Service instance to which the new
      *                  object will belong.
      */
     public static LivelinessChangedStatus newLivelinessChangedStatus(
-            Bootstrap bootstrap)
+            ServiceEnvironment env)
     {
-        return bootstrap.getSPI().newLivelinessChangedStatus();
+        return env.getSPI().newLivelinessChangedStatus();
     }
 
 
Index: srcJava/org/omg/dds/core/GuardCondition.java
===================================================================
--- srcJava/org/omg/dds/core/GuardCondition.java	(revision 165)
+++ srcJava/org/omg/dds/core/GuardCondition.java	(working copy)
@@ -36,11 +36,12 @@
     // -----------------------------------------------------------------------
 
     /**
-     * @param bootstrap Identifies the Service instance to which the new
+     * @param env       Identifies the Service instance to which the new
      *                  object will belong.
      */
-    public static GuardCondition newGuardCondition(Bootstrap bootstrap) {
-        return bootstrap.getSPI().newGuardCondition();
+    public static GuardCondition newGuardCondition(ServiceEnvironment env)
+    {
+        return env.getSPI().newGuardCondition();
     }
 
 
Index: srcJava/org/omg/dds/core/Bootstrap.java
===================================================================
--- srcJava/org/omg/dds/core/Bootstrap.java	(revision 165)
+++ srcJava/org/omg/dds/core/Bootstrap.java	(working copy)
@@ -1,454 +0,0 @@
-/* Copyright 2010, Object Management Group, Inc.
- * Copyright 2010, PrismTech, Inc.
- * Copyright 2010, Real-Time Innovations, Inc.
- * All rights reserved.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.omg.dds.core;
-
-import java.lang.reflect.Constructor;
-import java.lang.reflect.InvocationTargetException;
-import java.util.Map;
-import java.util.Set;
-import java.util.concurrent.TimeUnit;
-
-import org.omg.dds.core.modifiable.ModifiableDuration;
-import org.omg.dds.core.modifiable.ModifiableInstanceHandle;
-import org.omg.dds.core.modifiable.ModifiableTime;
-import org.omg.dds.core.status.InconsistentTopicStatus;
-import org.omg.dds.core.status.LivelinessChangedStatus;
-import org.omg.dds.core.status.LivelinessLostStatus;
-import org.omg.dds.core.status.OfferedDeadlineMissedStatus;
-import org.omg.dds.core.status.OfferedIncompatibleQosStatus;
-import org.omg.dds.core.status.PublicationMatchedStatus;
-import org.omg.dds.core.status.RequestedDeadlineMissedStatus;
-import org.omg.dds.core.status.RequestedIncompatibleQosStatus;
-import org.omg.dds.core.status.SampleLostStatus;
-import org.omg.dds.core.status.SampleRejectedStatus;
-import org.omg.dds.core.status.Status;
-import org.omg.dds.core.status.SubscriptionMatchedStatus;
-import org.omg.dds.domain.DomainParticipantFactory;
-import org.omg.dds.type.TypeSupport;
-import org.omg.dds.type.dynamic.DynamicTypeFactory;
-
-
-/**
- * DDS implementations are rooted in this class, a concrete subclass
- * of which can be instantiated based on a system property.
- * 
- * All public concrete and abstract methods of this class are reentrant. The
- * reentrancy of any new methods that may be defined by subclasses is
- * unspecified.
- */
-public abstract class Bootstrap implements DDSObject {
-    // -----------------------------------------------------------------------
-    // Public Fields
-    // -----------------------------------------------------------------------
-
-    public static final String IMPLEMENTATION_CLASS_NAME_PROPERTY =
-        "org.omg.dds.serviceClassName";
-
-
-
-    // -----------------------------------------------------------------------
-    // Private Fields
-    // -----------------------------------------------------------------------
-
-    private static final String ERROR_STRING =
-        "Unable to load OMG DDS implementation. ";
-
-
-
-    // -----------------------------------------------------------------------
-    // Object Life Cycle
-    // -----------------------------------------------------------------------
-
-    /**
-     * Create and return a new instance of a concrete implementation of this
-     * class. This method is equivalent to calling:
-     * 
-     * <code>createInstance((Map) null);</code>
-     * 
-     * @see     #createInstance(Map)
-     * @see     #createInstance(String, Map)
-     * @see     #IMPLEMENTATION_CLASS_NAME_PROPERTY
-     */
-    public static Bootstrap createInstance() {
-        return createInstance(null);
-    }
-
-
-    /**
-     * Create and return a new instance of a concrete implementation of this
-     * class with the given environment. This method is equivalent to calling:
-     * 
-     * <code>
-     * createInstance(IMPLEMENTATION_CLASS_NAME_PROPERTY, environment);
-     * </code>
-     * 
-     * @see     #createInstance()
-     * @see     #createInstance(String, Map)
-     * @see     #IMPLEMENTATION_CLASS_NAME_PROPERTY
-     */
-    public static Bootstrap createInstance(Map<String, Object> environment) {
-        return createInstance(
-                IMPLEMENTATION_CLASS_NAME_PROPERTY, environment);
-    }
-
-
-    /**
-     * Look up the system property identified by the given string and load,
-     * then instantiate, the Bootstrap implementation class identified by its
-     * value. The class must be accessible and have a public constructor.
-     * 
-     * The public constructors of the implementation class will first be
-     * searched for one accepting a single argument of type {@link Map}. If
-     * one is found, it will be called with the <code>environment</code> map
-     * provided to this method as its argument. If no such constructor is
-     * found, a no-argument constructor will be used instead, and the
-     * provided <code>environment</code>, if any, will be ignored. If the
-     * implementation class provides no public constructor with either of
-     * these signatures, an exception will be thrown.
-     * 
-     * By default, the class loader for the <code>Bootstrap</code> class will
-     * be used to load the indicated class. If this class loader is null --
-     * for instance, if it is the bootstrap class loader -- then the system
-     * class loader will be used in its place. If it is also null, a
-     * <code>ServiceConfigurationException</code> will be thrown.
-     * 
-     * Neither the class loader nor the loaded class will be cached between
-     * invocations of this method. As a result, execution of this method is
-     * expected to be relatively expensive. However, as any DDS object can
-     * provide a reference to its creating Bootstrap via
-     * {@link DDSObject#getBootstrap()}, executions of this method are also
-     * expected to be rare.
-     * 
-     * @param   implClassNameProperty       The name of a system property,
-     *          the value of which will be taken as the name of a Bootstrap
-     *          implementation class to load.
-     * @param   environment                 A collection of name-value pairs
-     *          to be provided to the concrete Bootstrap subclass. If that
-     *          class does not provide a constructor that can accept this
-     *          environment, the environment will be ignored. This argument
-     *          may be null; a null environment shall be considered equivalent
-     *          to an empty map.
-     * 
-     * @return  A non-null Bootstrap.
-     * 
-     * @throws  NullPointerException        If the given property name is
-     *          null.
-     * @throws  IllegalArgumentException    If the given property name
-     *          is the empty string.
-     * @throws  ServiceConfigurationException   If the class could not be
-     *          loaded because of an issue with the the invocation of this
-     *          method or the configuration of the runtime environment. For
-     *          example, the class may not be on the class path, it may
-     *          require a native library that is not available, or an
-     *          inappropriate class may have been requested (e.g. one that is
-     *          not a Bootstrap or that doesn't have a no-argument
-     *          constructor).
-     * @throws  ServiceInitializationException  If the class was found but
-     *          could not be initialized and/or instantiated because of an
-     *          error that occurred within its implementation.
-     * 
-     * @see     #createInstance()
-     * @see     DDSObject#getBootstrap()
-     * @see     System#getProperty(String)
-     * @see     Class#getClassLoader()
-     * @see     ClassLoader#getSystemClassLoader()
-     * @see     ClassLoader#loadClass(String)
-     */
-    public static Bootstrap createInstance(
-            String implClassNameProperty, Map<String, Object> environment) {
-        // --- Get implementation class name --- //
-        /* System.getProperty checks the implClassNameProperty argument as
-         * described in the specification for this method and throws
-         * NullPointerException or IllegalArgumentException if necessary.
-         */
-        String className = System.getProperty(implClassNameProperty);
-        if (className == null || className.length() == 0) {
-            // no implementation class name specified
-            throw new ServiceConfigurationException(
-                    ERROR_STRING + "Please set " +
-                        implClassNameProperty + " property.");
-        }
-
-        try {
-            // --- Load implementation class --- //
-            /* IMPORTANT: Load class with ClassLoader.loadClass, not with
-             * Class.forName. The latter provides insufficient control over
-             * the class loader used and also caches class references in
-             * undesirable ways, both of which can cause problems in
-             * container environments such as OSGi.
-             */
-            ClassLoader classLoader = Bootstrap.class.getClassLoader();
-            if (classLoader == null) {
-                /* The class loader is the bootstrap class loader, which
-                 * is not directly accessible. Substitute the system
-                 * class loader.
-                 */
-                classLoader = ClassLoader.getSystemClassLoader();
-                if (classLoader == null) {
-                    throw new ServiceConfigurationException(
-                        ERROR_STRING +
-                            "Incorrect system class loader configuration.");
-                }
-            }
-            Class<?> ctxClass = classLoader.loadClass(className);
-
-            // --- Instantiate new object --- //
-            try {
-                // First, try a constructor that will accept the environment.
-                Constructor<?> ctor = ctxClass.getConstructor(Map.class);
-                return (Bootstrap) ctor.newInstance(environment);
-            } catch (NoSuchMethodException nsmx) {
-                /* No Map constructor found; try a no-argument constructor
-                 * instead.
-                 * 
-                 * Get the constructor and call it explicitly rather than
-                 * calling Class.newInstance(). The latter propagates all
-                 * exceptions, even checked ones, complicating error handling
-                 * for us and the user.
-                 */
-                Constructor<?> ctor = ctxClass.getConstructor(
-                        (Class<?>[]) null);
-                return (Bootstrap) ctor.newInstance((Object[]) null);
-            }
-
-            // --- Initialization problems --- //
-        } catch (ExceptionInInitializerError initx) {
-            // Presumably thrown by ClassLoader.loadClass, but not documented.
-            // Thrown by Constructor.newInstance.
-            throw new ServiceInitializationException(
-                    ERROR_STRING + "Error during static initialization.",
-                    initx.getCause());
-        } catch (InvocationTargetException itx) {
-            // Thrown by Constructor.newInstance
-            throw new ServiceInitializationException(
-                    ERROR_STRING + "Error during object initialization.",
-                    itx.getCause());
-
-            // --- Configuration problems --- //
-        } catch (IllegalStateException isx) {
-            // Thrown by ClassLoader.getSystemClassLoader.
-            throw new ServiceConfigurationException(ERROR_STRING, isx);
-        } catch (ClassNotFoundException cnfx) {
-            // Thrown by ClassLoader.loadClass.
-            throw new ServiceConfigurationException(
-                    ERROR_STRING + className + " was not found.",
-                    cnfx);
-        } catch (LinkageError linkx) {
-            // Presumably thrown by ClassLoader.loadClass, but not documented.
-            throw new ServiceConfigurationException(
-                    ERROR_STRING + className + " could not be loaded.",
-                    linkx);
-        } catch (NoSuchMethodException nsmx) {
-            // Thrown by Class.getConstructor: no no-argument constructor
-            throw new ServiceConfigurationException(
-                    ERROR_STRING + className +
-                        " has no appropriate constructor.",
-                    nsmx);
-        } catch (IllegalAccessException iax) {
-            // Thrown by Constructor.newInstance
-            throw new ServiceConfigurationException(
-                    ERROR_STRING + className +
-                        " has no appropriate constructor.",
-                    iax);
-        } catch (InstantiationException ix) {
-            // Thrown by Constructor.newInstance
-            throw new ServiceConfigurationException(
-                    ERROR_STRING + className + " could not be instantiated.",
-                    ix);
-        } catch (SecurityException sx) {
-            // Thrown by ClassLoader.getSystemClassLoader.
-            // Thrown by Class.getConstructor.
-            throw new ServiceConfigurationException(
-                    ERROR_STRING + "Prevented by security manager.", sx);
-        } catch (ClassCastException ccx) {
-            // Thrown by type cast
-            throw new ServiceConfigurationException(
-                    ERROR_STRING + className + " is not a Bootstrap.", ccx);
-
-            // --- Implementation problems --- //
-        } catch (IllegalArgumentException argx) {
-            /* Thrown by Constructor.newInstance to indicate that formal
-             * parameters and provided arguments are not compatible. Since
-             * the constructor doesn't take any arguments, and we didn't
-             * provide any, we shouldn't be able to get here.
-             */
-            throw new AssertionError(argx);
-        }
-        /* If any other RuntimeException or Error gets thrown above, it's
-         * either a bug in the implementation of this method or an
-         * undocumented behavior of the Java standard library. In either
-         * case, there's not much we can do about it, so let the exception
-         * propagate up the call stack as-is.
-         */
-    }
-
-
-    protected Bootstrap() {
-        // empty
-    }
-
-
-
-    // -----------------------------------------------------------------------
-    // Instance Methods
-    // -----------------------------------------------------------------------
-
-    public abstract ServiceProviderInterface getSPI();
-
-
-    // --- From DDSObject: ---------------------------------------------------
-
-    public final Bootstrap getBootstrap() {
-        return this;
-    }
-
-
-
-    // -----------------------------------------------------------------------
-    // Service-Provider Interface
-    // -----------------------------------------------------------------------
-
-    /**
-     * This interface is for the use of the DDS implementation, not of DDS
-     * applications. It simplifies the creation of objects of certain types in
-     * the DDS API.
-     */
-    public static interface ServiceProviderInterface {
-        // --- Singleton factories: ------------------------------------------
-
-        public abstract DomainParticipantFactory getParticipantFactory();
-
-        public abstract DynamicTypeFactory getTypeFactory();
-
-
-        // --- Types: --------------------------------------------------------
-
-        /**
-         * Create a new {@link TypeSupport} object for the given physical
-         * type. The Service will register this type under the given name
-         * with any participant with which the <code>TypeSupport</code> is
-         * used.
-         * 
-         * @param <TYPE>    The physical type of all samples read or written
-         *                  by any {@link org.omg.dds.sub.DataReader} or
-         *                  {@link org.omg.dds.pub.DataWriter} typed by the
-         *                  resulting <code>TypeSupport</code>.
-         * @param type      The physical type of all samples read or written
-         *                  by any {@link org.omg.dds.sub.DataReader} or
-         *                  {@link org.omg.dds.pub.DataWriter} typed by the
-         *                  resulting <code>TypeSupport</code>.
-         * @param registeredName    The logical name under which this type
-         *                  will be registered with any
-         *                  {@link org.omg.dds.domain.DomainParticipant}
-         *                  with which the resulting
-         *                  <code>TypeSupport</code> is used.
-         * @return          A new <code>TypeSupport</code> object, which can
-         *                  subsequently be used to create one or more
-         *                  {@link org.omg.dds.topic.Topic}s.
-         */
-        public abstract <TYPE> TypeSupport<TYPE> newTypeSupport(
-                Class<TYPE> type, String registeredName);
-
-
-        // --- Time & Duration: ----------------------------------------------
-
-        /**
-         * Construct a {@link Duration} of the given magnitude.
-         * 
-         * A duration of magnitude {@link Long#MAX_VALUE} indicates an
-         * infinite duration, regardless of the units specified.
-         */
-        public abstract ModifiableDuration newDuration(
-                long duration, TimeUnit unit);
-
-        /**
-         * @return      A {@link Duration} of infinite length.
-         */
-        public abstract Duration infiniteDuration();
-
-        /**
-         * @return      A {@link Duration} of zero length.
-         */
-        public abstract Duration zeroDuration();
-
-        /**
-         * Construct a specific instant in time.
-         * 
-         * Negative values are considered invalid and will result in the
-         * construction of a time <code>t</code> such that:
-         * 
-         * <code>t.isValid() == false</code>
-         */
-        public abstract ModifiableTime newTime(long time, TimeUnit units);
-
-        /**
-         * @return      A {@link Time} that is not valid.
-         */
-        public abstract Time invalidTime();
-
-
-        // --- Instance handle: ----------------------------------------------
-
-        public abstract ModifiableInstanceHandle newInstanceHandle();
-
-        public abstract InstanceHandle nilHandle();
-
-
-        // --- Conditions & WaitSet: -----------------------------------------
-
-        public abstract GuardCondition newGuardCondition();
-
-        public abstract WaitSet newWaitSet();
-
-
-        // --- Status: -------------------------------------------------------
-
-        public abstract Set<Class<? extends Status<?>>> allStatusKinds();
-
-        public abstract Set<Class<? extends Status<?>>> noStatusKinds();
-
-        public abstract LivelinessLostStatus newLivelinessLostStatus();
-
-        public abstract OfferedDeadlineMissedStatus
-        newOfferedDeadlineMissedStatus();
-
-        public abstract OfferedIncompatibleQosStatus
-        newOfferedIncompatibleQosStatus();
-
-        public abstract PublicationMatchedStatus
-        newPublicationMatchedStatus();
-
-        public abstract LivelinessChangedStatus newLivelinessChangedStatus();
-
-        public abstract RequestedDeadlineMissedStatus
-        newRequestedDeadlineMissedStatus();
-
-        public abstract RequestedIncompatibleQosStatus
-        newRequestedIncompatibleQosStatus();
-
-        public abstract SampleLostStatus newSampleLostStatus();
-
-        public abstract SampleRejectedStatus newSampleRejectedStatus();
-
-        public abstract SubscriptionMatchedStatus
-        newSubscriptionMatchedStatus();
-
-        public abstract InconsistentTopicStatus newInconsistentTopicStatus();
-    }
-}
Index: srcJava/org/omg/dds/core/InstanceHandle.java
===================================================================
--- srcJava/org/omg/dds/core/InstanceHandle.java	(revision 165)
+++ srcJava/org/omg/dds/core/InstanceHandle.java	(working copy)
@@ -41,23 +41,25 @@
     // -----------------------------------------------------------------------
 
     /**
-     * @param bootstrap Identifies the Service instance to which the new
+     * @param env       Identifies the Service instance to which the new
      *                  object will belong.
      */
     public static ModifiableInstanceHandle newInstanceHandle(
-            Bootstrap bootstrap) {
-        return bootstrap.getSPI().newInstanceHandle();
+            ServiceEnvironment env)
+    {
+        return env.getSPI().newInstanceHandle();
     }
 
 
     /**
-     * @param bootstrap Identifies the Service instance to which the
+     * @param env       Identifies the Service instance to which the
      *                  object will belong.
      * 
      * @return  An unmodifiable nil instance handle.
      */
-    public static InstanceHandle nilHandle(Bootstrap bootstrap) {
-        return bootstrap.getSPI().nilHandle();
+    public static InstanceHandle nilHandle(ServiceEnvironment env)
+    {
+        return env.getSPI().nilHandle();
     }
 
 
Index: srcJava/org/omg/dds/core/WaitSet.java
===================================================================
--- srcJava/org/omg/dds/core/WaitSet.java	(revision 165)
+++ srcJava/org/omg/dds/core/WaitSet.java	(working copy)
@@ -96,11 +96,12 @@
     // -----------------------------------------------------------------------
 
     /**
-     * @param bootstrap Identifies the Service instance to which the new
+     * @param env       Identifies the Service instance to which the new
      *                  object will belong.
      */
-    public static WaitSet newWaitSet(Bootstrap bootstrap) {
-        return bootstrap.getSPI().newWaitSet();
+    public static WaitSet newWaitSet(ServiceEnvironment env)
+    {
+        return env.getSPI().newWaitSet();
     }
 
 
Index: srcJava/org/omg/dds/core/Duration.java
===================================================================
--- srcJava/org/omg/dds/core/Duration.java	(revision 165)
+++ srcJava/org/omg/dds/core/Duration.java	(working copy)
@@ -51,37 +51,42 @@
      * A duration of magnitude {@link Long#MAX_VALUE} indicates an infinite
      * duration, regardless of the units specified.
      * 
-     * @param bootstrap Identifies the Service instance to which the new
+     * @param env       Identifies the Service instance to which the new
      *                  object will belong.
      * 
      * @see     #isInfinite()
-     * @see     #infiniteDuration(Bootstrap)
+     * @see     #infiniteDuration(ServiceEnvironment)
      */
     public static ModifiableDuration newDuration(
-            long duration, TimeUnit unit, Bootstrap bootstrap) {
-        return bootstrap.getSPI().newDuration(duration, unit);
+            long duration,
+            TimeUnit unit,
+            ServiceEnvironment env)
+    {
+        return env.getSPI().newDuration(duration, unit);
     }
 
 
     /**
-     * @param bootstrap Identifies the Service instance to which the
+     * @param env       Identifies the Service instance to which the
      *                  object will belong.
      * 
      * @return  An unmodifiable {@link Duration} of infinite length.
      */
-    public static Duration infiniteDuration(Bootstrap bootstrap) {
-        return bootstrap.getSPI().infiniteDuration();
+    public static Duration infiniteDuration(ServiceEnvironment env)
+    {
+        return env.getSPI().infiniteDuration();
     }
 
 
     /**
-     * @param bootstrap Identifies the Service instance to which the
+     * @param env       Identifies the Service instance to which the
      *                  object will belong.
      * 
      * @return  A {@link Duration} of zero length.
      */
-    public static Duration zeroDuration(Bootstrap bootstrap) {
-        return bootstrap.getSPI().zeroDuration();
+    public static Duration zeroDuration(ServiceEnvironment env)
+    {
+        return env.getSPI().zeroDuration();
     }
 
 
@@ -170,9 +175,9 @@
      * If this duration is infinite, the following relationship shall be
      * true:
      * 
-     * <code>this.equals(infiniteDuration(this.getBootstrap()))</code>
+     * <code>this.equals(infiniteDuration(this.getEnvironment()))</code>
      * 
-     * @see     #infiniteDuration(Bootstrap)
+     * @see     #infiniteDuration(ServiceEnvironment)
      */
     public abstract boolean isInfinite();
 
Index: srcJava/org/omg/dds/core/Time.java
===================================================================
--- srcJava/org/omg/dds/core/Time.java	(revision 165)
+++ srcJava/org/omg/dds/core/Time.java	(working copy)
@@ -54,25 +54,29 @@
      * 
      * <code>t.isValid() == false</code>
      * 
-     * @param bootstrap Identifies the Service instance to which the new
+     * @param env       Identifies the Service instance to which the new
      *                  object will belong.
      * 
      * @see     #isValid()
      */
     public static ModifiableTime newTime(
-            long time, TimeUnit units, Bootstrap bootstrap) {
-        return bootstrap.getSPI().newTime(time, units);
+            long time,
+            TimeUnit units,
+            ServiceEnvironment env)
+    {
+        return env.getSPI().newTime(time, units);
     }
 
 
     /**
-     * @param bootstrap Identifies the Service instance to which the
+     * @param env       Identifies the Service instance to which the
      *                  object will belong.
      *                  
      * @return      An unmodifiable {@link Time} that is not valid.
      */
-    public static Time invalidTime(Bootstrap bootstrap) {
-        return bootstrap.getSPI().invalidTime();
+    public static Time invalidTime(ServiceEnvironment env)
+    {
+        return env.getSPI().invalidTime();
     }
 
 
Index: srcJava/org/omg/dds/sub/Subscriber.java
===================================================================
--- srcJava/org/omg/dds/sub/Subscriber.java	(revision 165)
+++ srcJava/org/omg/dds/sub/Subscriber.java	(working copy)
@@ -423,11 +423,9 @@
      * This operation is equivalent to calling
      * {@link #getDataReaders(Collection, Collection, Collection, Collection)}
      * with any sample state
-     * ({@link SampleState#anySampleStateSet(org.omg.dds.core.Bootstrap)}),
-     * any view state
-     * ({@link ViewState#anyViewStateSet(org.omg.dds.core.Bootstrap)}), and
-     * any instance state
-     * ({@link InstanceState#anyInstanceStateSet(org.omg.dds.core.Bootstrap)}).
+     * ({@link Subscriber.ReaderState#withAnySampleState()}), any view state
+     * ({@link Subscriber.ReaderState#withAnyViewState()}), and any instance
+     * state ({@link Subscriber.ReaderState#withAnyInstanceState()}).
      * 
      * @param   readers         a container, into which this method will place
      *          its result.
Index: srcJava/org/omg/dds/sub/DataReader.java
===================================================================
--- srcJava/org/omg/dds/sub/DataReader.java	(revision 165)
+++ srcJava/org/omg/dds/sub/DataReader.java	(working copy)
@@ -770,8 +770,8 @@
      * 
      * A nil handle is guaranteed to be "less than" any valid instance
      * handle. So the use of the parameter value handle ==
-     * {@link InstanceHandle#nilHandle(org.omg.dds.core.Bootstrap)} will
-     * return the samples for the instance which has the smallest
+     * {@link InstanceHandle#nilHandle(org.omg.dds.core.ServiceEnvironment)}
+     * will return the samples for the instance which has the smallest
      * instance handle among all the instances that contain available
      * samples.
      * 
