Index: srcJava/org/omg/dds/core/QosProvider.java
===================================================================
--- srcJava/org/omg/dds/core/QosProvider.java	(revision 0)
+++ srcJava/org/omg/dds/core/QosProvider.java	(revision 196)
@@ -0,0 +1,65 @@
+/* Copyright 2010, Object Management Group, Inc.
+ * Copyright 2010, PrismTech, Inc.
+ * Copyright 2010, Real-Time Innovations, Inc.
+ * All rights reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.omg.dds.core;
+
+import org.omg.dds.pub.PublisherQos;
+import org.omg.dds.pub.DataWriterQos;
+import org.omg.dds.sub.SubscriberQos;
+import org.omg.dds.sub.DataReaderQos;
+import org.omg.dds.topic.TopicQos;
+import org.omg.dds.core.DDSObject;
+import org.omg.dds.domain.DomainParticipantQos;
+import org.omg.dds.domain.DomainParticipantFactoryQos;
+
+public abstract interface QosProvider extends DDSObject {
+
+	/**
+	 * Get default domain paricipant QoS 
+	 * @return Default domain participant QoS defined in the uri passed to 
+	 *         the { @link ServiceEnvironement.newQosProvider} method. 
+	 */
+	
+	public DomainParticipantFactoryQos getDomainParticipantFactoryQos();
+
+	/**
+	 * Get the first domain paricipant QoS with identifier that matches the id.
+	 * @param id The identifier of the domain participant QoS of interest  
+	 * @return Domain participant QoS  
+	 */
+
+	public DomainParticipantFactoryQos getDomainParticipantFactoryQos(String id);
+	
+	public DomainParticipantQos getDomainParticipantQos();
+	public DomainParticipantQos getDomainParticipantQos(String id);
+	
+	public TopicQos getTopicQos();
+	public TopicQos getTopicQos(String id);
+	
+	public SubscriberQos getSubscriberQos();
+	public SubscriberQos getSubscriberQos(String id);
+	
+	public PublisherQos getPublisherQos();
+	public PublisherQos getPublisherQos(String id);
+	
+	public DataReaderQos getDataReaderQos();
+	public DataReaderQos getDataReaderQos(String id);
+	
+	public DataWriterQos getDataWriterQos();
+	public DataWriterQos getDataWriterQos(String id);
+}
Index: srcJava/org/omg/dds/core/policy/PolicyBuilder.java
===================================================================
--- srcJava/org/omg/dds/core/policy/PolicyBuilder.java	(revision 195)
+++ srcJava/org/omg/dds/core/policy/PolicyBuilder.java	(revision 196)
@@ -1,80 +0,0 @@
-/* Copyright 2010, Object Management Group, Inc.
- * Copyright 2010, PrismTech, Inc.
- * Copyright 2010, Real-Time Innovations, Inc.
- * All rights reserved.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.omg.dds.core.policy;
-
-import org.omg.dds.pub.PublisherQos;
-import org.omg.dds.pub.DataWriterQos;
-import org.omg.dds.sub.SubscriberQos;
-import org.omg.dds.sub.DataReaderQos;
-import org.omg.dds.topic.TopicQos;
-import org.omg.dds.core.DDSObject;
-import org.omg.dds.domain.DomainParticipantQos;
-import org.omg.dds.domain.DomainParticipantFactoryQos;
-
-public abstract class PolicyBuilder implements DDSObject {
-
-	/**
-	 * This operation loads a policy builder class that implements the {@link PolicyBuilder} interface.  
-	 * @param policyBuilderClassName the name of the policy builder class. 
-	 * @param classLoader custom class loader if any.
-	 * @return A instance of the policy builder class.
-	 * @throws IllegalAccessException See {@link java.lang.ClassLoader}
-	 * @throws ClassNotFoundException {@link java.lang.ClassLoader}
-	 * @throws InstantiationException {@link java.lang.ClassLoader}
-	 */
-	
-	public static PolicyBuilder load (java.lang.String policyBuilderClassName, java.lang.ClassLoader classLoader) 
-			throws IllegalAccessException, ClassNotFoundException, InstantiationException 
-	{
-		if (classLoader == null) {
-			classLoader = PolicyBuilder.class.getClassLoader();
-		}
-		
-        return (PolicyBuilder) classLoader.loadClass(policyBuilderClassName).newInstance();
-	}
-
-	/**
-	 * This operation loads a policy builder class that implements the {@link PolicyBuilder} interface.  
-	 * @param policyBuilderClassName the name of the policy builder class. 
-	 * @return A instance of the policy builder class.
-	 * @throws IllegalAccessException See {@link java.lang.ClassLoader}
-	 * @throws ClassNotFoundException {@link java.lang.ClassLoader}
-	 * @throws InstantiationException {@link java.lang.ClassLoader}
-	 */
-
-	public static PolicyBuilder load (java.lang.String policyBuilderClassName) 
-			throws IllegalAccessException, ClassNotFoundException, InstantiationException 
-	{
-        return (PolicyBuilder) PolicyBuilder.class.getClassLoader().loadClass(policyBuilderClassName).newInstance();
-	}
-	
-	public abstract DomainParticipantFactoryQos getDomainParticipantFactoryQos(String libraryName, String profileName);
-	
-	public abstract DomainParticipantQos getDomainParticipantQos(String libraryName, String profileName);
-	
-	public abstract TopicQos getTopicQos(String libraryName, String profileName);
-	
-	public abstract SubscriberQos getSubscriberQos(String libraryName, String profileName);
-	
-	public abstract PublisherQos getPublisherQos(String libraryName, String profileName);
-	
-	public abstract DataReaderQos getDataReaderQos(String libraryName, String profileName);
-	
-	public abstract DataWriterQos getDataWriterQos(String libraryName, String profileName);
-}
Index: srcJava/org/omg/dds/core/ServiceEnvironment.java
===================================================================
--- srcJava/org/omg/dds/core/ServiceEnvironment.java	(revision 195)
+++ srcJava/org/omg/dds/core/ServiceEnvironment.java	(revision 196)
@@ -23,11 +23,13 @@
 import java.util.Map;
 import java.util.Set;
 import java.util.concurrent.TimeUnit;
+import java.lang.String;
 
 import org.omg.dds.core.status.Status;
 import org.omg.dds.domain.DomainParticipantFactory;
 import org.omg.dds.type.TypeSupport;
 import org.omg.dds.type.dynamic.DynamicTypeFactory;
+import org.omg.dds.core.QosProvider;
 
 
 /**
@@ -459,8 +461,22 @@
         public abstract GuardCondition newGuardCondition();
 
         public abstract WaitSet newWaitSet();
+        
+        // --- QoS Provider --------------------------------------------------
+        /** Create a QosProvider fetching QoS configuration from the specified URI.    
+         *  The URI determines the how the Qos configuration is fetched and the    
+         *  format in which it is represented. This specification requires compliant   
+         *  implementations to support at least one file based configuration using    
+         *  the XML syntax defined as part of the DDS for CCM specification (formal/12.02.01).
+         *  
+         *  @param uri The uniform resource identifier. For example,
+         *             "file:///somewhere/on/disk/qos-config.xml"
+         *             "http:///somewhere.org/here/json-config.json"      
+         *  @param profile Name of a profile in the document obtained via the uri
+         *  @return a new QosProvider object
+         */
+        public abstract QosProvider newQosProvider(String uri, String profile);
 
-
         // --- Status: -------------------------------------------------------
 
         public abstract Set<Class<? extends Status>> allStatusKinds();
