Index: org/omg/dds/type/dynamic/DynamicDataFactory.java
===================================================================
--- org/omg/dds/type/dynamic/DynamicDataFactory.java	(revision 206)
+++ org/omg/dds/type/dynamic/DynamicDataFactory.java	(working copy)
@@ -1,18 +1,18 @@
-package org.omg.dds.type.dynamic;
-
-import org.omg.dds.core.ServiceEnvironment;
-
-
-public abstract class DynamicDataFactory implements org.omg.dds.core.DDSObject {
-	
-	/**
-     * @param env       Identifies the Service instance to which the
-     *                  object will belong.
-     */
-    public static DynamicDataFactory getInstance(ServiceEnvironment env)
-    {
-        return env.getSPI().getDynamicDataFactory();
-    }
-    
-    public abstract DynamicData newDynamicData(DynamicType type); 
-}
+package org.omg.dds.type.dynamic;
+
+import org.omg.dds.core.ServiceEnvironment;
+
+
+public abstract class DynamicDataFactory implements org.omg.dds.core.DDSObject {
+	
+	/**
+     * @param env       Identifies the Service instance to which the
+     *                  object will belong.
+     */
+    public static DynamicDataFactory getInstance(ServiceEnvironment env)
+    {
+        return env.getSPI().getDynamicDataFactory();
+    }
+    
+    public abstract DynamicData newDynamicData(DynamicType type); 
+}
Index: org/omg/dds/type/TypeSupport.java
===================================================================
--- org/omg/dds/type/TypeSupport.java	(revision 202)
+++ org/omg/dds/type/TypeSupport.java	(working copy)
@@ -18,8 +18,8 @@
 
 package org.omg.dds.type;
 
+import org.omg.dds.core.DDSObject;
 import org.omg.dds.core.ServiceEnvironment;
-import org.omg.dds.core.DDSObject;
 
 
 /**
Index: org/omg/dds/type/builtin/KeyedBytes.java
===================================================================
--- org/omg/dds/type/builtin/KeyedBytes.java	(revision 207)
+++ org/omg/dds/type/builtin/KeyedBytes.java	(working copy)
@@ -19,6 +19,7 @@
 package org.omg.dds.type.builtin;
 
 import java.io.Serializable;
+
 import org.omg.dds.core.DDSObject;
 import org.omg.dds.core.ServiceEnvironment;
 
Index: org/omg/dds/pub/PublisherListener.java
===================================================================
--- org/omg/dds/pub/PublisherListener.java	(revision 197)
+++ org/omg/dds/pub/PublisherListener.java	(working copy)
@@ -20,7 +20,6 @@
 
 import java.util.EventListener;
 
-import org.omg.dds.core.Entity;
 import org.omg.dds.core.status.LivelinessLostEvent;
 import org.omg.dds.core.status.OfferedDeadlineMissedEvent;
 import org.omg.dds.core.status.OfferedIncompatibleQosEvent;
@@ -28,7 +27,7 @@
 
 
 /**
- * Since a {@link Publisher} is a kind of {@link Entity}, it has the ability
+ * Since a {@link org.omg.dds.pub.Publisher} is a kind of {@link org.omg.dds.core.Entity}, it has the ability
  * to have a listener associated with it. In this case, the associated
  * listener must be of concrete type PublisherListener.
  */
Index: org/omg/dds/pub/DataWriter.java
===================================================================
--- org/omg/dds/pub/DataWriter.java	(revision 202)
+++ org/omg/dds/pub/DataWriter.java	(working copy)
@@ -26,31 +26,21 @@
 import org.omg.dds.core.Duration;
 import org.omg.dds.core.InstanceHandle;
 import org.omg.dds.core.ModifiableInstanceHandle;
-import org.omg.dds.core.NotEnabledException;
-import org.omg.dds.core.OutOfResourcesException;
-import org.omg.dds.core.PreconditionNotMetException;
 import org.omg.dds.core.StatusCondition;
 import org.omg.dds.core.Time;
-import org.omg.dds.core.policy.DestinationOrder;
-import org.omg.dds.core.policy.Ownership;
-import org.omg.dds.core.policy.ResourceLimits;
 import org.omg.dds.core.status.LivelinessLostStatus;
 import org.omg.dds.core.status.OfferedDeadlineMissedStatus;
 import org.omg.dds.core.status.OfferedIncompatibleQosStatus;
 import org.omg.dds.core.status.PublicationMatchedStatus;
-import org.omg.dds.domain.DomainParticipant;
-import org.omg.dds.sub.DataReader;
-import org.omg.dds.sub.InstanceState;
-import org.omg.dds.sub.Sample;
 import org.omg.dds.topic.SubscriptionBuiltinTopicData;
 import org.omg.dds.topic.Topic;
 
 
 /**
  * DataWriter allows the application to set the value of the data to be
- * published under a given {@link Topic}.
+ * published under a given {@link org.omg.dds.topic.Topic}.
  * 
- * A DataWriter is attached to exactly one {@link Publisher} that acts as a
+ * A DataWriter is attached to exactly one {@link org.omg.dds.pub.Publisher} that acts as a
  * factory for it. A DataWriter is bound to exactly one Topic and therefore
  * to exactly one data type. The Topic must exist prior to the DataWriter's
  * creation.
@@ -59,7 +49,7 @@
  * {@link #setQos(org.omg.dds.core.EntityQos)}, {@link #getQos()},
  * {@link #setListener(java.util.EventListener)},{@link #getListener()},
  * {@link #enable()}, {@link #getStatusCondition()}, and {@link #close()} may
- * fail with the exception {@link NotEnabledException}.
+ * fail with the exception {@link org.omg.dds.core.NotEnabledException}.
  * 
  * @param <TYPE>    The concrete type of the data to be published over the
  *                  the topic.
@@ -79,7 +69,7 @@
     public <OTHER> DataWriter<OTHER> cast();
 
     /**
-     * @return  the {@link Topic} associated with the DataWriter. This is the
+     * @return  the {@link org.omg.dds.topic.Topic} associated with the DataWriter. This is the
      *          same Topic that was used to create the DataWriter.
      */
     public Topic<TYPE> getTopic();
@@ -91,7 +81,7 @@
      * Otherwise the operation will return immediately.
      * 
      * The operation blocks the calling thread until either all data written
-     * by the DataWriter is acknowledged by all matched {@link DataReader}
+     * by the DataWriter is acknowledged by all matched {@link org.omg.dds.sub.DataReader}
      * entities that have
      * {@link org.omg.dds.core.policy.Reliability#getKind()} set to
      * {@link org.omg.dds.core.policy.Reliability.Kind#RELIABLE},
@@ -114,7 +104,7 @@
      * Otherwise the operation will return immediately.
      * 
      * The operation blocks the calling thread until either all data written
-     * by the DataWriter is acknowledged by all matched {@link DataReader}
+     * by the DataWriter is acknowledged by all matched {@link org.omg.dds.sub.DataReader}
      * entities that have
      * {@link org.omg.dds.core.policy.Reliability#getKind()} set to
      * {@link org.omg.dds.core.policy.Reliability.Kind#RELIABLE},
@@ -185,14 +175,14 @@
     /**
      * This operation retrieves the list of subscriptions currently
      * "associated" with the DataWriter; that is, subscriptions that have a
-     * matching {@link Topic} and compatible QoS that the application has not
+     * matching {@link org.omg.dds.topic.Topic} and compatible QoS that the application has not
      * indicated should be "ignored" by means of
-     * {@link DomainParticipant#ignoreSubscription(InstanceHandle)}.
+     * {@link org.omg.dds.domain.DomainParticipant#ignoreSubscription(InstanceHandle)}.
      * 
      * The handles returned in the 'subscriptionHandles' list are the ones
      * that are used by the DDS implementation to locally identify the
-     * corresponding matched {@link DataReader} entities. These handles match
-     * the ones that appear in {@link Sample#getInstanceHandle()} when
+     * corresponding matched {@link org.omg.dds.sub.DataReader} entities. These handles match
+     * the ones that appear in {@link org.omg.dds.sub.Sample#getInstanceHandle()} when
      * reading the "DCPSSubscriptions" built-in topic.
      * 
      * The operation may fail if the infrastructure does not locally maintain
@@ -207,9 +197,9 @@
     /**
      * This operation retrieves information on a subscription that is
      * currently "associated" with the DataWriter; that is, a subscription
-     * with a matching {@link Topic} and compatible QoS that the application
+     * with a matching {@link org.omg.dds.topic.Topic} and compatible QoS that the application
      * has not indicated should be "ignored" by means of
-     * {@link DomainParticipant#ignoreSubscription(InstanceHandle)}.
+     * {@link org.omg.dds.domain.DomainParticipant#ignoreSubscription(InstanceHandle)}.
      * 
      * The operation {@link #getMatchedSubscriptions()} can be used
      * to find the subscriptions that are currently matched with the
@@ -280,7 +270,7 @@
      * where the application desires to specify the value for the source
      * time stamp. The source time stamp potentially affects the relative
      * order in which readers observe events from multiple writers. For
-     * details see {@link DestinationOrder}.
+     * details see {@link org.omg.dds.core.policy.DestinationOrder}.
      * 
      * This operation may block and exit with {@link TimeoutException} under
      * the same circumstances described for the {@link #write(Object)}.
@@ -304,7 +294,7 @@
      * where the application desires to specify the value for the source
      * time stamp. The source time stamp potentially affects the relative
      * order in which readers observe events from multiple writers. For
-     * details see {@link DestinationOrder}.
+     * details see {@link org.omg.dds.core.policy.DestinationOrder}.
      * 
      * This operation may block and exit with {@link TimeoutException} under
      * the same circumstances described for the {@link #write(Object)}.
@@ -350,12 +340,12 @@
      * the purpose of dispose). The operation just indicates that the
      * DataWriter no longer has 'anything to say' about the instance.
      * DataReader entities that are reading the instance will eventually
-     * receive a sample with a {@link InstanceState#NOT_ALIVE_NO_WRITERS}
+     * receive a sample with a {@link org.omg.dds.sub.InstanceState#NOT_ALIVE_NO_WRITERS}
      * instance state if no other DataWriter entities are writing the
      * instance.
      * 
      * This operation can affect the ownership of the data instance (see
-     * {@link Ownership}). If the DataWriter was the exclusive owner
+     * {@link org.omg.dds.core.policy.Ownership}). If the DataWriter was the exclusive owner
      * of the instance, then calling this method will relinquish that
      * ownership.
      * 
@@ -406,12 +396,12 @@
      * the purpose of dispose). The operation just indicates that the
      * DataWriter no longer has 'anything to say' about the instance.
      * DataReader entities that are reading the instance will eventually
-     * receive a sample with a {@link InstanceState#NOT_ALIVE_NO_WRITERS}
+     * receive a sample with a {@link org.omg.dds.sub.InstanceState#NOT_ALIVE_NO_WRITERS}
      * instance state if no other DataWriter entities are writing the
      * instance.
      * 
      * This operation can affect the ownership of the data instance (see
-     * {@link Ownership}). If the DataWriter was the exclusive owner
+     * {@link org.omg.dds.core.policy.Ownership}). If the DataWriter was the exclusive owner
      * of the instance, then calling this method will relinquish that
      * ownership.
      * 
@@ -444,7 +434,7 @@
      * instead in the cases where the application desires to specify the
      * value for the source time stamp. The source time stamp potentially
      * affects the relative order in which readers observe events from
-     * multiple writers. For details see {@link DestinationOrder}.
+     * multiple writers. For details see {@link org.omg.dds.core.policy.DestinationOrder}.
      * 
      * The constraints on the values of the handle parameter and the
      * corresponding error behavior are the same specified for the
@@ -469,7 +459,7 @@
      * instead in the cases where the application desires to specify the
      * value for the source time stamp. The source time stamp potentially
      * affects the relative order in which readers observe events from
-     * multiple writers. For details see {@link DestinationOrder}.
+     * multiple writers. For details see {@link org.omg.dds.core.policy.DestinationOrder}.
      * 
      * The constraints on the values of the handle parameter and the
      * corresponding error behavior are the same specified for the
@@ -492,19 +482,19 @@
     /**
      * This operation modifies the value of a data instance. When this
      * operation is used, the Service will automatically supply the value of
-     * the source time stamp that is made available to {@link DataReader}
-     * objects by means of {@link Sample#getSourceTimestamp()}. See also
-     * {@link DestinationOrder}.
+     * the source time stamp that is made available to {@link org.omg.dds.sub.DataReader}
+     * objects by means of {@link org.omg.dds.sub.Sample#getSourceTimestamp()}. See also
+     * {@link org.omg.dds.core.policy.DestinationOrder}.
      * 
      * As a side effect, this operation asserts liveliness on the DataWriter
-     * itself, the {@link Publisher} and the {@link DomainParticipant}.
+     * itself, the {@link org.omg.dds.pub.Publisher} and the {@link org.omg.dds.domain.DomainParticipant}.
      * 
      * If {@link org.omg.dds.core.policy.Reliability#getKind()} kind
      * is set to
      * {@link org.omg.dds.core.policy.Reliability.Kind#RELIABLE},
      * the operation may block if
      * the modification would cause data to be lost or else cause one of the
-     * limits specified in {@link ResourceLimits} to be exceeded.
+     * limits specified in {@link org.omg.dds.core.policy.ResourceLimits} to be exceeded.
      * Under these circumstances,
      * {@link org.omg.dds.core.policy.Reliability#getMaxBlockingTime()}
      * configures the
@@ -519,8 +509,8 @@
      * {@link org.omg.dds.core.policy.History.Kind#KEEP_LAST}.
      * 
      * <ul>
-     *     <li>If ({@link ResourceLimits#getMaxSamples()} &lt;
-     *         {@link ResourceLimits#getMaxInstances()} *
+     *     <li>If ({@link org.omg.dds.core.policy.ResourceLimits#getMaxSamples()} &lt;
+     *         {@link org.omg.dds.core.policy.ResourceLimits#getMaxInstances()} *
      *         {@link org.omg.dds.core.policy.History#getDepth()}),
      *         then in the situation
      *         where the max samples resource limit is exhausted the Service
@@ -528,13 +518,13 @@
      *         as at least one sample remains for such an instance. If it is
      *         still not possible to make space available to store the
      *         modification, the writer is allowed to block.</li>
-     *     <li>If ({@link ResourceLimits#getMaxSamples()} &lt;
-     *         {@link ResourceLimits#getMaxInstances()}), then the
+     *     <li>If ({@link org.omg.dds.core.policy.ResourceLimits#getMaxSamples()} &lt;
+     *         {@link org.omg.dds.core.policy.ResourceLimits#getMaxInstances()}), then the
      *         DataWriter may block regardless of the HISTORY depth.</li>
      * </ul>
      * 
      * Instead of blocking, the operation is allowed to fail immediately
-     * with {@link OutOfResourcesException} provided the following two
+     * with {@link org.omg.dds.core.OutOfResourcesException} provided the following two
      * conditions are met:
      * 
      * <ol>
@@ -570,12 +560,12 @@
     /**
      * This operation modifies the value of a data instance. When this
      * operation is used, the Service will automatically supply the value of
-     * the source time stamp that is made available to {@link DataReader}
-     * objects by means of {@link Sample#getSourceTimestamp()}. See also
-     * {@link DestinationOrder}.
+     * the source time stamp that is made available to {@link org.omg.dds.sub.DataReader}
+     * objects by means of {@link org.omg.dds.sub.Sample#getSourceTimestamp()}. See also
+     * {@link org.omg.dds.core.policy.DestinationOrder}.
      * 
      * As a side effect, this operation asserts liveliness on the DataWriter
-     * itself, the {@link Publisher} and the {@link DomainParticipant}.
+     * itself, the {@link org.omg.dds.pub.Publisher} and the {@link org.omg.dds.domain.DomainParticipant}.
      * 
      * A nil handle can be used for the parameter handle. This indicates that
      * the identity of the instance should be automatically deduced from the
@@ -588,7 +578,7 @@
      * {@link org.omg.dds.core.policy.Reliability.Kind#RELIABLE},
      * the operation may block if
      * the modification would cause data to be lost or else cause one of the
-     * limits specified in {@link ResourceLimits} to be exceeded.
+     * limits specified in {@link org.omg.dds.core.policy.ResourceLimits} to be exceeded.
      * Under these circumstances,
      * {@link org.omg.dds.core.policy.Reliability#getMaxBlockingTime()}
      * configures the
@@ -603,8 +593,8 @@
      * {@link org.omg.dds.core.policy.History.Kind#KEEP_LAST}.
      * 
      * <ul>
-     *     <li>If ({@link ResourceLimits#getMaxSamples()} &lt;
-     *         {@link ResourceLimits#getMaxInstances()} *
+     *     <li>If ({@link org.omg.dds.core.policy.ResourceLimits#getMaxSamples()} &lt;
+     *         {@link org.omg.dds.core.policy.ResourceLimits#getMaxInstances()} *
      *         {@link org.omg.dds.core.policy.History#getDepth()}),
      *         then in the situation
      *         where the max samples resource limit is exhausted the Service
@@ -612,13 +602,13 @@
      *         as at least one sample remains for such an instance. If it is
      *         still not possible to make space available to store the
      *         modification, the writer is allowed to block.</li>
-     *     <li>If ({@link ResourceLimits#getMaxSamples()} &lt;
-     *         {@link ResourceLimits#getMaxInstances()}), then the
+     *     <li>If ({@link org.omg.dds.core.policy.ResourceLimits#getMaxSamples()} &lt;
+     *         {@link org.omg.dds.core.policy.ResourceLimits#getMaxInstances()}), then the
      *         DataWriter may block regardless of the HISTORY depth.</li>
      * </ul>
      * 
      * Instead of blocking, the operation is allowed to fail immediately
-     * with {@link OutOfResourcesException} provided the following two
+     * with {@link org.omg.dds.core.OutOfResourcesException} provided the following two
      * conditions are met:
      * 
      * <ol>
@@ -659,9 +649,9 @@
      * This operation performs the same function as
      * {@link #write(Object, InstanceHandle)} except that it also provides
      * the value for the source time stamp that is made available to
-     * {@link DataReader} objects by means of
-     * {@link Sample#getSourceTimestamp()}. See also
-     * {@link DestinationOrder}.
+     * {@link org.omg.dds.sub.DataReader} objects by means of
+     * {@link org.omg.dds.sub.Sample#getSourceTimestamp()}. See also
+     * {@link org.omg.dds.core.policy.DestinationOrder}.
      * 
      * The constraints on the values of the handle parameter and the
      * corresponding error behavior are the same specified for
@@ -693,9 +683,9 @@
      * This operation performs the same function as
      * {@link #write(Object, InstanceHandle)} except that it also provides
      * the value for the source time stamp that is made available to
-     * {@link DataReader} objects by means of
-     * {@link Sample#getSourceTimestamp()}. See also
-     * {@link DestinationOrder}.
+     * {@link org.omg.dds.sub.DataReader} objects by means of
+     * {@link org.omg.dds.sub.Sample#getSourceTimestamp()}. See also
+     * {@link org.omg.dds.core.policy.DestinationOrder}.
      * 
      * The constraints on the values of the handle parameter and the
      * corresponding error behavior are the same specified for
@@ -728,13 +718,13 @@
      * This operation requests the middleware to delete the data (the actual
      * deletion is postponed until there is no more use for that data in the
      * whole system). In general, applications are made aware of the deletion
-     * by means of operations on the {@link DataReader} objects that already
+     * by means of operations on the {@link org.omg.dds.sub.DataReader} objects that already
      * knew that instance. DataReader objects that didn't know the instance
      * will never see it.
      * 
      * When this operation is used, the Service will automatically supply the
      * value of the source time stamp that is made available to DataReader
-     * objects by means of {@link Sample#getSourceTimestamp()}.
+     * objects by means of {@link org.omg.dds.sub.Sample#getSourceTimestamp()}.
      * 
      * The constraints on the values of the instanceHandle parameter and the
      * corresponding error behavior are the same specified for
@@ -759,7 +749,7 @@
      * This operation requests the middleware to delete the data (the actual
      * deletion is postponed until there is no more use for that data in the
      * whole system). In general, applications are made aware of the deletion
-     * by means of operations on the {@link DataReader} objects that already
+     * by means of operations on the {@link org.omg.dds.sub.DataReader} objects that already
      * knew that instance. DataReader objects that didn't know the instance
      * will never see it.
      * 
@@ -769,7 +759,7 @@
      * 
      * When this operation is used, the Service will automatically supply the
      * value of the source time stamp that is made available to DataReader
-     * objects by means of {@link Sample#getSourceTimestamp()}.
+     * objects by means of {@link org.omg.dds.sub.Sample#getSourceTimestamp()}.
      * 
      * The constraints on the values of the instanceHandle parameter and the
      * corresponding error behavior are the same specified for
@@ -796,8 +786,8 @@
      * This operation performs the same functions as
      * {@link #dispose(InstanceHandle, Object)} except that the application
      * provides the value for the source time stamp that is made available to
-     * {@link DataReader} objects by means of
-     * {@link Sample#getSourceTimestamp()}.
+     * {@link org.omg.dds.sub.DataReader} objects by means of
+     * {@link org.omg.dds.sub.Sample#getSourceTimestamp()}.
      * 
      * The constraints on the values of the instanceHandle parameter and the
      * corresponding error behavior are the same specified for
@@ -829,8 +819,8 @@
      * This operation performs the same functions as
      * {@link #dispose(InstanceHandle, Object)} except that the application
      * provides the value for the source time stamp that is made available to
-     * {@link DataReader} objects by means of
-     * {@link Sample#getSourceTimestamp()}.
+     * {@link org.omg.dds.sub.DataReader} objects by means of
+     * {@link org.omg.dds.sub.Sample#getSourceTimestamp()}.
      * 
      * The constraints on the values of the instanceHandle parameter and the
      * corresponding error behavior are the same specified for
Index: org/omg/dds/pub/DataWriterListener.java
===================================================================
--- org/omg/dds/pub/DataWriterListener.java	(revision 197)
+++ org/omg/dds/pub/DataWriterListener.java	(working copy)
@@ -20,7 +20,7 @@
 
 import java.util.EventListener;
 
-import org.omg.dds.core.Entity;
+
 import org.omg.dds.core.status.LivelinessLostEvent;
 import org.omg.dds.core.status.OfferedDeadlineMissedEvent;
 import org.omg.dds.core.status.OfferedIncompatibleQosEvent;
@@ -28,7 +28,7 @@
 
 
 /**
- * Since a {@link DataWriter} is a kind of {@link Entity}, it has the ability
+ * Since a {@link org.omg.dds.pub.DataWriter} is a kind of {@link org.omg.dds.core.Entity}, it has the ability
  * to have a listener associated with it. In this case, the associated
  * listener must be of concrete type DataWriterListener.
  * 
Index: org/omg/dds/pub/Publisher.java
===================================================================
--- org/omg/dds/pub/Publisher.java	(revision 207)
+++ org/omg/dds/pub/Publisher.java	(working copy)
@@ -24,13 +24,9 @@
 
 import org.omg.dds.core.DomainEntity;
 import org.omg.dds.core.Duration;
-import org.omg.dds.core.InconsistentPolicyException;
-import org.omg.dds.core.NotEnabledException;
-import org.omg.dds.core.PreconditionNotMetException;
 import org.omg.dds.core.StatusCondition;
 import org.omg.dds.core.status.Status;
 import org.omg.dds.domain.DomainParticipant;
-import org.omg.dds.sub.DataReader;
 import org.omg.dds.topic.Topic;
 import org.omg.dds.topic.TopicQos;
 
@@ -38,7 +34,7 @@
  * A Publisher is the object responsible for the actual dissemination of
  * publications.
  * 
- * The Publisher acts on the behalf of one or several {@link DataWriter}
+ * The Publisher acts on the behalf of one or several {@link org.omg.dds.pub.DataWriter}
  * objects that belong to it. When it is informed of a change to the data
  * associated with one of its DataWriter objects, it decides when it is
  * appropriate to actually send the data-update message. In making this
@@ -53,8 +49,8 @@
  * {@link org.omg.dds.core.Entity#getListener()},
  * {@link org.omg.dds.core.Entity#enable()},
  * {@link org.omg.dds.core.Entity#getStatusCondition()},
- * {@link #createDataWriter(Topic)}, and {@link Publisher#close()} may fail
- * with the exception {@link NotEnabledException}.
+ * {@link #createDataWriter(Topic)}, and {@link org.omg.dds.pub.Publisher#close()} may fail
+ * with the exception {@link org.omg.dds.core.NotEnabledException}.
  */
 public interface Publisher
 extends DomainEntity<PublisherListener, PublisherQos>
@@ -69,10 +65,10 @@
      * DataWriter is to:
      * 
      * <ul>
-     *     <li>Retrieve the QoS policies on the associated {@link Topic} by
-     *         means of {@link Topic#getQos()}.</li>
+     *     <li>Retrieve the QoS policies on the associated {@link org.omg.dds.topic.Topic} by
+     *         means of {@link org.omg.dds.topic.Topic#getQos()}.</li>
      *     <li>Retrieve the default DataWriter QoS by means of
-     *         {@link Publisher#getDefaultDataWriterQos()}.</li>
+     *         {@link org.omg.dds.pub.Publisher#getDefaultDataWriterQos()}.</li>
      *     <li>Combine those two QoS policies and selectively modify policies
      *         as desired -- see
      *         {@link #copyFromTopicQos(DataWriterQos, TopicQos)}.
@@ -81,8 +77,8 @@
      *         </li>
      * </ul>
      * 
-     * The {@link Topic} passed to this operation must have been created from
-     * the same {@link DomainParticipant} that was used to create this
+     * The {@link org.omg.dds.topic.Topic} passed to this operation must have been created from
+     * the same {@link org.omg.dds.domain.DomainParticipant} that was used to create this
      * Publisher. If the Topic was created from a different
      * DomainParticipant, the operation will fail.
      * 
@@ -99,10 +95,10 @@
      * DataWriter is to:
      * 
      * <ul>
-     *     <li>Retrieve the QoS policies on the associated {@link Topic} by
-     *         means of {@link Topic#getQos()}.</li>
+     *     <li>Retrieve the QoS policies on the associated {@link org.omg.dds.topic.Topic} by
+     *         means of {@link org.omg.dds.topic.Topic#getQos()}.</li>
      *     <li>Retrieve the default DataWriter QoS by means of
-     *         {@link Publisher#getDefaultDataWriterQos()}.</li>
+     *         {@link org.omg.dds.pub.Publisher#getDefaultDataWriterQos()}.</li>
      *     <li>Combine those two QoS policies and selectively modify policies
      *         as desired -- see
      *         {@link #copyFromTopicQos(DataWriterQos, TopicQos)}.
@@ -111,8 +107,8 @@
      *         </li>
      * </ul>
      * 
-     * The {@link Topic} passed to this operation must have been created from
-     * the same {@link DomainParticipant} that was used to create this
+     * The {@link org.omg.dds.topic.Topic} passed to this operation must have been created from
+     * the same {@link org.omg.dds.domain.DomainParticipant} that was used to create this
      * Publisher. If the Topic was created from a different
      * DomainParticipant, the operation will fail.
      * 
@@ -133,8 +129,8 @@
     // --- Lookup operations: ------------------------------------------------
 
     /**
-     * This operation retrieves a previously created {@link DataWriter}
-     * belonging to the Publisher that is attached to a {@link Topic} with a
+     * This operation retrieves a previously created {@link org.omg.dds.pub.DataWriter}
+     * belonging to the Publisher that is attached to a {@link org.omg.dds.topic.Topic} with a
      * matching name. If no such DataWriter exists, the operation will return
      * null.
      * 
@@ -147,9 +143,9 @@
     public <TYPE> DataWriter<TYPE> lookupDataWriter(String topicName);
 
     /**
-     * This operation retrieves a previously created {@link DataWriter}
+     * This operation retrieves a previously created {@link org.omg.dds.pub.DataWriter}
      * belonging to the Publisher that is attached to the given
-     * {@link Topic}. If no such DataWriter exists, the operation will return
+     * {@link org.omg.dds.topic.Topic}. If no such DataWriter exists, the operation will return
      * null.
      * 
      * If multiple DataWriters attached to the Publisher satisfy this
@@ -165,7 +161,7 @@
     /**
      * This operation closes all the entities that were created by means of
      * the "create" operations on the Publisher. That is, it closes all
-     * contained {@link DataWriter} objects.
+     * contained {@link org.omg.dds.pub.DataWriter} objects.
      * 
      * @throws  PreconditionNotMetException     if the any of the contained
      *          entities is in a state where it cannot be deleted.
@@ -210,7 +206,7 @@
 
     /**
      * This operation requests that the application will begin a 'coherent
-     * set' of modifications using {@link DataWriter} objects attached to the
+     * set' of modifications using {@link org.omg.dds.pub.DataWriter} objects attached to the
      * Publisher. The 'coherent set' will be completed by a matching call to
      * {@link #endCoherentChanges()}.
      * 
@@ -258,8 +254,8 @@
 
     /**
      * This operation blocks the calling thread until either all data
-     * written by the reliable {@link DataWriter} entities is acknowledged by
-     * all matched reliable {@link DataReader} entities, or else the duration
+     * written by the reliable {@link org.omg.dds.pub.DataWriter} entities is acknowledged by
+     * all matched reliable {@link org.omg.dds.sub.DataReader} entities, or else the duration
      * specified elapses, whichever happens first.
      * 
      * @throws  TimeoutException        if maxWait elapsed before all the
@@ -270,8 +266,8 @@
 
     /**
      * This operation blocks the calling thread until either all data
-     * written by the reliable {@link DataWriter} entities is acknowledged by
-     * all matched reliable {@link DataReader} entities, or else the duration
+     * written by the reliable {@link org.omg.dds.pub.DataWriter} entities is acknowledged by
+     * all matched reliable {@link org.omg.dds.sub.DataReader} entities, or else the duration
      * specified elapses, whichever happens first.
      * 
      * @throws  TimeoutException        if maxWait elapsed before all the
@@ -283,7 +279,7 @@
     /**
      * This operation retrieves the default value of the DataWriter QoS, that
      * is, the QoS policies which will be used for newly created
-     * {@link DataWriter} entities in the case where the QoS policies are
+     * {@link org.omg.dds.pub.DataWriter} entities in the case where the QoS policies are
      * defaulted in the {@link #createDataWriter(Topic)} operation.
      * 
      * The values retrieved will match the set of values specified on the
@@ -298,7 +294,7 @@
 
     /**
      * This operation sets a default value of the DataWriter QoS policies,
-     * which will be used for newly created {@link DataWriter} entities in
+     * which will be used for newly created {@link org.omg.dds.pub.DataWriter} entities in
      * the case where the QoS policies are defaulted in the
      * {@link #createDataWriter(Topic)} operation.
      * 
@@ -311,13 +307,13 @@
     public void setDefaultDataWriterQos(DataWriterQos qos);
 
     /**
-     * This operation copies the policies in the {@link Topic} QoS to the
-     * corresponding policies in the {@link DataWriter} QoS (replacing values
+     * This operation copies the policies in the {@link org.omg.dds.topic.Topic} QoS to the
+     * corresponding policies in the {@link org.omg.dds.pub.DataWriter} QoS (replacing values
      * in the DataWriter QoS, if present).
      * 
      * This is a "convenience" operation most useful in combination with the
      * operations {@link #getDefaultDataWriterQos()} and
-     * {@link Topic#getQos()}. The operation can be used to merge the
+     * {@link org.omg.dds.topic.Topic#getQos()}. The operation can be used to merge the
      * DataWriter default QoS policies with the corresponding ones on the
      * Topic. The resulting QoS can then be used to create a new DataWriter
      * or set its QoS.
Index: org/omg/dds/domain/DomainParticipant.java
===================================================================
--- org/omg/dds/domain/DomainParticipant.java	(revision 207)
+++ org/omg/dds/domain/DomainParticipant.java	(working copy)
@@ -26,23 +26,14 @@
 
 import org.omg.dds.core.Duration;
 import org.omg.dds.core.Entity;
-import org.omg.dds.core.InconsistentPolicyException;
 import org.omg.dds.core.InstanceHandle;
 import org.omg.dds.core.ModifiableTime;
-import org.omg.dds.core.OutOfResourcesException;
-import org.omg.dds.core.PreconditionNotMetException;
 import org.omg.dds.core.StatusCondition;
 import org.omg.dds.core.Time;
-import org.omg.dds.core.policy.UserData;
 import org.omg.dds.core.status.Status;
-import org.omg.dds.pub.DataWriter;
 import org.omg.dds.pub.Publisher;
 import org.omg.dds.pub.PublisherListener;
 import org.omg.dds.pub.PublisherQos;
-import org.omg.dds.sub.DataReader;
-import org.omg.dds.sub.QueryCondition;
-import org.omg.dds.sub.ReadCondition;
-import org.omg.dds.sub.Sample;
 import org.omg.dds.sub.Subscriber;
 import org.omg.dds.sub.SubscriberListener;
 import org.omg.dds.sub.SubscriberQos;
@@ -61,9 +52,9 @@
 /**
  * The DomainParticipant object plays several roles:
  * <ul>
- * <li>It acts as a container for all other {@link Entity} objects.</li>
- * <li>It acts as factory for the {@link Publisher}, {@link Subscriber},
- *     {@link Topic}, {@link ContentFilteredTopic}, and {@link MultiTopic}
+ * <li>It acts as a container for all other {@link org.omg.dds.core.Entity} objects.</li>
+ * <li>It acts as factory for the {@link org.omg.dds.pub.Publisher}, {@link org.omg.dds.sub.Subscriber},
+ *     {@link org.omg.dds.topic.Topic}, {@link org.omg.dds.topic.ContentFilteredTopic}, and {@link org.omg.dds.topic.MultiTopic}
  *     objects.</li>
  * <li>It represents the participation of the application on a communication
  *     plane that isolates applications running on the same set of physical
@@ -154,12 +145,12 @@
 
     /**
      * This operation allows access to the built-in Subscriber. Each
-     * DomainParticipant contains several built-in {@link Topic} objects as
-     * well as corresponding {@link DataReader} objects to access them. All
+     * DomainParticipant contains several built-in {@link org.omg.dds.topic.Topic} objects as
+     * well as corresponding {@link org.omg.dds.sub.DataReader} objects to access them. All
      * these DataReader objects belong to a single built-in Subscriber.
      * 
      * The built-in Topics are used to communicate information about other
-     * DomainParticipant, Topic, {@link DataReader}, and {@link DataWriter}
+     * DomainParticipant, Topic, {@link org.omg.dds.sub.DataReader}, and {@link org.omg.dds.pub.DataWriter}
      * objects. 
      */
     public Subscriber getBuiltinSubscriber();
@@ -178,7 +169,7 @@
      * @param   type        The type of all samples to be published and
      *                      subscribed over the new Topic. The Service will
      *                      attempt to locate an appropriate
-     *                      {@link TypeSupport} instance based on this type.
+     *                      {@link org.omg.dds.type.TypeSupport} instance based on this type.
      */
     public <TYPE> Topic<TYPE> createTopic(
             String topicName,
@@ -195,7 +186,7 @@
      * @param   type        The type of all samples to be published and
      *                      subscribed over the new Topic. The Service will
      *                      attempt to locate an appropriate
-     *                      {@link TypeSupport} instance based on this type.
+     *                      {@link org.omg.dds.type.TypeSupport} instance based on this type.
      * @param   qos         The desired QoS policies. If the specified QoS
      *                      policies are not consistent, the operation will
      *                      fail and no Publisher will be created.
@@ -221,7 +212,7 @@
      * factory.
      * 
      * @param   topicName   The name of the new Topic.
-     * @param   type        A {@link TypeSupport} representing the type of
+     * @param   type        A {@link org.omg.dds.type.TypeSupport} representing the type of
      *                      all samples to be published and subscribed over
      *                      the new Topic.
      */
@@ -237,7 +228,7 @@
      * factory.
      * 
      * @param   topicName   The name of the new Topic.
-     * @param   type        A {@link TypeSupport} representing the type of
+     * @param   type        A {@link org.omg.dds.type.TypeSupport} representing the type of
      *                      all samples to be published and subscribed over
      *                      the new Topic.
      * @param   qos         The desired QoS policies. If the specified QoS
@@ -265,10 +256,10 @@
      * factory.
      * 
      * @param   topicName   The name of the new Topic.
-     * @param   type        A {@link DynamicType} of all samples to be published and
+     * @param   type        A {@link org.omg.dds.type.dynamic.DynamicType} of all samples to be published and
      *                      subscribed over the new Topic. The Service will
      *                      attempt to locate an appropriate
-     *                      {@link TypeSupport} instance based on this type.
+     *                      {@link org.omg.dds.type.TypeSupport} instance based on this type.
      */
     public Topic<DynamicType> createTopic(
             String topicName,
@@ -282,10 +273,10 @@
      * factory.
      * 
      * @param   topicName   The name of the new Topic.
-     * @param   type        A {@link DynamicType} of all samples to be published and
+     * @param   type        A {@link org.omg.dds.type.dynamic.DynamicType} of all samples to be published and
      *                      subscribed over the new Topic. The Service will
      *                      attempt to locate an appropriate
-     *                      {@link TypeSupport} instance based on this type.
+     *                      {@link org.omg.dds.type.TypeSupport} instance based on this type.
      * @param   qos         The desired QoS policies. If the specified QoS
      *                      policies are not consistent, the operation will
      *                      fail and no Publisher will be created.
@@ -311,10 +302,10 @@
      * factory.
      * 
      * @param   topicName    The name of the new Topic.
-     * @param   type         A {@link DynamicType} representing the type of
+     * @param   type         A {@link org.omg.dds.type.dynamic.DynamicType} representing the type of
      *                       all samples to be published and subscribed over
      *                       the new Topic.
-     * @param   typeSupport  A {@link TypeSupport} for {@link DynamicType}.
+     * @param   typeSupport  A {@link org.omg.dds.type.TypeSupport} for {@link org.omg.dds.type.dynamic.DynamicType}.
      */
     public Topic<DynamicType> createTopic(
             String topicName,
@@ -329,8 +320,8 @@
      * factory.
      * 
      * @param   topicName   The name of the new Topic.
-     * @param   type        A {@link DynamicType}
-     * @param   typeSupport A {@link TypeSupport} for {@link DynamicType}
+     * @param   type        A {@link org.omg.dds.type.dynamic.DynamicType}
+     * @param   typeSupport A {@link org.omg.dds.type.TypeSupport} for {@link org.omg.dds.type.dynamic.DynamicType}
      * @param   qos         The desired QoS policies. If the specified QoS
      *                      policies are not consistent, the operation will
      *                      fail and no Publisher will be created.
@@ -365,13 +356,13 @@
      * locally available.
      * 
      * A Topic obtained by means of findTopic must also be closed by means of
-     * {@link Topic#close()} so that the local resources can be released. If
+     * {@link org.omg.dds.topic.Topic#close()} so that the local resources can be released. If
      * a Topic is obtained multiple times by means of findTopic or
      * {@link #createTopic(String, Class)}, it must also be closed that same
      * number of times.
      * 
      * Regardless of whether the middleware chooses to propagate topics, the
-     * {@link Topic#close()} operation disposes of only the local proxy.
+     * {@link org.omg.dds.topic.Topic#close()} operation disposes of only the local proxy.
      * 
      * @return  a non-null Topic.
      * 
@@ -399,13 +390,13 @@
      * locally available.
      * 
      * A Topic obtained by means of findTopic must also be closed by means of
-     * {@link Topic#close()} so that the local resources can be released. If
+     * {@link org.omg.dds.topic.Topic#close()} so that the local resources can be released. If
      * a Topic is obtained multiple times by means of findTopic or
      * {@link #createTopic(String, Class)}, it must also be closed that same
      * number of times.
      * 
      * Regardless of whether the middleware chooses to propagate topics, the
-     * {@link Topic#close()} operation disposes of only the local proxy.
+     * {@link org.omg.dds.topic.Topic#close()} operation disposes of only the local proxy.
      * 
      * @return  a non-null Topic.
      * 
@@ -428,13 +419,13 @@
      * If a TopicDescription of the same name already exists, it gives access
      * to it, otherwise it returns null. The operation never blocks.
      * 
-     * The operation may be used to locate any locally-created {@link Topic},
-     * {@link ContentFilteredTopic}, or {@link MultiTopic} object.
+     * The operation may be used to locate any locally-created {@link org.omg.dds.topic.Topic},
+     * {@link org.omg.dds.topic.ContentFilteredTopic}, or {@link org.omg.dds.topic.MultiTopic} object.
      * 
      * Unlike {@link #findTopic(String, Duration)}, the operation searches
      * only among the locally created topics. Therefore, it should never
      * create a new TopicDescription. The TopicDescription returned does not
-     * require an extra {@link TopicDescription#close()}. It is still
+     * require an extra {@link org.omg.dds.topic.TopicDescription#close()}. It is still
      * possible to close the TopicDescription returned by this method,
      * provided it has no readers or writers, but then it is really closed
      * and subsequent lookups will fail.
@@ -482,7 +473,7 @@
      *                  MultiTopic.
      * @param   name    The name of the new MultiTopic.
      * @param   type    The resulting type. The Service will attempt to
-     *                  locate an appropriate {@link TypeSupport} instance
+     *                  locate an appropriate {@link org.omg.dds.type.TypeSupport} instance
      *                  based on this type.
      * @param   subscriptionExpression  The list of topics and the logic used
      *          to combine filter and re-arrange the information from each
@@ -504,7 +495,7 @@
      * @param   <TYPE>  The type of all samples subscribed to with the new
      *                  MultiTopic.
      * @param   name    The name of the new MultiTopic.
-     * @param   type    A {@link TypeSupport} representing the resulting
+     * @param   type    A {@link org.omg.dds.type.TypeSupport} representing the resulting
      *                  type.
      * @param   subscriptionExpression  The list of topics and the logic used
      *          to combine filter and re-arrange the information from each
@@ -520,8 +511,8 @@
     /**
      * This operation deletes all the entities that were created by means of
      * the "create" operations on the DomainParticipant. That is, it deletes
-     * all contained {@link Publisher}, {@link Subscriber}, {@link Topic},
-     * {@link ContentFilteredTopic}, and {@link MultiTopic} objects.
+     * all contained {@link org.omg.dds.pub.Publisher}, {@link org.omg.dds.sub.Subscriber}, {@link org.omg.dds.topic.Topic},
+     * {@link org.omg.dds.topic.ContentFilteredTopic}, and {@link org.omg.dds.topic.MultiTopic} objects.
      * 
      * Prior to deleting each contained entity, this operation will
      * recursively call the corresponding closeContainedEntities operation on
@@ -529,8 +520,8 @@
      * recursively. In this manner the operation closeContainedEntities on
      * the DomainParticipant will end up deleting all the entities
      * recursively contained in the DomainParticipant, that is also the
-     * {@link DataWriter}, {@link DataReader}, as well as the
-     * {@link QueryCondition} and {@link ReadCondition} objects belonging to
+     * {@link org.omg.dds.pub.DataWriter}, {@link org.omg.dds.sub.DataReader}, as well as the
+     * {@link org.omg.dds.sub.QueryCondition} and {@link org.omg.dds.sub.ReadCondition} objects belonging to
      * the contained DataReaders.
      * 
      * Once closeContainedEntities returns successfully, the application may
@@ -546,21 +537,21 @@
      * This operation allows an application to instruct the Service to
      * locally ignore a remote domain participant. From that point onwards,
      * the Service will locally behave as if the remote participant did not
-     * exist. This means it will ignore any {@link Topic}, publication, or
+     * exist. This means it will ignore any {@link org.omg.dds.topic.Topic}, publication, or
      * subscription that originates on that domain participant.
      * 
      * This operation can be used, in conjunction with the discovery of
      * remote participants offered by means of the "DCPSParticipant" built-in
      * Topic, to provide, for example, access control. Application data can
      * be associated with a DomainParticipant by means of the
-     * {@link UserData}. This application data is propagated as a
+     * {@link org.omg.dds.core.policy.UserData}. This application data is propagated as a
      * field in the built-in topic and can be used by an application to
      * implement its own access control policy.
      * 
      * The domain participant to ignore is identified by the handle argument.
-     * This handle is the one that appears in the {@link Sample} retrieved
+     * This handle is the one that appears in the {@link org.omg.dds.sub.Sample} retrieved
      * when reading the data samples available for the built-in DataReader to
-     * the "DCPSParticipant" topic. The built-in {@link DataReader} is read
+     * the "DCPSParticipant" topic. The built-in {@link org.omg.dds.sub.DataReader} is read
      * with the same read/take operations used for any DataReader.
      * 
      * This operation is not required to be reversible. The Service offers no
@@ -574,7 +565,7 @@
 
     /**
      * This operation allows an application to instruct the Service to
-     * locally ignore a {@link Topic}. This means it will locally ignore any
+     * locally ignore a {@link org.omg.dds.topic.Topic}. This means it will locally ignore any
      * publication or subscription to the Topic.
      * 
      * This operation can be used to save local resources when the
@@ -582,8 +573,8 @@
      * under certain topics.
      * 
      * The Topic to ignore is identified by the handle argument. This handle
-     * is the one that appears in the {@link Sample} retrieved when reading
-     * the data samples from the built-in {@link DataReader} to the
+     * is the one that appears in the {@link org.omg.dds.sub.Sample} retrieved when reading
+     * the data samples from the built-in {@link org.omg.dds.sub.DataReader} to the
      * "DCPSTopic" topic.
      * 
      * This operation is not required to be reversible. The Service offers no
@@ -599,12 +590,12 @@
      * This operation allows an application to instruct the Service to
      * locally ignore a remote publication; a publication is defined by the
      * association of a topic name, and user data and partition set on the
-     * {@link Publisher}. After this call, any data written related to that
+     * {@link org.omg.dds.pub.Publisher}. After this call, any data written related to that
      * publication will be ignored.
      * 
-     * The {@link DataWriter} to ignore is identified by the handle argument.
-     * This handle is the one that appears in the {@link Sample} retrieved
-     * when reading the data samples from the built-in {@link DataReader} to
+     * The {@link org.omg.dds.pub.DataWriter} to ignore is identified by the handle argument.
+     * This handle is the one that appears in the {@link org.omg.dds.sub.Sample} retrieved
+     * when reading the data samples from the built-in {@link org.omg.dds.sub.DataReader} to
      * the "DCPSPublication" topic.
      * 
      * This operation is not required to be reversible. The Service offers no
@@ -620,11 +611,11 @@
      * This operation allows an application to instruct the Service to
      * locally ignore a remote subscription; a subscription is defined by the
      * association of a topic name, and user data and partition set on the
-     * {@link Subscriber}. After this call, any data received related to that
+     * {@link org.omg.dds.sub.Subscriber}. After this call, any data received related to that
      * subscription will be ignored.
      * 
-     * The {@link DataReader} to ignore is identified by the handle argument.
-     * This handle is the one that appears in the {@link Sample} retrieved
+     * The {@link org.omg.dds.sub.DataReader} to ignore is identified by the handle argument.
+     * This handle is the one that appears in the {@link org.omg.dds.sub.Sample} retrieved
      * when reading the data samples from the built-in DataReader to the
      * "DCPSSubscription" topic.
      * 
@@ -652,14 +643,14 @@
      * Service that the entity remains active.
      * 
      * This operation needs to only be used if the DomainParticipant contains
-     * {@link DataWriter} entities with the
+     * {@link org.omg.dds.pub.DataWriter} entities with the
      * {@link org.omg.dds.core.policy.Liveliness#getKind()} set to
      * {@link org.omg.dds.core.policy.Liveliness.Kind#MANUAL_BY_PARTICIPANT}
      * and it only
      * affects the liveliness of those DataWriter entities. Otherwise, it has
      * no effect.
      * 
-     * <b>Note</b> - Writing data via the {@link DataWriter#write(Object)}
+     * <b>Note</b> - Writing data via the {@link org.omg.dds.pub.DataWriter#write(Object)}
      * operation on a DataWriter asserts liveliness on the DataWriter itself
      * and its DomainParticipant. Consequently the use of assertLiveliness is
      * only needed if the application is not writing data regularly.
@@ -669,7 +660,7 @@
     /**
      * This operation retrieves the default value of the Publisher QoS, that
      * is, the QoS policies which will be used for newly created
-     * {@link Publisher} entities in the case where the QoS policies are
+     * {@link org.omg.dds.pub.Publisher} entities in the case where the QoS policies are
      * defaulted in the {@link #createPublisher()} operation.
      * 
      * The values retrieved will match the set of values specified on the
@@ -683,11 +674,11 @@
 
     /**
      * This operation sets a default value of the Publisher QoS policies,
-     * which will be used for newly created {@link Publisher} entities in the
+     * which will be used for newly created {@link org.omg.dds.pub.Publisher} entities in the
      * case where the QoS policies are defaulted in the
      * {@link #createPublisher()} operation.
      * 
-     * @throws  InconsistentPolicyException     if the resulting policies are
+     * @throws  InconsistentPolicyException if the resulting policies are
      *          not self consistent; in that case, the operation will have no
      *          effect.
      *
@@ -698,7 +689,7 @@
     /**
      * This operation retrieves the default value of the Subscriber QoS, that
      * is, the QoS policies which will be used for newly created
-     * {@link Subscriber} entities in the case where the QoS policies are
+     * {@link org.omg.dds.sub.Subscriber} entities in the case where the QoS policies are
      * defaulted in the {@link #createSubscriber()} operation.
      * 
      * The values retrieved will match the set of values specified on the
@@ -713,7 +704,7 @@
 
     /**
      * This operation sets a default value of the Subscriber QoS policies
-     * that will be used for newly created {@link Subscriber} entities in the
+     * that will be used for newly created {@link org.omg.dds.sub.Subscriber} entities in the
      * case where the QoS policies are defaulted in the
      * {@link #createSubscriber()} operation.
      * 
@@ -727,7 +718,7 @@
 
     /**
      * This operation retrieves the default value of the Topic QoS, that is,
-     * the QoS policies which will be used for newly created {@link Topic}
+     * the QoS policies which will be used for newly created {@link org.omg.dds.topic.Topic}
      * entities in the case where the QoS policies are defaulted in the
      * {@link #createTopic(String, Class)} operation.
      * 
@@ -742,7 +733,7 @@
 
     /**
      * This operation sets a default value of the Topic QoS policies, which
-     * will be used for newly created {@link Topic} entities in the case
+     * will be used for newly created {@link org.omg.dds.topic.Topic} entities in the case
      * where the QoS policies are defaulted in the
      * {@link #createTopic(String, Class)} operation.
      * 
@@ -798,7 +789,7 @@
             InstanceHandle participantHandle);
 
     /**
-     * This operation retrieves the list of {@link Topic}s that have been
+     * This operation retrieves the list of {@link org.omg.dds.topic.Topic}s that have been
      * discovered in the domain and that the application has not indicated
      * should be "ignored" by means of the
      * {@link #ignoreTopic(InstanceHandle)} operation.
@@ -814,7 +805,7 @@
     public Set<InstanceHandle> getDiscoveredTopics();
 
     /**
-     * This operation retrieves information on a {@link Topic} that has
+     * This operation retrieves information on a {@link org.omg.dds.topic.Topic} that has
      * been discovered on the network. The topic must be in the same
      * domain as the participant on which this operation is invoked and must
      * not have been "ignored" by means of the
@@ -843,16 +834,16 @@
 
     /**
      * This operation checks whether or not the given handle represents an
-     * {@link Entity} that was created from the DomainParticipant. The
+     * {@link org.omg.dds.core.Entity} that was created from the DomainParticipant. The
      * containment applies recursively. That is, it applies both to entities
-     * ({@link TopicDescription}, {@link Publisher}, or {@link Subscriber})
+     * ({@link org.omg.dds.topic.TopicDescription}, {@link org.omg.dds.pub.Publisher}, or {@link org.omg.dds.sub.Subscriber})
      * created directly using the DomainParticipant as well as entities
      * created using a contained Publisher or Subscriber as the factory, and
      * so forth.
      * 
      * The instance handle for an Entity may be obtained from built-in topic
      * data, from various statuses, or from the Entity operation
-     * {@link Entity#getInstanceHandle()}.
+     * {@link org.omg.dds.core.Entity#getInstanceHandle()}.
      */
     public boolean containsEntity(InstanceHandle handle);
 
Index: org/omg/dds/domain/DomainParticipantListener.java
===================================================================
--- org/omg/dds/domain/DomainParticipantListener.java	(revision 197)
+++ org/omg/dds/domain/DomainParticipantListener.java	(working copy)
@@ -18,7 +18,6 @@
 
 package org.omg.dds.domain;
 
-import org.omg.dds.core.DomainEntity;
 import org.omg.dds.core.status.InconsistentTopicEvent;
 import org.omg.dds.pub.PublisherListener;
 import org.omg.dds.sub.SubscriberListener;
@@ -26,12 +25,12 @@
 
 /**
  * This is the interface that can be implemented by an application-provided
- * class and then registered with the {@link DomainParticipant} such that the
+ * class and then registered with the {@link org.omg.dds.domain.DomainParticipant} such that the
  * application can be notified by the DCPS Service of relevant status changes.
  * 
  * The purpose of the DomainParticipantListener is to be the listener of last
  * resort that is notified of all status changes not captured by more specific
- * listeners attached to the {@link DomainEntity} objects. When a relevant
+ * listeners attached to the {@link org.omg.dds.core.DomainEntity} objects. When a relevant
  * status change occurs, the DCPS Service will first attempt to notify the
  * listener attached to the concerned DomainEntity if one is installed.
  * Otherwise, the DCPS Service will notify the Listener attached to the
Index: org/omg/dds/domain/DomainParticipantFactory.java
===================================================================
--- org/omg/dds/domain/DomainParticipantFactory.java	(revision 202)
+++ org/omg/dds/domain/DomainParticipantFactory.java	(working copy)
@@ -21,16 +21,14 @@
 import java.util.Collection;
 
 import org.omg.dds.core.DDSObject;
-import org.omg.dds.core.Entity;
-import org.omg.dds.core.InconsistentPolicyException;
 import org.omg.dds.core.ServiceEnvironment;
 import org.omg.dds.core.status.Status;
 
 
 /**
  * The sole purpose of this class is to allow the creation and destruction of
- * {@link DomainParticipant} objects. DomainParticipantFactory itself has no
- * factory. It is a pre-existing per-{@link ServiceEnvironment} singleton
+ * {@link org.omg.dds.domain.DomainParticipant} objects. DomainParticipantFactory itself has no
+ * factory. It is a pre-existing per-{@link org.omg.dds.core.ServiceEnvironment} singleton
  * object that can be accessed by means of the
  * {@link #getInstance(ServiceEnvironment)} operation.
  */
@@ -128,7 +126,7 @@
      * for entities.
      * 
      * Note that despite having QoS, the DomainParticipantFactory is not an
-     * {@link Entity}.
+     * {@link org.omg.dds.core.Entity}.
      * 
      * @throws  InconsistentPolicyException     if the resulting policies are
      *          not self consistent; in that case, the operation will have no
@@ -141,7 +139,7 @@
     /**
      * This operation retrieves the default value of the DomainParticipant
      * QoS, that is, the QoS policies which will be used for newly created
-     * {@link DomainParticipant} entities in the case where the QoS policies
+     * {@link org.omg.dds.domain.DomainParticipant} entities in the case where the QoS policies
      * are defaulted in the {@link #createParticipant()} operation.
      * 
      * The values retrieved will match the set of values specified on the
@@ -157,7 +155,7 @@
     /**
      * This operation sets a default value of the DomainParticipant QoS
      * policies which will be used for newly created
-     * {@link DomainParticipant} entities in the case where the QoS policies
+     * {@link org.omg.dds.domain.DomainParticipant} entities in the case where the QoS policies
      * are defaulted in the {@link #createParticipant()} operation.
      * 
      * @throws  InconsistentPolicyException     if the resulting policies are
Index: org/omg/dds/core/EntityQos.java
===================================================================
--- org/omg/dds/core/EntityQos.java	(revision 197)
+++ org/omg/dds/core/EntityQos.java	(working copy)
@@ -22,12 +22,6 @@
 import java.util.Map;
 
 import org.omg.dds.core.policy.QosPolicy;
-import org.omg.dds.domain.DomainParticipant;
-import org.omg.dds.pub.DataWriter;
-import org.omg.dds.pub.Publisher;
-import org.omg.dds.sub.DataReader;
-import org.omg.dds.sub.Subscriber;
-import org.omg.dds.topic.Topic;
 import org.omg.dds.type.Extensibility;
 
 
@@ -35,15 +29,15 @@
  * The Data-Distribution Service (DDS) relies on the use of QoS. A QoS
  * (Quality of Service) is a set of characteristics that controls some aspect
  * of the behavior of the DDS Service. QoS is comprised of individual QoS
- * policies (objects of type deriving from {@link QosPolicy}).
+ * policies (objects of type deriving from {@link org.omg.dds.core.policy.QosPolicy}).
  * 
  * QoS (i.e., a collection of QosPolicy objects) may be associated with all
- * {@link Entity} objects in the system such as {@link Topic},
- * {@link DataWriter}, {@link DataReader}, {@link Publisher},
- * {@link Subscriber}, and {@link DomainParticipant}.
+ * {@link org.omg.dds.core.Entity} objects in the system such as {@link org.omg.dds.topic.Topic},
+ * {@link org.omg.dds.pub.DataWriter}, {@link org.omg.dds.sub.DataReader}, {@link org.omg.dds.pub.Publisher},
+ * {@link org.omg.dds.sub.Subscriber}, and {@link org.omg.dds.domain.DomainParticipant}.
  * 
  * Some QosPolicy values may not be consistent with other ones. When a set of
- * QosPolicy is passed ({@link Entity#setQos(EntityQos)} operations), the set
+ * QosPolicy is passed ({@link org.omg.dds.core.Entity#setQos(EntityQos)} operations), the set
  * resulting from adding the new policies on top of the previous is checked
  * for consistency. If the resulting QoS is inconsistent, the change of QoS
  * operation fails and the previous values are retained.
Index: org/omg/dds/core/DDSObject.java
===================================================================
--- org/omg/dds/core/DDSObject.java	(revision 197)
+++ org/omg/dds/core/DDSObject.java	(working copy)
@@ -24,7 +24,7 @@
  */
 public interface DDSObject {
     /**
-     * @return  the {@link ServiceEnvironment} object that directly or
+     * @return  the {@link org.omg.dds.core.ServiceEnvironment} object that directly or
      *          indirectly was used to create this object.
      */
     public ServiceEnvironment getEnvironment();
Index: org/omg/dds/core/status/RequestedDeadlineMissedStatus.java
===================================================================
--- org/omg/dds/core/status/RequestedDeadlineMissedStatus.java	(revision 197)
+++ org/omg/dds/core/status/RequestedDeadlineMissedStatus.java	(working copy)
@@ -19,13 +19,11 @@
 package org.omg.dds.core.status;
 
 import org.omg.dds.core.InstanceHandle;
-import org.omg.dds.core.policy.Deadline;
-import org.omg.dds.sub.DataReader;
 
 
 /**
- * The deadline that the {@link DataReader} was expecting through its
- * {@link Deadline} was not respected for a specific instance.
+ * The deadline that the {@link org.omg.dds.sub.DataReader} was expecting through its
+ * {@link org.omg.dds.core.policy.Deadline} was not respected for a specific instance.
  *
  * @see RequestedDeadlineMissedEvent
  * @see OfferedDeadlineMissedStatus
@@ -46,7 +44,7 @@
 
     /**
      * Total cumulative number of missed deadlines detected for any instance
-     * read by the {@link DataReader}. Missed deadlines accumulate; that is,
+     * read by the {@link org.omg.dds.sub.DataReader}. Missed deadlines accumulate; that is,
      * each deadline period the totalCount will be incremented by one for
      * each instance for which data was not received.
      */
@@ -59,7 +57,7 @@
     public abstract int getTotalCountChange();
 
     /**
-     * Handle to the last instance in the {@link DataReader} for which a
+     * Handle to the last instance in the {@link org.omg.dds.sub.DataReader} for which a
      * deadline was detected.
      */
     public abstract InstanceHandle getLastInstanceHandle();
Index: org/omg/dds/core/status/PublicationMatchedEvent.java
===================================================================
--- org/omg/dds/core/status/PublicationMatchedEvent.java	(revision 197)
+++ org/omg/dds/core/status/PublicationMatchedEvent.java	(working copy)
@@ -19,16 +19,14 @@
 package org.omg.dds.core.status;
 
 import org.omg.dds.pub.DataWriter;
-import org.omg.dds.sub.DataReader;
-import org.omg.dds.topic.Topic;
 
 
 /**
- * The {@link DataWriter} has found a {@link DataReader} that matches the
- * {@link Topic} and has compatible QoS, or has ceased to be matched with a
+ * The {@link org.omg.dds.pub.DataWriter} has found a {@link org.omg.dds.sub.DataReader} that matches the
+ * {@link org.omg.dds.topic.Topic} and has compatible QoS, or has ceased to be matched with a
  * DataReader that was previously considered to be matched.
  *
- * @param <TYPE>    The data type of the source {@link DataWriter}.
+ * @param <TYPE>    The data type of the source {@link org.omg.dds.pub.DataWriter}.
  * 
  * @see PublicationMatchedStatus
  * @see SubscriptionMatchedEvent
Index: org/omg/dds/core/status/PublicationMatchedStatus.java
===================================================================
--- org/omg/dds/core/status/PublicationMatchedStatus.java	(revision 197)
+++ org/omg/dds/core/status/PublicationMatchedStatus.java	(working copy)
@@ -19,14 +19,12 @@
 package org.omg.dds.core.status;
 
 import org.omg.dds.core.InstanceHandle;
-import org.omg.dds.pub.DataWriter;
-import org.omg.dds.sub.DataReader;
-import org.omg.dds.topic.Topic;
 
 
+
 /**
- * The {@link DataWriter} has found a {@link DataReader} that matches the
- * {@link Topic} and has compatible QoS, or has ceased to be matched with a
+ * The {@link org.omg.dds.pub.DataWriter} has found a {@link org.omg.dds.sub.DataReader} that matches the
+ * {@link org.omg.dds.topic.Topic} and has compatible QoS, or has ceased to be matched with a
  * DataReader that was previously considered to be matched.
  *
  * @see PublicationMatchedEvent
@@ -47,9 +45,9 @@
     // -----------------------------------------------------------------------
 
     /**
-     * Total cumulative count the concerned {@link DataWriter} discovered a
-     * "match" with a {@link DataReader}. That is, it found a DataReader for
-     * the same {@link Topic} with a requested QoS that is compatible with
+     * Total cumulative count the concerned {@link org.omg.dds.pub.DataWriter} discovered a
+     * "match" with a {@link org.omg.dds.sub.DataReader}. That is, it found a DataReader for
+     * the same {@link org.omg.dds.topic.Topic} with a requested QoS that is compatible with
      * that offered by the DataWriter.
      */
     public abstract int getTotalCount();
@@ -61,8 +59,8 @@
     public abstract int getTotalCountChange();
 
     /**
-     * The number of {@link DataReader}s currently matched to the concerned
-     * {@link DataWriter}.
+     * The number of {@link org.omg.dds.sub.DataReader}s currently matched to the concerned
+     * {@link org.omg.dds.pub.DataWriter}.
      */
     public abstract int getCurrentCount();
 
@@ -73,8 +71,8 @@
     public abstract int getCurrentCountChange();
 
     /**
-     * Handle to the last {@link DataReader} that matched the
-     * {@link DataWriter}, causing the status to change.
+     * Handle to the last {@link org.omg.dds.sub.DataReader} that matched the
+     * {@link org.omg.dds.pub.DataWriter}, causing the status to change.
      */
     public abstract InstanceHandle getLastSubscriptionHandle();
 }
Index: org/omg/dds/core/status/OfferedDeadlineMissedEvent.java
===================================================================
--- org/omg/dds/core/status/OfferedDeadlineMissedEvent.java	(revision 197)
+++ org/omg/dds/core/status/OfferedDeadlineMissedEvent.java	(working copy)
@@ -18,15 +18,14 @@
 
 package org.omg.dds.core.status;
 
-import org.omg.dds.core.policy.Deadline;
 import org.omg.dds.pub.DataWriter;
 
 
 /**
- * The deadline that the {@link DataWriter} has committed through its
- * {@link Deadline} was not respected for a specific instance.
+ * The deadline that the {@link org.omg.dds.pub.DataWriter} has committed through its
+ * {@link org.omg.dds.core.policy.Deadline} was not respected for a specific instance.
  *
- * @param <TYPE>    The data type of the source {@link DataWriter}.
+ * @param <TYPE>    The data type of the source {@link org.omg.dds.pub.DataWriter}.
  * 
  * @see OfferedDeadlineMissedStatus
  * @see RequestedDeadlineMissedEvent
Index: org/omg/dds/core/status/OfferedDeadlineMissedStatus.java
===================================================================
--- org/omg/dds/core/status/OfferedDeadlineMissedStatus.java	(revision 197)
+++ org/omg/dds/core/status/OfferedDeadlineMissedStatus.java	(working copy)
@@ -19,13 +19,11 @@
 package org.omg.dds.core.status;
 
 import org.omg.dds.core.InstanceHandle;
-import org.omg.dds.core.policy.Deadline;
-import org.omg.dds.pub.DataWriter;
 
 
 /**
- * The deadline that the {@link DataWriter} has committed through its
- * {@link Deadline} was not respected for a specific instance.
+ * The deadline that the {@link org.omg.dds.pub.DataWriter} has committed through its
+ * {@link org.omg.dds.core.policy.Deadline} was not respected for a specific instance.
  *
  * @see OfferedDeadlineMissedEvent
  * @see RequestedDeadlineMissedStatus
@@ -59,7 +57,7 @@
     public abstract int getTotalCountChange();
 
     /**
-     * Handle to the last instance in the {@link DataWriter} for which an
+     * Handle to the last instance in the {@link org.omg.dds.pub.DataWriter} for which an
      * offered deadline was missed.
      */
     public abstract InstanceHandle getLastInstanceHandle();
Index: org/omg/dds/core/status/DataAvailableEvent.java
===================================================================
--- org/omg/dds/core/status/DataAvailableEvent.java	(revision 197)
+++ org/omg/dds/core/status/DataAvailableEvent.java	(working copy)
@@ -24,7 +24,7 @@
 /**
  * New information is available.
  *
- * @param <TYPE>    The data type of the source {@link DataReader}.
+ * @param <TYPE>    The data type of the source {@link org.omg.dds.sub.DataReader}.
  * 
  * @see DataOnReadersEvent
  */
Index: org/omg/dds/core/status/SubscriptionMatchedEvent.java
===================================================================
--- org/omg/dds/core/status/SubscriptionMatchedEvent.java	(revision 197)
+++ org/omg/dds/core/status/SubscriptionMatchedEvent.java	(working copy)
@@ -18,17 +18,15 @@
 
 package org.omg.dds.core.status;
 
-import org.omg.dds.pub.DataWriter;
 import org.omg.dds.sub.DataReader;
-import org.omg.dds.topic.Topic;
 
 
 /**
- * The {@link DataReader} has found a {@link DataWriter} that matches the
- * {@link Topic} and has compatible QoS, or has ceased to be matched with a
+ * The {@link org.omg.dds.sub.DataReader} has found a {@link org.omg.dds.pub.DataWriter} that matches the
+ * {@link org.omg.dds.topic.Topic} and has compatible QoS, or has ceased to be matched with a
  * DataWriter that was previously considered to be matched.
  *
- * @param <TYPE>    The data type of the source {@link DataReader}.
+ * @param <TYPE>    The data type of the source {@link org.omg.dds.sub.DataReader}.
  * 
  * @see SubscriptionMatchedStatus
  * @see PublicationMatchedEvent
Index: org/omg/dds/core/status/RequestedIncompatibleQosEvent.java
===================================================================
--- org/omg/dds/core/status/RequestedIncompatibleQosEvent.java	(revision 197)
+++ org/omg/dds/core/status/RequestedIncompatibleQosEvent.java	(working copy)
@@ -18,14 +18,13 @@
 
 package org.omg.dds.core.status;
 
-import org.omg.dds.core.policy.QosPolicy;
 import org.omg.dds.sub.DataReader;
 
 
 /**
- * A {@link QosPolicy} value was incompatible with what is offered.
+ * A {@link org.omg.dds.core.policy.QosPolicy} value was incompatible with what is offered.
  *
- * @param <TYPE>    The data type of the source {@link DataReader}.
+ * @param <TYPE>    The data type of the source {@link org.omg.dds.sub.DataReader}.
  * 
  * @see RequestedIncompatibleQosStatus
  * @see OfferedIncompatibleQosEvent
Index: org/omg/dds/core/status/SubscriptionMatchedStatus.java
===================================================================
--- org/omg/dds/core/status/SubscriptionMatchedStatus.java	(revision 197)
+++ org/omg/dds/core/status/SubscriptionMatchedStatus.java	(working copy)
@@ -19,14 +19,11 @@
 package org.omg.dds.core.status;
 
 import org.omg.dds.core.InstanceHandle;
-import org.omg.dds.pub.DataWriter;
-import org.omg.dds.sub.DataReader;
-import org.omg.dds.topic.Topic;
 
 
 /**
- * The {@link DataReader} has found a {@link DataWriter} that matches the
- * {@link Topic} and has compatible QoS, or has ceased to be matched with a
+ * The {@link org.omg.dds.sub.DataReader} has found a {@link org.omg.dds.pub.DataWriter} that matches the
+ * {@link org.omg.dds.topic.Topic} and has compatible QoS, or has ceased to be matched with a
  * DataWriter that was previously considered to be matched.
  *
  * @see SubscriptionMatchedEvent
@@ -47,9 +44,9 @@
     // -----------------------------------------------------------------------
 
     /**
-     * Total cumulative count the concerned {@link DataReader} discovered a
-     * "match" with a {@link DataWriter}. That is, it found a DataWriter for
-     * the same {@link Topic} with a requested QoS that is compatible with
+     * Total cumulative count the concerned {@link org.omg.dds.sub.DataReader} discovered a
+     * "match" with a {@link org.omg.dds.pub.DataWriter}. That is, it found a DataWriter for
+     * the same {@link org.omg.dds.topic.Topic} with a requested QoS that is compatible with
      * that offered by the DataReader.
      */
     public abstract int getTotalCount();
@@ -61,8 +58,8 @@
     public abstract int getTotalCountChange();
 
     /**
-     * The number of {@link DataWriter}s currently matched to the concerned
-     * {@link DataReader}.
+     * The number of {@link org.omg.dds.pub.DataWriter}s currently matched to the concerned
+     * {@link org.omg.dds.sub.DataReader}.
      */
     public abstract int getCurrentCount();
 
@@ -73,8 +70,8 @@
     public abstract int getCurrentCountChange();
 
     /**
-     * Handle to the last {@link DataWriter} that matched the
-     * {@link DataReader}, causing the status to change.
+     * Handle to the last {@link org.omg.dds.pub.DataWriter} that matched the
+     * {@link org.omg.dds.sub.DataReader}, causing the status to change.
      */
     public abstract InstanceHandle getLastPublicationHandle();
 }
Index: org/omg/dds/core/status/RequestedIncompatibleQosStatus.java
===================================================================
--- org/omg/dds/core/status/RequestedIncompatibleQosStatus.java	(revision 197)
+++ org/omg/dds/core/status/RequestedIncompatibleQosStatus.java	(working copy)
@@ -22,13 +22,10 @@
 
 import org.omg.dds.core.policy.QosPolicy;
 import org.omg.dds.core.policy.QosPolicyCount;
-import org.omg.dds.pub.DataWriter;
-import org.omg.dds.sub.DataReader;
-import org.omg.dds.topic.Topic;
 
 
 /**
- * A {@link QosPolicy} value was incompatible with what is offered.
+ * A {@link org.omg.dds.core.policy.QosPolicy} value was incompatible with what is offered.
  *
  * @see RequestedIncompatibleQosEvent
  * @see OfferedIncompatibleQosStatus
@@ -48,8 +45,8 @@
     // -----------------------------------------------------------------------
 
     /**
-     * Total cumulative number of times the concerned {@link DataReader}
-     * discovered a {@link DataWriter} for the same {@link Topic} with an
+     * Total cumulative number of times the concerned {@link org.omg.dds.sub.DataReader}
+     * discovered a {@link org.omg.dds.pub.DataWriter} for the same {@link org.omg.dds.topic.Topic} with an
      * offered QoS that was incompatible with that requested by the
      * DataReader.
      */
@@ -69,8 +66,8 @@
 
     /**
      * A list containing for each policy the total number of times that the
-     * concerned {@link DataReader} discovered a {@link DataWriter} for the
-     * same {@link Topic} with an offered QoS that is incompatible with that
+     * concerned {@link org.omg.dds.sub.DataReader} discovered a {@link org.omg.dds.pub.DataWriter} for the
+     * same {@link org.omg.dds.topic.Topic} with an offered QoS that is incompatible with that
      * requested by the DataReader.
      * 
      * @return  an unmodifiable set.
Index: org/omg/dds/core/status/LivelinessLostEvent.java
===================================================================
--- org/omg/dds/core/status/LivelinessLostEvent.java	(revision 197)
+++ org/omg/dds/core/status/LivelinessLostEvent.java	(working copy)
@@ -18,17 +18,15 @@
 
 package org.omg.dds.core.status;
 
-import org.omg.dds.core.policy.Liveliness;
 import org.omg.dds.pub.DataWriter;
-import org.omg.dds.sub.DataReader;
 
 
 /**
- * The liveliness that the {@link DataWriter} has committed through its
- * {@link Liveliness} was not respected; thus {@link DataReader}
+ * The liveliness that the {@link org.omg.dds.pub.DataWriter} has committed through its
+ * {@link org.omg.dds.core.policy.Liveliness} was not respected; thus {@link org.omg.dds.sub.DataReader}
  * entities will consider the DataWriter as no longer "active."
  *
- * @param <TYPE>    The data type of the source {@link DataWriter}.
+ * @param <TYPE>    The data type of the source {@link org.omg.dds.pub.DataWriter}.
  * 
  * @see LivelinessLostStatus
  * @see LivelinessChangedEvent
Index: org/omg/dds/core/status/InconsistentTopicEvent.java
===================================================================
--- org/omg/dds/core/status/InconsistentTopicEvent.java	(revision 197)
+++ org/omg/dds/core/status/InconsistentTopicEvent.java	(working copy)
@@ -24,7 +24,7 @@
 /**
  * Another topic exists with the same name but different characteristics.
  * 
- * @param <TYPE>    The data type of the source {@link Topic}
+ * @param <TYPE>    The data type of the source {@link org.omg.dds.topic.Topic}
  * 
  * @see InconsistentTopicStatus
  */
Index: org/omg/dds/core/status/InconsistentTopicStatus.java
===================================================================
--- org/omg/dds/core/status/InconsistentTopicStatus.java	(revision 197)
+++ org/omg/dds/core/status/InconsistentTopicStatus.java	(working copy)
@@ -18,9 +18,9 @@
 
 package org.omg.dds.core.status;
 
-import org.omg.dds.topic.Topic;
 
 
+
 /**
  * Another topic exists with the same name but different characteristics.
  * 
@@ -41,7 +41,7 @@
     // -----------------------------------------------------------------------
 
     /**
-     * Total cumulative count of the {@link Topic}s discovered whose name
+     * Total cumulative count of the {@link org.omg.dds.topic.Topic}s discovered whose name
      * matches the Topic to which this status is attached and whose type is
      * inconsistent with the Topic.
      */
Index: org/omg/dds/core/status/LivelinessLostStatus.java
===================================================================
--- org/omg/dds/core/status/LivelinessLostStatus.java	(revision 197)
+++ org/omg/dds/core/status/LivelinessLostStatus.java	(working copy)
@@ -18,14 +18,11 @@
 
 package org.omg.dds.core.status;
 
-import org.omg.dds.core.policy.Liveliness;
-import org.omg.dds.pub.DataWriter;
-import org.omg.dds.sub.DataReader;
 
 
 /**
- * The liveliness that the {@link DataWriter} has committed through its
- * {@link Liveliness} was not respected; thus {@link DataReader}
+ * The liveliness that the {@link org.omg.dds.pub.DataWriter} has committed through its
+ * {@link org.omg.dds.core.policy.Liveliness} was not respected; thus {@link org.omg.dds.sub.DataReader}
  * entities will consider the DataWriter as no longer "active."
  *
  * @see LivelinessLostEvent
@@ -48,7 +45,7 @@
 
     /**
      * Total cumulative number of times that a previously-alive
-     * {@link DataWriter} became not alive due to a failure to actively
+     * {@link org.omg.dds.pub.DataWriter} became not alive due to a failure to actively
      * signal its liveliness within its offered liveliness period. This count
      * does not change when an already not alive DataWriter simply remains
      * not alive for another liveliness period.
Index: org/omg/dds/core/status/Status.java
===================================================================
--- org/omg/dds/core/status/Status.java	(revision 202)
+++ org/omg/dds/core/status/Status.java	(working copy)
@@ -22,20 +22,18 @@
 import java.util.Set;
 
 import org.omg.dds.core.DDSObject;
-import org.omg.dds.core.Entity;
 import org.omg.dds.core.ServiceEnvironment;
-import org.omg.dds.core.StatusCondition;
 
 
 /**
  * Status is the abstract root class for all communication status objects.
  * All concrete kinds of Status classes extend this class.
  * 
- * Each concrete {@link Entity} is associated with a set of Status objects
+ * Each concrete {@link org.omg.dds.core.Entity} is associated with a set of Status objects
  * whose value represents the "communication status" of that entity. These
  * status values can be accessed with corresponding methods on the Entity.
  * The changes on these status values are the ones that both cause activation
- * of the corresponding {@link StatusCondition} objects and trigger invocation
+ * of the corresponding {@link org.omg.dds.core.StatusCondition} objects and trigger invocation
  * of the proper Listener objects to asynchronously inform the application.
  * 
  * @see StatusChangedEvent
Index: org/omg/dds/core/status/SampleLostEvent.java
===================================================================
--- org/omg/dds/core/status/SampleLostEvent.java	(revision 197)
+++ org/omg/dds/core/status/SampleLostEvent.java	(working copy)
@@ -24,7 +24,7 @@
 /**
  * A sample has been lost (never received).
  *
- * @param <TYPE>    The data type of the source {@link DataReader}.
+ * @param <TYPE>    The data type of the source {@link org.omg.dds.sub.DataReader}.
  * 
  * @see SampleLostStatus
  */
Index: org/omg/dds/core/status/OfferedIncompatibleQosEvent.java
===================================================================
--- org/omg/dds/core/status/OfferedIncompatibleQosEvent.java	(revision 197)
+++ org/omg/dds/core/status/OfferedIncompatibleQosEvent.java	(working copy)
@@ -18,14 +18,13 @@
 
 package org.omg.dds.core.status;
 
-import org.omg.dds.core.policy.QosPolicy;
 import org.omg.dds.pub.DataWriter;
 
 
 /**
- * A {@link QosPolicy} value was incompatible with what was requested.
+ * A {@link org.omg.dds.core.policy.QosPolicy} value was incompatible with what was requested.
  *
- * @param <TYPE>    The data type of the source {@link DataWriter}.
+ * @param <TYPE>    The data type of the source {@link org.omg.dds.pub.DataWriter}.
  * 
  * @see OfferedIncompatibleQosStatus
  * @see RequestedIncompatibleQosEvent
Index: org/omg/dds/core/status/SampleLostStatus.java
===================================================================
--- org/omg/dds/core/status/SampleLostStatus.java	(revision 197)
+++ org/omg/dds/core/status/SampleLostStatus.java	(working copy)
@@ -18,7 +18,6 @@
 
 package org.omg.dds.core.status;
 
-import org.omg.dds.topic.Topic;
 
 
 /**
@@ -42,7 +41,7 @@
 
     /**
      * Total cumulative count of all samples lost across all instances of
-     * data published under the {@link Topic}.
+     * data published under the {@link org.omg.dds.topic.Topic}.
      */
     public abstract int getTotalCount();
 
Index: org/omg/dds/core/status/OfferedIncompatibleQosStatus.java
===================================================================
--- org/omg/dds/core/status/OfferedIncompatibleQosStatus.java	(revision 197)
+++ org/omg/dds/core/status/OfferedIncompatibleQosStatus.java	(working copy)
@@ -22,13 +22,10 @@
 
 import org.omg.dds.core.policy.QosPolicy;
 import org.omg.dds.core.policy.QosPolicyCount;
-import org.omg.dds.pub.DataWriter;
-import org.omg.dds.sub.DataReader;
-import org.omg.dds.topic.Topic;
 
 
 /**
- * A {@link QosPolicy} value was incompatible with what was requested.
+ * A {@link org.omg.dds.core.policy.QosPolicy} value was incompatible with what was requested.
  *
  * @see OfferedIncompatibleQosEvent
  * @see RequestedIncompatibleQosStatus
@@ -48,8 +45,8 @@
     // -----------------------------------------------------------------------
 
     /**
-     * Total cumulative number of times the concerned {@link DataWriter}
-     * discovered a {@link DataReader} for the same {@link Topic} with a
+     * Total cumulative number of times the concerned {@link org.omg.dds.pub.DataWriter}
+     * discovered a {@link org.omg.dds.sub.DataReader} for the same {@link org.omg.dds.topic.Topic} with a
      * requested QoS that is incompatible with that offered by the
      * DataWriter.
      */
@@ -69,8 +66,8 @@
 
     /**
      * A list containing for each policy the total number of times that the
-     * concerned {@link DataWriter} discovered a {@link DataReader} for the
-     * same {@link Topic} with a requested QoS that is incompatible with that
+     * concerned {@link org.omg.dds.pub.DataWriter} discovered a {@link org.omg.dds.sub.DataReader} for the
+     * same {@link org.omg.dds.topic.Topic} with a requested QoS that is incompatible with that
      * offered by the DataWriter.
      * 
      * @return  an unmodifiable set of policy counts.
Index: org/omg/dds/core/status/SampleRejectedEvent.java
===================================================================
--- org/omg/dds/core/status/SampleRejectedEvent.java	(revision 197)
+++ org/omg/dds/core/status/SampleRejectedEvent.java	(working copy)
@@ -24,7 +24,7 @@
 /**
  * A (received) sample has been rejected.
  * 
- * @param <TYPE>    The data type of the source {@link DataReader}.
+ * @param <TYPE>    The data type of the source {@link org.omg.dds.sub.DataReader}.
  * 
  * @see SampleRejectedStatus
  */
Index: org/omg/dds/core/status/LivelinessChangedEvent.java
===================================================================
--- org/omg/dds/core/status/LivelinessChangedEvent.java	(revision 197)
+++ org/omg/dds/core/status/LivelinessChangedEvent.java	(working copy)
@@ -18,16 +18,15 @@
 
 package org.omg.dds.core.status;
 
-import org.omg.dds.pub.DataWriter;
 import org.omg.dds.sub.DataReader;
 
 
 /**
- * The liveliness of one or more {@link DataWriter}s that were writing
- * instances read through the {@link DataReader} has changed. Some
+ * The liveliness of one or more {@link org.omg.dds.pub.DataWriter}s that were writing
+ * instances read through the {@link org.omg.dds.sub.DataReader} has changed. Some
  * DataWriter(s) have become "active" or "inactive."
  *
- * @param <TYPE>    The data type of the source {@link DataReader}.
+ * @param <TYPE>    The data type of the source {@link org.omg.dds.sub.DataReader}.
  * 
  * @see LivelinessChangedStatus
  * @see LivelinessLostEvent
Index: org/omg/dds/core/status/SampleRejectedStatus.java
===================================================================
--- org/omg/dds/core/status/SampleRejectedStatus.java	(revision 197)
+++ org/omg/dds/core/status/SampleRejectedStatus.java	(working copy)
@@ -19,9 +19,9 @@
 package org.omg.dds.core.status;
 
 import org.omg.dds.core.InstanceHandle;
-import org.omg.dds.sub.DataReader;
 
 
+
 /**
  * A (received) sample has been rejected.
  * 
@@ -42,7 +42,7 @@
     // -----------------------------------------------------------------------
 
     /**
-     * Total cumulative count of samples rejected by the {@link DataReader}.
+     * Total cumulative count of samples rejected by the {@link org.omg.dds.sub.DataReader}.
      */
     public abstract int getTotalCount();
 
Index: org/omg/dds/core/status/LivelinessChangedStatus.java
===================================================================
--- org/omg/dds/core/status/LivelinessChangedStatus.java	(revision 197)
+++ org/omg/dds/core/status/LivelinessChangedStatus.java	(working copy)
@@ -19,14 +19,11 @@
 package org.omg.dds.core.status;
 
 import org.omg.dds.core.InstanceHandle;
-import org.omg.dds.pub.DataWriter;
-import org.omg.dds.sub.DataReader;
-import org.omg.dds.topic.Topic;
 
 
 /**
- * The liveliness of one or more {@link DataWriter}s that were writing
- * instances read through the {@link DataReader} has changed. Some
+ * The liveliness of one or more {@link org.omg.dds.pub.DataWriter}s that were writing
+ * instances read through the {@link org.omg.dds.sub.DataReader} has changed. Some
  * DataWriter(s) have become "active" or "inactive."
  *
  * @see LivelinessChangedEvent
@@ -47,8 +44,8 @@
     // -----------------------------------------------------------------------
 
     /**
-     * The total number of currently active {@link DataWriter}s that write
-     * the Topic read by the {@link DataReader}. This count increases when a
+     * The total number of currently active {@link org.omg.dds.pub.DataWriter}s that write
+     * the Topic read by the {@link org.omg.dds.sub.DataReader}. This count increases when a
      * newly matched DataWriter asserts its liveliness for the first time or
      * when a DataWriter previously considered to be not alive reasserts its
      * liveliness. The count decreases when a DataWriter considered alive
@@ -58,8 +55,8 @@
     public abstract int getAliveCount();
 
     /**
-     * The total count of currently {@link DataWriter}s that write the
-     * {@link Topic} read by the {@link DataReader} that are no longer
+     * The total count of currently {@link org.omg.dds.pub.DataWriter}s that write the
+     * {@link org.omg.dds.topic.Topic} read by the {@link org.omg.dds.sub.DataReader} that are no longer
      * asserting their liveliness. This count increases when a DataWriter
      * considered alive fails to assert its liveliness and becomes not alive
      * for some reason other than the normal deletion of that DataWriter.
@@ -81,7 +78,7 @@
     public abstract int getNotAliveCountChange();
 
     /**
-     * Handle to the last {@link DataWriter} whose change in liveliness
+     * Handle to the last {@link org.omg.dds.pub.DataWriter} whose change in liveliness
      * caused this status to change.
      */
     public abstract InstanceHandle getLastPublicationHandle();
Index: org/omg/dds/core/status/RequestedDeadlineMissedEvent.java
===================================================================
--- org/omg/dds/core/status/RequestedDeadlineMissedEvent.java	(revision 197)
+++ org/omg/dds/core/status/RequestedDeadlineMissedEvent.java	(working copy)
@@ -18,15 +18,14 @@
 
 package org.omg.dds.core.status;
 
-import org.omg.dds.core.policy.Deadline;
 import org.omg.dds.sub.DataReader;
 
 
 /**
- * The deadline that the {@link DataReader} was expecting through its
- * {@link Deadline} was not respected for a specific instance.
+ * The deadline that the {@link org.omg.dds.sub.DataReader} was expecting through its
+ * {@link org.omg.dds.core.policy.Deadline} was not respected for a specific instance.
  *
- * @param <TYPE>    The data type of the source {@link DataReader}.
+ * @param <TYPE>    The data type of the source {@link org.omg.dds.sub.DataReader}.
  * 
  * @see RequestedDeadlineMissedStatus
  * @see OfferedDeadlineMissedEvent
Index: org/omg/dds/core/DomainEntity.java
===================================================================
--- org/omg/dds/core/DomainEntity.java	(revision 197)
+++ org/omg/dds/core/DomainEntity.java	(working copy)
@@ -20,12 +20,9 @@
 
 import java.util.EventListener;
 
-import org.omg.dds.domain.DomainParticipant;
-
-
 /**
  * DomainEntity is the abstract base class for all DCPS entities, except for
- * the {@link DomainParticipant}. Its sole purpose is to express that
+ * the {@link org.omg.dds.domain.DomainParticipant}. Its sole purpose is to express that
  * DomainParticipant is a special kind of Entity, which acts as a container
  * of all other Entity, but itself cannot contain other DomainParticipant.
  * 
Index: org/omg/dds/core/GuardCondition.java
===================================================================
--- org/omg/dds/core/GuardCondition.java	(revision 202)
+++ org/omg/dds/core/GuardCondition.java	(working copy)
@@ -25,7 +25,7 @@
  * the triggerValue is set to false.
  * 
  * The purpose of the GuardCondition is to provide the means for the
- * application to manually wake up a {@link WaitSet}. This is accomplished by
+ * application to manually wake up a {@link org.omg.dds.core.WaitSet}. This is accomplished by
  * attaching the GuardCondition to the WaitSet and then setting the
  * triggerValue by means of the {@link #setTriggerValue(boolean)} operation.
  */
@@ -53,7 +53,7 @@
     /**
      * This operation sets the triggerValue of the GuardCondition.
      * 
-     * {@link WaitSet} objects' behavior depends on the changes of the
+     * {@link org.omg.dds.core.WaitSet} objects' behavior depends on the changes of the
      * triggerValue of their attached conditions. Therefore, any WaitSet
      * to which the GuardCondition is attached is potentially affected by
      * this operation.
Index: org/omg/dds/core/Entity.java
===================================================================
--- org/omg/dds/core/Entity.java	(revision 197)
+++ org/omg/dds/core/Entity.java	(working copy)
@@ -23,18 +23,7 @@
 import java.util.EventListener;
 import java.util.Set;
 
-import org.omg.dds.core.policy.EntityFactory;
-import org.omg.dds.core.policy.WriterDataLifecycle;
 import org.omg.dds.core.status.Status;
-import org.omg.dds.domain.DomainParticipant;
-import org.omg.dds.pub.DataWriter;
-import org.omg.dds.pub.Publisher;
-import org.omg.dds.sub.DataReader;
-import org.omg.dds.sub.Subscriber;
-import org.omg.dds.topic.ContentFilteredTopic;
-import org.omg.dds.topic.MultiTopic;
-import org.omg.dds.topic.Topic;
-import org.omg.dds.topic.TopicDescription;
 
 
 /**
@@ -98,9 +87,9 @@
     /**
      * This operation allows access to the existing set of QoS policies for
      * the Entity. This operation must be provided by each of the derived
-     * Entity classes ({@link DomainParticipant}, {@link Topic},
-     * {@link Publisher}, {@link DataWriter}, {@link Subscriber},
-     * {@link DataReader}) so that the policies meaningful to the particular
+     * Entity classes ({@link org.omg.dds.domain.DomainParticipant}, {@link org.omg.dds.topic.Topic},
+     * {@link org.omg.dds.pub.Publisher}, {@link org.omg.dds.pub.DataWriter}, {@link org.omg.dds.sub.Subscriber},
+     * {@link org.omg.dds.sub.DataReader}) so that the policies meaningful to the particular
      * Entity are retrieved.
      * 
      * @see     #setQos(EntityQos)
@@ -110,8 +99,8 @@
     /**
      * This operation is used to set the QoS policies of the Entity. This
      * operation must be provided by each of the derived Entity classes
-     * ({@link DomainParticipant}, {@link Topic}, {@link Publisher},
-     * {@link DataWriter}, {@link Subscriber}, {@link DataReader}) so that
+     * ({@link org.omg.dds.domain.DomainParticipant}, {@link org.omg.dds.topic.Topic}, {@link org.omg.dds.pub.Publisher},
+     * {@link org.omg.dds.pub.DataWriter}, {@link org.omg.dds.sub.Subscriber}, {@link org.omg.dds.sub.DataReader}) so that
      * the policies that are meaningful to each Entity can be set.
      * 
      * The set of policies specified as the parameter are applied on top of
@@ -121,13 +110,13 @@
      * creation time, or before the entity is made enabled. If setQos is
      * invoked after the Entity is enabled and it attempts to change the
      * value of an "immutable" policy, the operation will fail with
-     * {@link ImmutablePolicyException}.
+     * {@link org.omg.dds.core.ImmutablePolicyException}.
      * 
      * Certain values of QoS policies can be incompatible with the settings
      * of the other policies. The setQos operation will also fail if it
      * specifies a set of values that once combined with the existing values
      * would result in an inconsistent set of policies. In this case, it
-     * shall fail with {@link InconsistentPolicyException}.
+     * shall fail with {@link org.omg.dds.core.InconsistentPolicyException}.
      * 
      * If the application supplies a non-default value for a QoS policy that
      * is not supported by the implementation of the service, the setQos
@@ -163,10 +152,10 @@
     /**
      * This operation enables the Entity. Entity objects can be created
      * either enabled or disabled. This is controlled by the value of the
-     * {@link EntityFactory} on the corresponding factory for the
+     * {@link org.omg.dds.core.policy.EntityFactory} on the corresponding factory for the
      * Entity.
      * 
-     * The default setting of {@link EntityFactory} is such that, by
+     * The default setting of {@link org.omg.dds.core.policy.EntityFactory} is such that, by
      * default, it is not necessary to explicitly call enable on newly
      * created entities.
      * 
@@ -189,30 +178,30 @@
      * 
      * Other operations may explicitly state that they may be called on
      * disabled entities; those that do not will fail with
-     *  {@link NotEnabledException}.
+     *  {@link org.omg.dds.core.NotEnabledException}.
      *  
      *  It is legal to delete an Entity that has not been enabled by calling
      *  {@link #close()}. Entities created from a factory that is disabled
      *  are created disabled regardless of the setting of
-     *  {@link EntityFactory}.
+     *  {@link org.omg.dds.core.policy.EntityFactory}.
      *  
      *  Calling enable on an Entity whose factory is not enabled will fail
-     *  with {@link PreconditionNotMetException}.
+     *  with {@link org.omg.dds.core.PreconditionNotMetException}.
      *  
-     *  If {@link EntityFactory#isAutoEnableCreatedEntities()} is
+     *  If {@link org.omg.dds.core.policy.EntityFactory#isAutoEnableCreatedEntities()} is
      *  true, the enable operation on the factory will automatically enable
      *  all entities created from the factory.
      *  
      *  The Listeners associated with an entity are not called until the
-     *  entity is enabled. {@link Condition}s associated with an entity that
+     *  entity is enabled. {@link org.omg.dds.core.Condition}s associated with an entity that
      *  is not enabled are "inactive," that is, have a triggerValue == false.
      */
     public void enable();
 
     /**
-     * This operation allows access to the {@link StatusCondition} associated
+     * This operation allows access to the {@link org.omg.dds.core.StatusCondition} associated
      * with the Entity. The returned condition can then be added to a
-     * {@link WaitSet} so that the application can wait for specific status
+     * {@link org.omg.dds.core.WaitSet} so that the application can wait for specific status
      * changes that affect the Entity.
      */
     public StatusCondition<?> getStatusCondition();
@@ -235,7 +224,7 @@
     public Set<Class<? extends Status>> getStatusChanges();
 
     /**
-     * @return  the {@link InstanceHandle} that represents the Entity.
+     * @return  the {@link org.omg.dds.core.InstanceHandle} that represents the Entity.
      */
     public InstanceHandle getInstanceHandle();
 
@@ -250,26 +239,26 @@
      * not including contained objects. These include the following:
      * 
      * <ul>
-     *     <li>A {@link Topic} cannot be closed if it is still in use by any
-     *         {@link ContentFilteredTopic}s or {@link MultiTopic}s.</li>
-     *     <li>A Topic cannot be closed if any {@link DataWriter}s or
-     *         {@link DataReader} is still using it.</li>
+     *     <li>A {@link org.omg.dds.topic.Topic} cannot be closed if it is still in use by any
+     *         {@link org.omg.dds.topic.ContentFilteredTopic}s or {@link org.omg.dds.topic.MultiTopic}s.</li>
+     *     <li>A Topic cannot be closed if any {@link org.omg.dds.pub.DataWriter}s or
+     *         {@link org.omg.dds.sub.DataReader} is still using it.</li>
      *     <li>A DataReader cannot be closed if it has any outstanding loans
-     *         as a result of a call to {@link DataReader#read()},
-     *         {@link DataReader#take()}, or one of the variants thereof.
+     *         as a result of a call to {@link org.omg.dds.sub.DataReader#read()},
+     *         {@link org.omg.dds.sub.DataReader#take()}, or one of the variants thereof.
      *         </li>
      * </ul>
      * 
-     * The deletion of a {@link DataWriter} will automatically unregister all
+     * The deletion of a {@link org.omg.dds.pub.DataWriter} will automatically unregister all
      * instances. Depending on the settings of the
-     * {@link WriterDataLifecycle}, the deletion of the DataWriter
+     * {@link org.omg.dds.core.policy.WriterDataLifecycle}, the deletion of the DataWriter
      * may also dispose all instances.
      * 
      * @throws  PreconditionNotMetException     if close is called on an
      *          Entity with unclosed dependent object(s), not including
      *          contained objects.
      * 
-     * @see     TopicDescription#close()
+     * @see     org.omg.dds.topic.TopicDescription#close()
      */
     public void close();
 
Index: org/omg/dds/core/QosProvider.java
===================================================================
--- org/omg/dds/core/QosProvider.java	(revision 202)
+++ org/omg/dds/core/QosProvider.java	(working copy)
@@ -1,67 +1,66 @@
-/* Copyright 2010, Object Management Group, Inc.
- * Copyright 2010, PrismTech, Inc.
- * Copyright 2010, Real-Time Innovations, Inc.
- * All rights reserved.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.omg.dds.core;
-
-import org.omg.dds.pub.PublisherQos;
-import org.omg.dds.pub.DataWriterQos;
-import org.omg.dds.sub.SubscriberQos;
-import org.omg.dds.sub.DataReaderQos;
-import org.omg.dds.topic.TopicQos;
-import org.omg.dds.core.DDSObject;
-import org.omg.dds.domain.DomainParticipantQos;
-import org.omg.dds.domain.DomainParticipantFactoryQos;
-
-public abstract class QosProvider implements DDSObject {
-
-	public static QosProvider newQosProvider(String uri, 
-			                                 String profile, 
-			                                 ServiceEnvironment env)
-	{
-		return env.getSPI().newQosProvider(uri, profile);
-	}
-	
-	public abstract DomainParticipantFactoryQos getDomainParticipantFactoryQos();
-
-	/**
-	 * Get the first domain participant QoS with identifier that matches the id.
-	 * 
-	 * @param id The identifier of the domain participant QoS of interest  
-	 * @return Domain participant QoS  
-	 */
-
-	public abstract DomainParticipantFactoryQos getDomainParticipantFactoryQos(String id);
-	
-	public abstract DomainParticipantQos getDomainParticipantQos();
-	public abstract DomainParticipantQos getDomainParticipantQos(String id);
-	
-	public abstract TopicQos getTopicQos();
-	public abstract TopicQos getTopicQos(String id);
-	
-	public abstract SubscriberQos getSubscriberQos();
-	public abstract SubscriberQos getSubscriberQos(String id);
-	
-	public abstract PublisherQos getPublisherQos();
-	public abstract PublisherQos getPublisherQos(String id);
-	
-	public abstract DataReaderQos getDataReaderQos();
-	public abstract DataReaderQos getDataReaderQos(String id);
-	
-	public abstract DataWriterQos getDataWriterQos();
-	public abstract DataWriterQos getDataWriterQos(String id);
-}
+/* Copyright 2010, Object Management Group, Inc.
+ * Copyright 2010, PrismTech, Inc.
+ * Copyright 2010, Real-Time Innovations, Inc.
+ * All rights reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.omg.dds.core;
+
+import org.omg.dds.domain.DomainParticipantFactoryQos;
+import org.omg.dds.domain.DomainParticipantQos;
+import org.omg.dds.pub.DataWriterQos;
+import org.omg.dds.pub.PublisherQos;
+import org.omg.dds.sub.DataReaderQos;
+import org.omg.dds.sub.SubscriberQos;
+import org.omg.dds.topic.TopicQos;
+
+public abstract class QosProvider implements DDSObject {
+
+	public static QosProvider newQosProvider(String uri, 
+			                                 String profile, 
+			                                 ServiceEnvironment env)
+	{
+		return env.getSPI().newQosProvider(uri, profile);
+	}
+	
+	public abstract DomainParticipantFactoryQos getDomainParticipantFactoryQos();
+
+	/**
+	 * Get the first domain participant QoS with identifier that matches the id.
+	 * 
+	 * @param id The identifier of the domain participant QoS of interest  
+	 * @return Domain participant QoS  
+	 */
+
+	public abstract DomainParticipantFactoryQos getDomainParticipantFactoryQos(String id);
+	
+	public abstract DomainParticipantQos getDomainParticipantQos();
+	public abstract DomainParticipantQos getDomainParticipantQos(String id);
+	
+	public abstract TopicQos getTopicQos();
+	public abstract TopicQos getTopicQos(String id);
+	
+	public abstract SubscriberQos getSubscriberQos();
+	public abstract SubscriberQos getSubscriberQos(String id);
+	
+	public abstract PublisherQos getPublisherQos();
+	public abstract PublisherQos getPublisherQos(String id);
+	
+	public abstract DataReaderQos getDataReaderQos();
+	public abstract DataReaderQos getDataReaderQos(String id);
+	
+	public abstract DataWriterQos getDataWriterQos();
+	public abstract DataWriterQos getDataWriterQos(String id);
+}
Index: org/omg/dds/core/policy/Lifespan.java
===================================================================
--- org/omg/dds/core/policy/Lifespan.java	(revision 209)
+++ org/omg/dds/core/policy/Lifespan.java	(working copy)
@@ -21,15 +21,13 @@
 import java.util.concurrent.TimeUnit;
 
 import org.omg.dds.core.Duration;
-import org.omg.dds.pub.DataWriter;
-import org.omg.dds.topic.Topic;
 
 
 /**
  * Specifies the maximum duration of validity of the data written by the
- * {@link DataWriter}. The default value of the lifespan duration is infinite.
+ * {@link org.omg.dds.pub.DataWriter}. The default value of the lifespan duration is infinite.
  * 
- * <b>Concerns:</b> {@link Topic}, {@link DataWriter}
+ * <b>Concerns:</b> {@link org.omg.dds.topic.Topic}, {@link org.omg.dds.pub.DataWriter}
  * 
  * <b>RxO:</b> N/A
  * 
@@ -45,8 +43,8 @@
  * 
  * The "expiration time" of each sample is computed by adding the duration
  * specified by the LIFESPAN QoS to the source time stamp. As described in
- * {@link DataWriter#write(Object)} and
- * {@link DataWriter#write(Object, org.omg.dds.core.Time)}, the source time
+ * {@link org.omg.dds.pub.DataWriter#write(Object)} and
+ * {@link org.omg.dds.pub.DataWriter#write(Object, org.omg.dds.core.Time)}, the source time
  * stamp is either automatically computed by the Service each time the
  * write operation is called, or else supplied by the application.
  * 
Index: org/omg/dds/core/policy/History.java
===================================================================
--- org/omg/dds/core/policy/History.java	(revision 209)
+++ org/omg/dds/core/policy/History.java	(working copy)
@@ -18,9 +18,6 @@
 
 package org.omg.dds.core.policy;
 
-import org.omg.dds.pub.DataWriter;
-import org.omg.dds.sub.DataReader;
-import org.omg.dds.topic.Topic;
 
 
 /**
@@ -32,11 +29,11 @@
  * publishing side this policy controls the samples that should be maintained
  * by the DataWriter on behalf of existing DataReader entities. The behavior
  * with regards to a DataReader entities discovered after a sample is written
- * is controlled by the {@link Durability}. On the subscribing side
+ * is controlled by the {@link org.omg.dds.core.policy.Durability}. On the subscribing side
  * it controls the samples that should be maintained until the application
- * "takes" them from the Service via {@link DataReader#take()}.
+ * "takes" them from the Service via {@link org.omg.dds.sub.DataReader#take()}.
  * 
- * <b>Concerns:</b> {@link Topic}, {@link DataReader}, {@link DataWriter}
+ * <b>Concerns:</b> {@link org.omg.dds.topic.Topic}, {@link org.omg.dds.sub.DataReader}, {@link org.omg.dds.pub.DataWriter}
  * 
  * <b>RxO:</b> No
  * 
@@ -59,9 +56,9 @@
  *         attempt to maintain and deliver all the values of the instance to
  *         existing subscribers. The resources that the Service can use to
  *         keep this history are limited by the settings of the
- *         {@link ResourceLimits}. If the limit is reached, then the
+ *         {@link org.omg.dds.core.policy.ResourceLimits}. If the limit is reached, then the
  *         behavior of the Service will depend on the
- *         {@link Reliability}. If the reliability kind is
+ *         {@link org.omg.dds.core.policy.Reliability}. If the reliability kind is
  *         {@link Reliability.Kind#BEST_EFFORT}, then the old values
  *         will be discarded. If reliability is
  *         {@link Reliability.Kind#RELIABLE}, then the Service will
@@ -129,29 +126,29 @@
     public enum Kind {
         /**
          * On the publishing side, the Service will only attempt to keep the
-         * most recent "depth" samples ({@link History#getDepth()})
+         * most recent "depth" samples ({@link org.omg.dds.core.policy.History#getDepth()})
          * of each instance of data (identified by its key) managed by the
-         * {@link DataWriter}. On the subscribing side, the DataReader will
+         * {@link org.omg.dds.pub.DataWriter}. On the subscribing side, the DataReader will
          * only attempt to keep the most recent "depth" samples received for
          * each instance (identified by its key) until the application
-         * "takes" them via {@link DataReader#take()}. KEEP_LAST is the
+         * "takes" them via {@link org.omg.dds.sub.DataReader#take()}. KEEP_LAST is the
          * default kind. The default value of depth is 1. If a value other
          * than 1 is specified, it must be consistent with the settings of
-         * the {@link ResourceLimits}.
+         * the {@link org.omg.dds.core.policy.ResourceLimits}.
          */
         KEEP_LAST,
 
         /**
          * On the publishing side, the Service will attempt to keep all
          * samples (representing each value written) of each instance of data
-         * (identified by its key) managed by the {@link DataWriter} until
+         * (identified by its key) managed by the {@link org.omg.dds.pub.DataWriter} until
          * they can be delivered to all subscribers. On the subscribing side,
          * the Service will attempt to keep all samples of each instance of
-         * data (identified by its key) managed by the {@link DataReader}.
+         * data (identified by its key) managed by the {@link org.omg.dds.sub.DataReader}.
          * These samples are kept until the application "takes" them from the
-         * Service via {@link DataReader#take()}. The setting of depth has no
+         * Service via {@link org.omg.dds.sub.DataReader#take()}. The setting of depth has no
          * effect. Its implied value is
-         * {@link ResourceLimits#LENGTH_UNLIMITED}.
+         * {@link org.omg.dds.core.policy.ResourceLimits#LENGTH_UNLIMITED}.
          */
         KEEP_ALL
     }
Index: org/omg/dds/core/policy/TimeBasedFilter.java
===================================================================
--- org/omg/dds/core/policy/TimeBasedFilter.java	(revision 209)
+++ org/omg/dds/core/policy/TimeBasedFilter.java	(working copy)
@@ -21,22 +21,19 @@
 import java.util.concurrent.TimeUnit;
 
 import org.omg.dds.core.Duration;
-import org.omg.dds.core.Entity;
-import org.omg.dds.pub.DataWriter;
-import org.omg.dds.sub.DataReader;
 
 
 /**
- * Filter that allows a {@link DataReader} to specify that it is interested
+ * Filter that allows a {@link org.omg.dds.sub.DataReader} to specify that it is interested
  * only in (potentially) a subset of the values of the data. The filter
  * states that the DataReader does not want to receive more than one value
  * each minimumSeparation, regardless of how fast the changes occur. It is
  * inconsistent for a DataReader to have a minimumSeparation longer than the
- * result of its {@link Deadline#getPeriod()}. By default,
+ * result of its {@link org.omg.dds.core.policy.Deadline#getPeriod()}. By default,
  * minimumSeparation = 0, indicating that the DataReader is potentially
  * interested in all values.
  * 
- * <b>Concerns:</b> {@link DataReader}
+ * <b>Concerns:</b> {@link org.omg.dds.sub.DataReader}
  * 
  * <b>RxO:</b> N/A
  * 
@@ -47,7 +44,7 @@
  * sample of each instance per minumumSeparation period.
  * 
  * This setting allows a DataReader to further decouple itself from the
- * {@link DataWriter} objects. It can be used to protect applications that
+ * {@link org.omg.dds.pub.DataWriter} objects. It can be used to protect applications that
  * are running on a heterogeneous network where some nodes are capable of
  * generating data much faster than others can consume it. It also
  * accommodates the fact that for fast-changing data different subscribers
@@ -71,7 +68,7 @@
  * with the DEADLINE period. For these two QoS policies to be consistent they
  * must verify that "period >= minimumSeparation." An attempt to set these
  * policies in an inconsistent manner when an entity is created via a
- * {@link Entity#setQos(org.omg.dds.core.EntityQos)} operation will cause the
+ * {@link org.omg.dds.core.Entity#setQos(org.omg.dds.core.EntityQos)} operation will cause the
  * operation to fail.
  * 
  * @see Deadline
Index: org/omg/dds/core/policy/EntityFactory.java
===================================================================
--- org/omg/dds/core/policy/EntityFactory.java	(revision 209)
+++ org/omg/dds/core/policy/EntityFactory.java	(working copy)
@@ -18,24 +18,16 @@
 
 package org.omg.dds.core.policy;
 
-import org.omg.dds.core.Entity;
-import org.omg.dds.domain.DomainParticipant;
-import org.omg.dds.domain.DomainParticipantFactory;
-import org.omg.dds.pub.DataWriter;
-import org.omg.dds.pub.Publisher;
-import org.omg.dds.sub.DataReader;
-import org.omg.dds.sub.Subscriber;
-import org.omg.dds.topic.Topic;
 
 
 /**
- * Controls the behavior of the {@link Entity} when acting as a factory for
+ * Controls the behavior of the {@link org.omg.dds.core.Entity} when acting as a factory for
  * other entities. In other words, configures the side-effects of the
  * <code>create_*</code> operations.
  * 
- * <b>Concerns:</b> {@link DomainParticipantFactory},
- *                  {@link DomainParticipant}, {@link Publisher},
- *                  {@link Subscriber}
+ * <b>Concerns:</b> {@link org.omg.dds.domain.DomainParticipantFactory},
+ *                  {@link org.omg.dds.domain.DomainParticipant}, {@link org.omg.dds.pub.Publisher},
+ *                  {@link org.omg.dds.sub.Subscriber}
  * 
  * <b>RxO:</b> No
  * 
@@ -44,15 +36,15 @@
  * This policy controls the behavior of the Entity as a factory for other entities.
  * 
  * This policy concerns only DomainParticipant (as factory for Publisher,
- * Subscriber, and {@link Topic}), Publisher (as factory for
- * {@link DataWriter}), and Subscriber (as factory for {@link DataReader}).
+ * Subscriber, and {@link org.omg.dds.topic.Topic}), Publisher (as factory for
+ * {@link org.omg.dds.pub.DataWriter}), and Subscriber (as factory for {@link org.omg.dds.sub.DataReader}).
  * 
  * This policy is mutable. A change in the policy affects only the entities
  * created after the change; not the previously created entities.
  *  
  * The setting of autoenableCreatedEntities to true indicates that the
  * factory <code>create&lt;<i>entity</i>&gt;</code> operation will
- * automatically invoke the {@link Entity#enable()} operation each time a new
+ * automatically invoke the {@link org.omg.dds.core.Entity#enable()} operation each time a new
  * Entity is created. Therefore, the Entity returned by
  * <code>create&lt;<i>entity</i>&gt;</code> will already be enabled. A
  * setting of false indicates that the Entity will not be automatically
Index: org/omg/dds/core/policy/Deadline.java
===================================================================
--- org/omg/dds/core/policy/Deadline.java	(revision 209)
+++ org/omg/dds/core/policy/Deadline.java	(working copy)
@@ -20,30 +20,26 @@
 
 import java.util.concurrent.TimeUnit;
 
-import org.omg.dds.core.Condition;
 import org.omg.dds.core.Duration;
-import org.omg.dds.pub.DataWriter;
-import org.omg.dds.sub.DataReader;
-import org.omg.dds.topic.Topic;
 
 
 /**
- * {@link DataReader} expects a new sample updating the value of each
- * instance at least once every deadline period. The {@link DataWriter}
+ * {@link org.omg.dds.sub.DataReader} expects a new sample updating the value of each
+ * instance at least once every deadline period. The {@link org.omg.dds.pub.DataWriter}
  * indicates that the application commits to write a new value (using the
  * DataWriter) for each instance managed by the DataWriter at least once
  * every deadline period. It is inconsistent for a DataReader to have a
  * deadline period less than the result of its
- * {@link TimeBasedFilter#getMinimumSeparation()}. The default value
+ * {@link org.omg.dds.core.policy.TimeBasedFilter#getMinimumSeparation()}. The default value
  * of the deadline period is infinite.
  * 
- * <b>Concerns:</b> {@link Topic}, {@link DataReader}, {@link DataWriter}
+ * <b>Concerns:</b> {@link org.omg.dds.topic.Topic}, {@link org.omg.dds.sub.DataReader}, {@link org.omg.dds.pub.DataWriter}
  * 
  * <b>RxO:</b> Yes
  * 
  * <b>Changeable:</b> Yes
  * 
- * This policy is useful for cases where a {@link Topic} is expected to have
+ * This policy is useful for cases where a {@link org.omg.dds.topic.Topic} is expected to have
  * each instance updated periodically. On the publishing side this setting
  * establishes a contract that the application must meet. On the subscribing
  * side the setting establishes a minimum requirement for the remote
@@ -52,7 +48,7 @@
  * When the Service "matches" a DataWriter and a DataReader it checks whether
  * the settings are compatible (i.e., offered deadline period<= requested
  * deadline period). If they are not, the two entities are informed (via the
- * listener or {@link Condition} mechanism) of the incompatibility of the QoS
+ * listener or {@link org.omg.dds.core.Condition} mechanism) of the incompatibility of the QoS
  * settings and communication will not occur.
  * 
  * Assuming that the reader and writer ends have compatible settings, the
@@ -65,7 +61,7 @@
  * period" evaluates to true.
  * 
  * The setting of the DEADLINE policy must be set consistently with that of
- * the {@link TimeBasedFilter}. For these two policies to be
+ * the {@link org.omg.dds.core.policy.TimeBasedFilter}. For these two policies to be
  * consistent the settings must be such that "deadline period >=
  * minimum_separation."
  */
Index: org/omg/dds/core/policy/UserData.java
===================================================================
--- org/omg/dds/core/policy/UserData.java	(revision 209)
+++ org/omg/dds/core/policy/UserData.java	(working copy)
@@ -18,35 +18,29 @@
 
 package org.omg.dds.core.policy;
 
-import org.omg.dds.core.Entity;
-import org.omg.dds.domain.DomainParticipant;
-import org.omg.dds.pub.DataWriter;
-import org.omg.dds.sub.DataReader;
-
-
 /**
  * User data not known by the middleware, but distributed by means of
  * built-in topics. The default value is an empty (zero-sized) sequence.
  * 
- * <b>Concerns:</b> {@link DomainParticipant}, {@link DataReader},
- *                 {@link DataWriter}
+ * <b>Concerns:</b> {@link org.omg.dds.domain.DomainParticipant}, {@link org.omg.dds.sub.DataReader},
+ *                 {@link org.omg.dds.pub.DataWriter}
  * 
  * <b>RxO:</b> No
  * 
  * <b>Changeable:</b> Yes
  * 
  * The purpose of this QoS is to allow the application to attach additional
- * information to the created {@link Entity} objects such that when a remote
+ * information to the created {@link org.omg.dds.core.Entity} objects such that when a remote
  * application discovers their existence it can access that information and
  * use it for its own purposes. One possible use of this QoS is to attach
  * security credentials or some other information that can be used by the
  * remote application to authenticate the source. In combination with
  * operations such as
- * {@link DomainParticipant#ignoreParticipant(org.omg.dds.core.InstanceHandle)},
- * {@link DomainParticipant#ignorePublication(org.omg.dds.core.InstanceHandle)},
- * {@link DomainParticipant#ignoreSubscription(org.omg.dds.core.InstanceHandle)},
+ * {@link org.omg.dds.domain.DomainParticipant#ignoreParticipant(org.omg.dds.core.InstanceHandle)},
+ * {@link org.omg.dds.domain.DomainParticipant#ignorePublication(org.omg.dds.core.InstanceHandle)},
+ * {@link org.omg.dds.domain.DomainParticipant#ignoreSubscription(org.omg.dds.core.InstanceHandle)},
  * and
- * {@link DomainParticipant#ignoreTopic(org.omg.dds.core.InstanceHandle)}
+ * {@link org.omg.dds.domain.DomainParticipant#ignoreTopic(org.omg.dds.core.InstanceHandle)}
  * these QoS can assist an application to define and enforce its own security
  * policies. The use of this QoS is not limited to security, rather it offers
  * a simple, yet flexible extensibility mechanism.
Index: org/omg/dds/core/policy/Durability.java
===================================================================
--- org/omg/dds/core/policy/Durability.java	(revision 209)
+++ org/omg/dds/core/policy/Durability.java	(working copy)
@@ -18,27 +18,18 @@
 
 package org.omg.dds.core.policy;
 
-import org.omg.dds.core.Condition;
-import org.omg.dds.core.WaitSet;
-import org.omg.dds.core.status.OfferedIncompatibleQosStatus;
-import org.omg.dds.core.status.RequestedIncompatibleQosStatus;
-import org.omg.dds.domain.DomainParticipant;
-import org.omg.dds.pub.DataWriter;
-import org.omg.dds.sub.DataReader;
-import org.omg.dds.sub.InstanceState;
-import org.omg.dds.topic.Topic;
 
 
 /**
  * This policy expresses if the data should "outlive" their writing time.
  * 
- * <b>Concerns:</b> {@link Topic}, {@link DataReader}, {@link DataWriter}
+ * <b>Concerns:</b> {@link org.omg.dds.topic.Topic}, {@link org.omg.dds.sub.DataReader}, {@link org.omg.dds.pub.DataWriter}
  * 
  * <b>RxO:</b> Yes
  * 
  * <b>Changeable:</b> No
  * 
- * The decoupling between {@link DataReader} and {@link DataWriter} offered
+ * The decoupling between {@link org.omg.dds.sub.DataReader} and {@link org.omg.dds.pub.DataWriter} offered
  * by the Publish/Subscribe paradigm allows an application to write data even
  * if there are no current readers on the network. Moreover, a DataReader
  * that joins the network after some data has been written could potentially
@@ -48,7 +39,7 @@
  * although related, this does not strictly control what data the Service
  * will maintain internally. That is, the Service may choose to maintain some
  * data for its own purposes (e.g., flow control) and yet not make it
- * available to late-joining readers if the {@link Durability} is
+ * available to late-joining readers if the {@link org.omg.dds.core.policy.Durability} is
  * set to {@link Durability.Kind#VOLATILE}.
  * 
  * The value offered is considered compatible with the value requested if and
@@ -58,9 +49,9 @@
  * VOLATILE < TRANSIENT_LOCAL < TRANSIENT < PERSISTENT.
  * 
  * For the purpose of implementing the {@link Durability.Kind}
- * TRANSIENT or PERSISTENT, the service behaves "as if" for each {@link Topic}
+ * TRANSIENT or PERSISTENT, the service behaves "as if" for each {@link org.omg.dds.topic.Topic}
  * that has TRANSIENT or PERSISTENT DURABILITY kind there was a corresponding
- * "built-in" {@link DataReader} and {@link DataWriter} configured to have
+ * "built-in" {@link org.omg.dds.sub.DataReader} and {@link org.omg.dds.pub.DataWriter} configured to have
  * the same DURABILITY kind. In other words, it is "as if" somewhere in the
  * system (possibly on a remote node) there was a "built-in durability
  * DataReader" that subscribed to that Topic and a "built-in durability
@@ -70,7 +61,7 @@
  * For each Topic, the built-in fictitious "persistence service" DataReader
  * and DataWriter has its QoS configured from the Topic QoS of the
  * corresponding Topic. In other words, it is "as-if" the service first did
- * {@link DomainParticipant#findTopic(String, org.omg.dds.core.Duration)} to
+ * {@link org.omg.dds.domain.DomainParticipant#findTopic(String, org.omg.dds.core.Duration)} to
  * access the Topic, and then used the QoS from the Topic to configure the
  * fictitious built-in entities.
  * 
@@ -89,10 +80,10 @@
  * 
  * Incompatibilities between local DataReader/DataWriter entities and the
  * corresponding fictitious "built-in transient/persistent entities" cause
- * the {@link RequestedIncompatibleQosStatus}/
- * {@link OfferedIncompatibleQosStatus} to change and the corresponding
- * Listener invocations and/or signaling of {@link Condition} and
- * {@link WaitSet} objects as they would with non-fictitious entities.
+ * the {@link org.omg.dds.core.status.RequestedIncompatibleQosStatus}/
+ * {@link org.omg.dds.core.status.OfferedIncompatibleQosStatus} to change and the corresponding
+ * Listener invocations and/or signaling of {@link org.omg.dds.core.Condition} and
+ * {@link org.omg.dds.core.WaitSet} objects as they would with non-fictitious entities.
  * 
  * The setting of the serviceCleanupDelay controls when the TRANSIENT or
  * PERSISTENT service is able to remove all information regarding a data
@@ -101,12 +92,12 @@
  * 
  * <ol>
  *      <li>the instance has been explicitly disposed (instanceState =
- *          {@link InstanceState#NOT_ALIVE_DISPOSED}),</li>
+ *          {@link org.omg.dds.sub.InstanceState#NOT_ALIVE_DISPOSED}),</li>
  *      <li>and while in the NOT_ALIVE_DISPOSED state the system detects that
- *          there are no more "alive" {@link DataWriter} entities writing the
+ *          there are no more "alive" {@link org.omg.dds.pub.DataWriter} entities writing the
  *          instance, that is, all existing writers either unregister the
  *          instance (call
- *          {@link DataWriter#unregisterInstance(org.omg.dds.core.InstanceHandle)})
+ *          {@link org.omg.dds.pub.DataWriter#unregisterInstance(org.omg.dds.core.InstanceHandle)})
  *          or lose their liveliness,</li>
  *      <li>and a time interval longer that serviceCleanupDelay has elapsed
  *          since the moment the service detected that the previous two
@@ -176,8 +167,8 @@
     public enum Kind {
         /**
          * The Service does not need to keep any samples of data instances on
-         * behalf of any {@link DataReader} that is not known by the
-         * {@link DataWriter} at the time the instance is written. In other
+         * behalf of any {@link org.omg.dds.sub.DataReader} that is not known by the
+         * {@link org.omg.dds.pub.DataWriter} at the time the instance is written. In other
          * words the Service will only attempt to provide the data to
          * existing subscribers. This is the default kind.
          */
@@ -185,25 +176,25 @@
 
         /**
          * The Service will attempt to keep some samples so that they can be
-         * delivered to any potential late-joining {@link DataReader}. Which
+         * delivered to any potential late-joining {@link org.omg.dds.sub.DataReader}. Which
          * particular samples are kept depends on other QoS such as
-         * {@link History} and {@link ResourceLimits}.
+         * {@link org.omg.dds.core.policy.History} and {@link org.omg.dds.core.policy.ResourceLimits}.
          * 
          * For TRANSIENT_LOCAL, the service is only required to keep the data
-         * in the memory of the {@link DataWriter} that wrote the data and
+         * in the memory of the {@link org.omg.dds.pub.DataWriter} that wrote the data and
          * the data is not required to survive the DataWriter.
          */
         TRANSIENT_LOCAL,
 
         /**
          * The Service will attempt to keep some samples so that they can be
-         * delivered to any potential late-joining {@link DataReader}. Which
+         * delivered to any potential late-joining {@link org.omg.dds.sub.DataReader}. Which
          * particular samples are kept depends on other QoS such as
-         * {@link History} and {@link ResourceLimits}.
+         * {@link org.omg.dds.core.policy.History} and {@link org.omg.dds.core.policy.ResourceLimits}.
          * 
          * For TRANSIENT, the service is only required to keep the data in
          * memory and not in permanent storage; but the data is not tied to
-         * the life cycle of the {@link DataWriter} and will, in general,
+         * the life cycle of the {@link org.omg.dds.pub.DataWriter} and will, in general,
          * survive it. Support for TRANSIENT kind is optional.
          */
         TRANSIENT,
Index: org/omg/dds/core/policy/TopicData.java
===================================================================
--- org/omg/dds/core/policy/TopicData.java	(revision 209)
+++ org/omg/dds/core/policy/TopicData.java	(working copy)
@@ -18,29 +18,25 @@
 
 package org.omg.dds.core.policy;
 
-import org.omg.dds.domain.DomainParticipant;
-import org.omg.dds.pub.DataWriter;
-import org.omg.dds.sub.DataReader;
-import org.omg.dds.topic.Topic;
 
 
 /**
  * User data not known by the middleware, but distributed by means of
  * built-in topics. The default value is an empty (zero-sized) sequence.
  * 
- * <b>Concerns:</b> {@link Topic}
+ * <b>Concerns:</b> {@link org.omg.dds.topic.Topic}
  * 
  * <b>RxO:</b> No
  * 
  * <b>Changeable:</b> Yes
  * 
  * The purpose of this QoS is to allow the application to attach additional
- * information to the created {@link Topic}s such that when a remote
+ * information to the created {@link org.omg.dds.topic.Topic}s such that when a remote
  * application discovers their existence it can examine the information and
  * use it in an application-defined way. In combination with the listeners on
- * the {@link DataReader} and {@link DataWriter} as well as by means of
+ * the {@link org.omg.dds.sub.DataReader} and {@link org.omg.dds.pub.DataWriter} as well as by means of
  * operations such as
- * {@link DomainParticipant#ignoreTopic(org.omg.dds.core.InstanceHandle)},
+ * {@link org.omg.dds.domain.DomainParticipant#ignoreTopic(org.omg.dds.core.InstanceHandle)},
  * these QoS can assist an application to extend the provided QoS.
  */
 public interface TopicData extends QosPolicy.ForTopic
Index: org/omg/dds/core/policy/ResourceLimits.java
===================================================================
--- org/omg/dds/core/policy/ResourceLimits.java	(revision 209)
+++ org/omg/dds/core/policy/ResourceLimits.java	(working copy)
@@ -18,16 +18,13 @@
 
 package org.omg.dds.core.policy;
 
-import org.omg.dds.pub.DataWriter;
-import org.omg.dds.sub.DataReader;
-import org.omg.dds.topic.Topic;
 
 
 /**
  * Specifies the resources that the Service can consume in order to meet the
  * requested QoS.
  * 
- * <b>Concerns:</b> {@link Topic}, {@link DataReader}, {@link DataWriter}
+ * <b>Concerns:</b> {@link org.omg.dds.topic.Topic}, {@link org.omg.dds.sub.DataReader}, {@link org.omg.dds.pub.DataWriter}
  * 
  * <b>RxO:</b> No
  * 
@@ -41,7 +38,7 @@
  * hit against some of the QoS-imposed resource limits. Note that this may
  * occur when just a single DataReader cannot keep up with its corresponding
  * DataWriter. The behavior in this case depends on the setting for the
- * {@link Reliability}. If reliability is
+ * {@link org.omg.dds.core.policy.Reliability}. If reliability is
  * {@link Reliability.Kind#BEST_EFFORT}, then the Service is allowed
  * to drop samples. If the reliability is
  * {@link Reliability.Kind#RELIABLE}, the Service will block the
Index: org/omg/dds/core/policy/Reliability.java
===================================================================
--- org/omg/dds/core/policy/Reliability.java	(revision 209)
+++ org/omg/dds/core/policy/Reliability.java	(working copy)
@@ -21,26 +21,23 @@
 import java.util.concurrent.TimeUnit;
 
 import org.omg.dds.core.Duration;
-import org.omg.dds.pub.DataWriter;
-import org.omg.dds.sub.DataReader;
-import org.omg.dds.topic.Topic;
 
 
 /**
  * This policy indicates the level of reliability requested by a
- * {@link DataReader} or offered by a {@link DataWriter}. These levels are
+ * {@link org.omg.dds.sub.DataReader} or offered by a {@link org.omg.dds.pub.DataWriter}. These levels are
  * ordered, {@link Kind#BEST_EFFORT} being lower than {@link Kind#RELIABLE}.
  * A DataWriter offering a level is implicitly offering all levels below.
  * 
- * <b>Concerns:</b> {@link Topic}, {@link DataReader}, {@link DataWriter}
+ * <b>Concerns:</b> {@link org.omg.dds.topic.Topic}, {@link org.omg.dds.sub.DataReader}, {@link org.omg.dds.pub.DataWriter}
  * 
  * <b>RxO:</b> Yes
  * 
  * <b>Changeable:</b> No
  * 
  * The setting of this policy has a dependency on the setting of the
- * {@link ResourceLimits}. In case the RELIABILITY kind is set to
- * RELIABLE the {@link DataWriter#write(Object)} operation may block if the
+ * {@link org.omg.dds.core.policy.ResourceLimits}. In case the RELIABILITY kind is set to
+ * RELIABLE the {@link org.omg.dds.pub.DataWriter#write(Object)} operation may block if the
  * modification would cause data to be lost or else cause one of the limits
  * specified in the RESOURCE_LIMITS to be exceeded. Under these circumstances,
  * the RELIABILITY maxBlockingTime configures the maximum duration the write
@@ -124,19 +121,19 @@
          * Indicates that it is acceptable to not retry propagation of any
          * samples. Presumably new values for the samples are generated often
          * enough that it is not necessary to re-send or acknowledge any
-         * samples. This is the default value for {@link DataReader}s and
-         * {@link Topic}s.
+         * samples. This is the default value for {@link org.omg.dds.sub.DataReader}s and
+         * {@link org.omg.dds.topic.Topic}s.
          */
         BEST_EFFORT,
 
         /**
          * Specifies the Service will attempt to deliver all samples in its
          * history. Missed samples may be retried. In steady-state (no
-         * modifications communicated via the {@link DataWriter}) the
+         * modifications communicated via the {@link org.omg.dds.pub.DataWriter}) the
          * middleware guarantees that all samples in the DataWriter history
-         * will eventually be delivered to all the {@link DataReader} objects.
-         * Outside steady state the {@link History} and
-         * {@link ResourceLimits} will determine how samples become
+         * will eventually be delivered to all the {@link org.omg.dds.sub.DataReader} objects.
+         * Outside steady state the {@link org.omg.dds.core.policy.History} and
+         * {@link org.omg.dds.core.policy.ResourceLimits} will determine how samples become
          * part of the history and whether samples can be discarded from it.
          * This is the default value for DataWriters.
          */
Index: org/omg/dds/core/policy/Partition.java
===================================================================
--- org/omg/dds/core/policy/Partition.java	(revision 209)
+++ org/omg/dds/core/policy/Partition.java	(working copy)
@@ -21,27 +21,22 @@
 import java.util.Collection;
 import java.util.Set;
 
-import org.omg.dds.core.Entity;
-import org.omg.dds.pub.DataWriter;
-import org.omg.dds.pub.Publisher;
-import org.omg.dds.sub.DataReader;
-import org.omg.dds.sub.Subscriber;
 
 
 /**
  * This policy allows the introduction of a logical partition concept inside
  * the "physical" partition induced by a domain. It consists of a set of
  * strings that introduces a logical partition among the topics
- * visible by the {@link Publisher} and {@link Subscriber}.
+ * visible by the {@link org.omg.dds.pub.Publisher} and {@link org.omg.dds.sub.Subscriber}.
  * 
- * <b>Concerns:</b> {@link Publisher}, {@link Subscriber}
+ * <b>Concerns:</b> {@link org.omg.dds.pub.Publisher}, {@link org.omg.dds.sub.Subscriber}
  * 
  * <b>RxO:</b> No
  * 
  * <b>Changeable:</b> Yes
  * 
- * A {@link DataWriter} within a Publisher only communicates with a
- * {@link DataReader} in a Subscriber if (in addition to matching the Topic
+ * A {@link org.omg.dds.pub.DataWriter} within a Publisher only communicates with a
+ * {@link org.omg.dds.sub.DataReader} in a Subscriber if (in addition to matching the Topic
  * and having compatible QoS) the Publisher and Subscriber have a common
  * partition name string. Each string in the collection that defines this QoS
  * policy defines a partition name. A partition name may contain wild cards.
@@ -70,13 +65,13 @@
  * 
  * PARTITION names can be regular expressions and include wild cards as
  * defined by the POSIX fnmatch API (1003.2-1992 section B.6). Either
- * {@link Publisher} or {@link Subscriber} may include regular expressions in
+ * {@link org.omg.dds.pub.Publisher} or {@link org.omg.dds.sub.Subscriber} may include regular expressions in
  * partition names, but no two names that both contain wild cards will ever
  * be considered to match. This means that although regular expressions may
  * be used both at publisher as well as subscriber side, the service will not
  * try to match two regular expressions (between publishers and subscribers).
  * 
- * Partitions are different from creating {@link Entity} objects in different
+ * Partitions are different from creating {@link org.omg.dds.core.Entity} objects in different
  * domains in several ways. First, entities belonging to different domains
  * are completely isolated from each other; there is no traffic, meta-traffic
  * or any other way for an application or the Service itself to see entities
Index: org/omg/dds/core/policy/Presentation.java
===================================================================
--- org/omg/dds/core/policy/Presentation.java	(revision 209)
+++ org/omg/dds/core/policy/Presentation.java	(working copy)
@@ -18,10 +18,6 @@
 
 package org.omg.dds.core.policy;
 
-import org.omg.dds.pub.DataWriter;
-import org.omg.dds.pub.Publisher;
-import org.omg.dds.sub.DataReader;
-import org.omg.dds.sub.Subscriber;
 
 
 /**
@@ -33,7 +29,7 @@
  * can be preserved. The two booleans control whether coherent access and
  * ordered access are supported within the scope accessScope.
  * 
- * <b>Concerns:</b> {@link Publisher}, {@link Subscriber}
+ * <b>Concerns:</b> {@link org.omg.dds.pub.Publisher}, {@link org.omg.dds.sub.Subscriber}
  * 
  * <b>RxO:</b> Yes
  * 
@@ -45,8 +41,8 @@
  * 
  * The setting of coherentAccess controls whether the Service will
  * preserve the groupings of changes made by the publishing application
- * by means of the operations {@link Publisher#beginCoherentChanges()} and
- * {@link Publisher#endCoherentChanges()}.
+ * by means of the operations {@link org.omg.dds.pub.Publisher#beginCoherentChanges()} and
+ * {@link org.omg.dds.pub.Publisher#endCoherentChanges()}.
  * 
  * The setting of orderedAccess controls whether the Service will preserve
  * the order of changes.
@@ -96,8 +92,8 @@
      * <ul>
      *      <li>If accessAcope is set to
      *          {@link Presentation.AccessScopeKind#INSTANCE}, the
-     *          use of {@link Publisher#beginCoherentChanges()} and
-     *          {@link Publisher#endCoherentChanges()} has no effect on how
+     *          use of {@link org.omg.dds.pub.Publisher#beginCoherentChanges()} and
+     *          {@link org.omg.dds.pub.Publisher#endCoherentChanges()} has no effect on how
      *          the subscriber can access the data because with the scope
      *          limited to each instance, changes to separate instances are
      *          considered independent and thus cannot be grouped by a
@@ -105,18 +101,18 @@
      *      <li>If accessScope is set to
      *          {@link Presentation.AccessScopeKind#TOPIC}, then
      *          coherent changes (indicated by their enclosure within calls to
-     *          {@link Publisher#beginCoherentChanges()} and
-     *          {@link Publisher#endCoherentChanges()}) will be made available
-     *          as such to each remote {@link DataReader} independently. That
+     *          {@link org.omg.dds.pub.Publisher#beginCoherentChanges()} and
+     *          {@link org.omg.dds.pub.Publisher#endCoherentChanges()}) will be made available
+     *          as such to each remote {@link org.omg.dds.sub.DataReader} independently. That
      *          is, changes made to instances within each individual
-     *          {@link DataWriter} will be available as coherent with respect
+     *          {@link org.omg.dds.pub.DataWriter} will be available as coherent with respect
      *          to other changes to instances in that same DataWriter, but
      *          will not be grouped with changes made to instances belonging
      *          to a different DataWriter.
      *      <li>If accessScope is set to
      *          {@link Presentation.AccessScopeKind#GROUP}, then
      *          coherent changes made to instances through a DataWriter
-     *          attached to a common {@link Publisher} are made available as
+     *          attached to a common {@link org.omg.dds.pub.Publisher} are made available as
      *          a unit to remote subscribers.</li>
      * </ul>
      * 
@@ -136,16 +132,16 @@
      *      that changes (creations, deletions, modifications) made to two
      *      instances are not necessarily seen in the order they occur. This
      *      is the case even if it is the same application thread making the
-     *      changes using the same {@link DataWriter}.</li>
+     *      changes using the same {@link org.omg.dds.pub.DataWriter}.</li>
      *  <li>If accessScope is set to
      *      {@link Presentation.AccessScopeKind#TOPIC}, changes
      *      (creations, deletions, modifications) made by a single
-     *      {@link DataWriter} are made available to subscribers in the same
+     *      {@link org.omg.dds.pub.DataWriter} are made available to subscribers in the same
      *      order they occur. Changes made to instances through different
      *      DataWriter entities are not necessarily seen in the order they
      *      occur. This is the case, even if the changes are made by a single
      *      application thread using DataWriter objects attached to the same
-     *      {@link Publisher}.</li>
+     *      {@link org.omg.dds.pub.Publisher}.</li>
      *  <li>Finally, if accessScope is set to
      *      {@link Presentation.AccessScopeKind#GROUP}, changes made
      *      to instances via DataWriter entities attached to the same
@@ -201,16 +197,16 @@
         INSTANCE,
 
         /**
-         * Scope spans to all instances within the same {@link DataWriter}
-         * (or {@link DataReader}), but not across instances in different
+         * Scope spans to all instances within the same {@link org.omg.dds.pub.DataWriter}
+         * (or {@link org.omg.dds.sub.DataReader}), but not across instances in different
          * DataWriter (or DataReader).
          */
         TOPIC,
 
         /**
          * [optional] Scope spans to all instances belonging to
-         * {@link DataWriter} (or {@link DataReader}) entities within the
-         * same {@link Publisher} (or {@link Subscriber}).
+         * {@link org.omg.dds.pub.DataWriter} (or {@link org.omg.dds.sub.DataReader}) entities within the
+         * same {@link org.omg.dds.pub.Publisher} (or {@link org.omg.dds.sub.Subscriber}).
          */
         GROUP
     }
Index: org/omg/dds/core/policy/ReaderDataLifecycle.java
===================================================================
--- org/omg/dds/core/policy/ReaderDataLifecycle.java	(revision 209)
+++ org/omg/dds/core/policy/ReaderDataLifecycle.java	(working copy)
@@ -21,16 +21,13 @@
 import java.util.concurrent.TimeUnit;
 
 import org.omg.dds.core.Duration;
-import org.omg.dds.sub.DataReader;
-import org.omg.dds.sub.InstanceState;
-import org.omg.dds.sub.ViewState;
 
 
 /**
- * Specifies the behavior of the {@link DataReader} with regards to the life
+ * Specifies the behavior of the {@link org.omg.dds.sub.DataReader} with regards to the life
  * cycle of the data instances it manages.
  * 
- * <b>Concerns:</b> {@link DataReader}
+ * <b>Concerns:</b> {@link org.omg.dds.sub.DataReader}
  * 
  * <b>RxO:</b> N/A
  * 
@@ -43,11 +40,11 @@
  * 
  * The DataReader internally maintains the samples that have not been taken
  * by the application, subject to the constraints imposed by other QoS
- * policies such as {@link History} and
- * {@link ResourceLimits}.
+ * policies such as {@link org.omg.dds.core.policy.History} and
+ * {@link org.omg.dds.core.policy.ResourceLimits}.
  * 
  * The DataReader also maintains information regarding the identity,
- * {@link ViewState} and {@link InstanceState} of data instances even after
+ * {@link org.omg.dds.sub.ViewState} and {@link org.omg.dds.sub.InstanceState} of data instances even after
  * all samples have been 'taken.' This is needed to properly compute the
  * states when future samples arrive.
  * 
@@ -55,8 +52,8 @@
  * for instances for which there are no writers and for which all samples
  * have been 'taken.' The last sample the DataReader will have taken for that
  * instance will have an instance state of either
- * {@link InstanceState#NOT_ALIVE_NO_WRITERS} or
- * {@link InstanceState#NOT_ALIVE_DISPOSED} depending on whether the last
+ * {@link org.omg.dds.sub.InstanceState#NOT_ALIVE_NO_WRITERS} or
+ * {@link org.omg.dds.sub.InstanceState#NOT_ALIVE_DISPOSED} depending on whether the last
  * writer that had ownership of the instance disposed it or not. In the
  * absence of the READER_DATA_LIFECYCLE QoS this behavior could cause
  * problems if the application "forgets" to 'take' those samples. The
Index: org/omg/dds/core/policy/Liveliness.java
===================================================================
--- org/omg/dds/core/policy/Liveliness.java	(revision 209)
+++ org/omg/dds/core/policy/Liveliness.java	(working copy)
@@ -21,31 +21,23 @@
 import java.util.concurrent.TimeUnit;
 
 import org.omg.dds.core.Duration;
-import org.omg.dds.core.Entity;
-import org.omg.dds.core.WaitSet;
-import org.omg.dds.core.status.LivelinessChangedStatus;
-import org.omg.dds.core.status.Status;
-import org.omg.dds.domain.DomainParticipant;
-import org.omg.dds.pub.DataWriter;
-import org.omg.dds.sub.DataReader;
-import org.omg.dds.topic.Topic;
 
 
 /**
  * Determines the mechanism and parameters used by the application to
- * determine whether an {@link Entity} is "active" (alive). The "liveliness"
+ * determine whether an {@link org.omg.dds.core.Entity} is "active" (alive). The "liveliness"
  * status of an Entity is used to maintain instance ownership in combination
- * with the setting of the {@link Ownership}. The application is
- * also informed via an Entity {@link Status} change when an Entity is no
- * longer alive. The {@link DataReader} requests that liveliness of the
+ * with the setting of the {@link org.omg.dds.core.policy.Ownership}. The application is
+ * also informed via an Entity {@link org.omg.dds.core.status.Status} change when an Entity is no
+ * longer alive. The {@link org.omg.dds.sub.DataReader} requests that liveliness of the
  * writers is maintained by the requested means and loss of liveliness is
- * detected with delay not to exceed the leaseDuration. The {@link DataWriter}
+ * detected with delay not to exceed the leaseDuration. The {@link org.omg.dds.pub.DataWriter}
  * commits to signaling its liveliness using the stated means at intervals
  * not to exceed the leaseDuration. The default kind is
  * {@link Liveliness.Kind#AUTOMATIC} and the default value of the
  * leaseDuration is infinite.
  * 
- * <b>Concerns:</b> {@link Topic}, {@link DataReader}, {@link DataWriter}
+ * <b>Concerns:</b> {@link org.omg.dds.topic.Topic}, {@link org.omg.dds.sub.DataReader}, {@link org.omg.dds.pub.DataWriter}
  * 
  * <b>RxO:</b> Yes
  * 
@@ -60,7 +52,7 @@
  * applications that only need to detect failures at the process level, but
  * not application-logic failures within a process. The Service takes
  * responsibility for renewing the leases at the required rates and thus, as
- * long as the local process where a {@link DomainParticipant} is running and
+ * long as the local process where a {@link org.omg.dds.domain.DomainParticipant} is running and
  * the link connecting it to remote participants remains connected, the
  * entities within the DomainParticipant will be considered alive. This
  * requires the lowest overhead.
@@ -70,8 +62,8 @@
  * side to periodically assert the liveliness before the lease expires to
  * indicate the corresponding Entity is still alive. The action can be
  * explicit by calling the <code>assertLiveliness</code> operations
- * ({@link DataWriter#assertLiveliness()},
- * {@link DomainParticipant#assertLiveliness()}) or implicit by writing some
+ * ({@link org.omg.dds.pub.DataWriter#assertLiveliness()},
+ * {@link org.omg.dds.domain.DomainParticipant#assertLiveliness()}) or implicit by writing some
  * data.
  * 
  * The two possible manual settings control the granularity at which the
@@ -100,8 +92,8 @@
  * 
  * Changes in LIVELINESS must be detected by the Service with a
  * time granularity greater or equal to the leaseDuration. This ensures that
- * the value of the {@link LivelinessChangedStatus} is updated at least once
- * during each leaseDuration and the related Listeners and {@link WaitSet}s
+ * the value of the {@link org.omg.dds.core.status.LivelinessChangedStatus} is updated at least once
+ * during each leaseDuration and the related Listeners and {@link org.omg.dds.core.WaitSet}s
  * are notified within a leaseDuration from the time the LIVELINESS changed.
  */
 public interface Liveliness
@@ -161,7 +153,7 @@
     public enum Kind {
         /**
          * The infrastructure will automatically signal liveliness for the
-         * {@link DataWriter}s at least as often as required by the
+         * {@link org.omg.dds.pub.DataWriter}s at least as often as required by the
          * leaseDuration.
          */
         AUTOMATIC,
@@ -170,10 +162,10 @@
          * The user application takes responsibility to signal liveliness to
          * the Service. Liveliness must be asserted at least once every
          * leaseDuration otherwise the Service will assume the corresponding
-         * {@link Entity} is no longer "active/alive."
+         * {@link org.omg.dds.core.Entity} is no longer "active/alive."
          * 
-         * The Service will assume that as long as at least one {@link Entity}
-         * within the {@link DomainParticipant} has asserted its liveliness
+         * The Service will assume that as long as at least one {@link org.omg.dds.core.Entity}
+         * within the {@link org.omg.dds.domain.DomainParticipant} has asserted its liveliness
          * the other Entities in that same DomainParticipant are also alive.
          */
         MANUAL_BY_PARTICIPANT,
@@ -182,9 +174,9 @@
          * The user application takes responsibility to signal liveliness to
          * the Service. Liveliness must be asserted at least once every
          * leaseDuration otherwise the Service will assume the corresponding
-         * {@link Entity} is no longer "active/alive."
+         * {@link org.omg.dds.core.Entity} is no longer "active/alive."
          * 
-         * The Service will only assume liveliness of the {@link DataWriter}
+         * The Service will only assume liveliness of the {@link org.omg.dds.pub.DataWriter}
          * if the application has asserted liveliness of that DataWriter
          * itself.
          */
Index: org/omg/dds/core/policy/DestinationOrder.java
===================================================================
--- org/omg/dds/core/policy/DestinationOrder.java	(revision 209)
+++ org/omg/dds/core/policy/DestinationOrder.java	(working copy)
@@ -18,20 +18,15 @@
 
 package org.omg.dds.core.policy;
 
-import org.omg.dds.pub.DataWriter;
-import org.omg.dds.pub.Publisher;
-import org.omg.dds.sub.DataReader;
-import org.omg.dds.sub.Subscriber;
-import org.omg.dds.topic.Topic;
 
 
 /**
  * Controls the criteria used to determine the logical order among changes
- * made by {@link Publisher} entities to the same instance of data (i.e.,
+ * made by {@link org.omg.dds.pub.Publisher} entities to the same instance of data (i.e.,
  * matching Topic and key). The default kind is
  * {@link DestinationOrder.Kind#BY_RECEPTION_TIMESTAMP}.
  * 
- * <b>Concerns:</b> {@link Topic}, {@link DataReader}, {@link DataWriter}
+ * <b>Concerns:</b> {@link org.omg.dds.topic.Topic}, {@link org.omg.dds.sub.DataReader}, {@link org.omg.dds.pub.DataWriter}
  * 
  * <b>RxO:</b> Yes
  * 
@@ -42,12 +37,12 @@
  * associated with different Publisher objects) running on different nodes.
  * 
  * The setting {@link Kind#BY_RECEPTION_TIMESTAMP} indicates that, assuming
- * the {@link Ownership} allows it, the latest received value for
+ * the {@link org.omg.dds.core.policy.Ownership} allows it, the latest received value for
  * the instance should be the one whose value is kept. This is the default
  * value.
  * 
  * The setting {@link Kind#BY_SOURCE_TIMESTAMP} indicates that, assuming the
- * {@link Ownership} allows it, a time stamp placed at the source
+ * {@link org.omg.dds.core.policy.Ownership} allows it, a time stamp placed at the source
  * should be used. This is the only setting that, in the case of concurrent
  * same-strength DataWriter objects updating the same instance, ensures all
  * subscribers will end up with the same final value for the instance. The
@@ -103,7 +98,7 @@
     public enum Kind {
         /**
          * Indicates that data is ordered based on the reception time at each
-         * {@link Subscriber}. Since each subscriber may receive the data at
+         * {@link org.omg.dds.sub.Subscriber}. Since each subscriber may receive the data at
          * different times there is no guaranteed that the changes will be
          * seen in the same order. Consequently, it is possible for each
          * subscriber to end up with a different final value for the data.
Index: org/omg/dds/core/policy/Ownership.java
===================================================================
--- org/omg/dds/core/policy/Ownership.java	(revision 209)
+++ org/omg/dds/core/policy/Ownership.java	(working copy)
@@ -18,17 +18,14 @@
 
 package org.omg.dds.core.policy;
 
-import org.omg.dds.pub.DataWriter;
-import org.omg.dds.sub.DataReader;
-import org.omg.dds.topic.Topic;
 
 
 /**
- * [optional] Specifies whether it is allowed for multiple {@link DataWriter}s
+ * [optional] Specifies whether it is allowed for multiple {@link org.omg.dds.pub.DataWriter}s
  * to write the same instance of the data and if so, how these modifications
  * should be arbitrated.
  * 
- * <b>Concerns:</b> {@link Topic}, {@link DataReader}, {@link DataWriter}
+ * <b>Concerns:</b> {@link org.omg.dds.topic.Topic}, {@link org.omg.dds.sub.DataReader}, {@link org.omg.dds.pub.DataWriter}
  * 
  * <b>RxO:</b> Yes
  * 
@@ -80,12 +77,12 @@
 
         /**
          * Indicates each instance can only be owned by one
-         * {@link DataWriter}, but the owner of an instance can change
+         * {@link org.omg.dds.pub.DataWriter}, but the owner of an instance can change
          * dynamically. The selection of the owner is controlled by the
-         * setting of the {@link OwnershipStrength}. The owner is
+         * setting of the {@link org.omg.dds.core.policy.OwnershipStrength}. The owner is
          * always set to be the highest-strength DataWriter object among the
          * ones currently "active" (as determined by the
-         * {@link Liveliness}).
+         * {@link org.omg.dds.core.policy.Liveliness}).
          */
         EXCLUSIVE
     }
Index: org/omg/dds/core/policy/GroupData.java
===================================================================
--- org/omg/dds/core/policy/GroupData.java	(revision 209)
+++ org/omg/dds/core/policy/GroupData.java	(working copy)
@@ -18,33 +18,27 @@
 
 package org.omg.dds.core.policy;
 
-import org.omg.dds.pub.DataWriter;
-import org.omg.dds.pub.DataWriterListener;
-import org.omg.dds.pub.Publisher;
-import org.omg.dds.sub.DataReader;
-import org.omg.dds.sub.DataReaderListener;
-import org.omg.dds.sub.Subscriber;
 
 
 /**
  * User data not known by the middleware, but distributed by means of
  * built-in topics. The default value is an empty (zero-sized) sequence.
  * 
- * <b>Concerns:</b> {@link Publisher}, {@link Subscriber}
+ * <b>Concerns:</b> {@link org.omg.dds.pub.Publisher}, {@link org.omg.dds.sub.Subscriber}
  * 
  * <b>RxO:</b> No
  * 
  * <b>Changeable:</b> Yes
  * 
  * The purpose of this QoS is to allow the application to attach additional
- * information to the created {@link Publisher} or {@link Subscriber}. The
+ * information to the created {@link org.omg.dds.pub.Publisher} or {@link org.omg.dds.sub.Subscriber}. The
  * value of the GROUP_DATA is available to the application on the
- * {@link DataReader} and {@link DataWriter} entities and is propagated by
+ * {@link org.omg.dds.sub.DataReader} and {@link org.omg.dds.pub.DataWriter} entities and is propagated by
  * means of the built-in topics.
  * 
  * This QoS can be used by an application combination with the
- * {@link DataReaderListener} and {@link DataWriterListener} to implement
- * matching policies similar to those of the {@link Partition}
+ * {@link org.omg.dds.sub.DataReaderListener} and {@link org.omg.dds.pub.DataWriterListener} to implement
+ * matching policies similar to those of the {@link org.omg.dds.core.policy.Partition}
  * except the decision can be made based on an application-defined policy.
  */
 public interface GroupData
Index: org/omg/dds/core/policy/WriterDataLifecycle.java
===================================================================
--- org/omg/dds/core/policy/WriterDataLifecycle.java	(revision 209)
+++ org/omg/dds/core/policy/WriterDataLifecycle.java	(working copy)
@@ -18,16 +18,11 @@
 
 package org.omg.dds.core.policy;
 
-import org.omg.dds.domain.DomainParticipant;
-import org.omg.dds.pub.DataWriter;
-import org.omg.dds.pub.Publisher;
-
-
 /**
- * Specifies the behavior of the {@link DataWriter} with regards to the life
+ * Specifies the behavior of the {@link org.omg.dds.pub.DataWriter} with regards to the life
  * cycle of the data instances it manages.
  * 
- * <b>Concerns:</b> {@link DataWriter}
+ * <b>Concerns:</b> {@link org.omg.dds.pub.DataWriter}
  * 
  * <b>RxO:</b> N/A
  * 
@@ -36,19 +31,19 @@
  * This policy controls the behavior of the DataWriter with regards to the
  * lifecycle of the data instances it manages, that is, the data instances
  * that have been either explicitly registered with the DataWriter using the
- * {@link DataWriter#registerInstance(Object)} operations or implicitly by
- * directly writing the data (see {@link DataWriter#write(Object)}).
+ * {@link org.omg.dds.pub.DataWriter#registerInstance(Object)} operations or implicitly by
+ * directly writing the data (see {@link org.omg.dds.pub.DataWriter#write(Object)}).
  * 
  * The autodisposeUnregisteredInstances flag controls the behavior when the
  * DataWriter unregisters an instance by means of the
- * {@link DataWriter#unregisterInstance(org.omg.dds.core.InstanceHandle)}
+ * {@link org.omg.dds.pub.DataWriter#unregisterInstance(org.omg.dds.core.InstanceHandle)}
  * operations:
  * 
  * <ul>
  *     <li>The setting "autodisposeUnregisteredInstances = true' causes the
  *         DataWriter to dispose the instance each time it is unregistered.
  *         The behavior is identical to explicitly calling one of the
- *         {@link DataWriter#dispose(org.omg.dds.core.InstanceHandle)}
+ *         {@link org.omg.dds.pub.DataWriter#dispose(org.omg.dds.core.InstanceHandle)}
  *         operations on the instance prior to calling the unregister
  *         operation.</li>
  * 
@@ -63,13 +58,13 @@
  * </ul>
  * 
  * Note that the deletion of a DataWriter automatically unregisters all data
- * instances it manages (see {@link DataWriter#close()}). Therefore the
+ * instances it manages (see {@link org.omg.dds.pub.DataWriter#close()}). Therefore the
  * setting of the autodisposeUnregisteredInstances flag will determine
  * whether instances are ultimately disposed when the DataWriter is deleted
- * either directly by means of the {@link DataWriter#close()} operation or
+ * either directly by means of the {@link org.omg.dds.pub.DataWriter#close()} operation or
  * indirectly as a consequence of calling
- * {@link Publisher#closeContainedEntities()} or
- * {@link DomainParticipant#closeContainedEntities()}.
+ * {@link org.omg.dds.pub.Publisher#closeContainedEntities()} or
+ * {@link org.omg.dds.domain.DomainParticipant#closeContainedEntities()}.
  */
 public interface WriterDataLifecycle extends QosPolicy.ForDataWriter
 {
Index: org/omg/dds/core/policy/PolicyFactory.java
===================================================================
--- org/omg/dds/core/policy/PolicyFactory.java	(revision 209)
+++ org/omg/dds/core/policy/PolicyFactory.java	(working copy)
@@ -1,122 +1,122 @@
-package org.omg.dds.core.policy;
-
-import org.omg.dds.core.ServiceEnvironment;
-
-public abstract class PolicyFactory implements org.omg.dds.core.DDSObject {
-
-	public static PolicyFactory getPolicyFactory(ServiceEnvironment env)
-	{
-		return env.getSPI().getPolicyFactory();
-	}
-	
-    /**
-     * @return the durability
-     */
-    public abstract Durability Durability();
-
-    /**
-     * @return the deadline
-     */
-    public abstract Deadline Deadline();
-
-    /**
-     * @return the latencyBudget
-     */
-    public abstract LatencyBudget LatencyBudget();
-
-    /**
-     * @return the liveliness
-     */
-    public abstract Liveliness Liveliness();
-
-    /**
-     * @return the destinationOrder
-     */
-    public abstract DestinationOrder DestinationOrder();
-
-    /**
-     * @return the history
-     */
-    public abstract History History();
-
-    /**
-     * @return the resourceLimits
-     */
-    public abstract ResourceLimits ResourceLimits();
-
-    /**
-     * @return the userData
-     */
-    public abstract UserData UserData();
-
-    /**
-     * @return the ownership
-     */
-    public abstract Ownership Ownership();
-
-    /**
-     * @return the timeBasedFilter
-     */
-    public abstract TimeBasedFilter TimeBasedFilter();
-
-    /**
-     * @return the readerDataLifecycle
-     */
-    public abstract ReaderDataLifecycle ReaderDataLifecycle();
-
-    /**
-     * @return the Representation
-     */
-    public abstract DataRepresentation Representation();
-
-    /**
-     * @return the typeConsistency
-     */
-    public abstract TypeConsistencyEnforcement TypeConsistency();
-
-    /**
-     * @return the durabilityService
-     */
-    public abstract DurabilityService DurabilityService();
-
-    /**
-     * @return the reliability
-     */
-    public abstract Reliability Reliability();
-
-    /**
-     * @return the transportPriority
-     */
-    public abstract TransportPriority TransportPriority();
-
-    /**
-     * @return the lifespan
-     */
-    public abstract Lifespan Lifespan();
-
-    /**
-     * @return the ownershipStrength
-     */
-    public abstract OwnershipStrength OwnershipStrength();
-
-    /**
-     * @return the writerDataLifecycle
-     */
-    public abstract WriterDataLifecycle WriterDataLifecycle();
-
-    /**
-     * @return the partition
-     */
-    public abstract Partition getPartition();
-
-    /**
-     * @return the groupData
-     */
-    public abstract GroupData getGroupData();
-
-    /**
-     * @return the entityFactory
-     */
-    public abstract EntityFactory getEntityFactory();
-}
-
+package org.omg.dds.core.policy;
+
+import org.omg.dds.core.ServiceEnvironment;
+
+public abstract class PolicyFactory implements org.omg.dds.core.DDSObject {
+
+	public static PolicyFactory getPolicyFactory(ServiceEnvironment env)
+	{
+		return env.getSPI().getPolicyFactory();
+	}
+	
+    /**
+     * @return the durability
+     */
+    public abstract Durability Durability();
+
+    /**
+     * @return the deadline
+     */
+    public abstract Deadline Deadline();
+
+    /**
+     * @return the latencyBudget
+     */
+    public abstract LatencyBudget LatencyBudget();
+
+    /**
+     * @return the liveliness
+     */
+    public abstract Liveliness Liveliness();
+
+    /**
+     * @return the destinationOrder
+     */
+    public abstract DestinationOrder DestinationOrder();
+
+    /**
+     * @return the history
+     */
+    public abstract History History();
+
+    /**
+     * @return the resourceLimits
+     */
+    public abstract ResourceLimits ResourceLimits();
+
+    /**
+     * @return the userData
+     */
+    public abstract UserData UserData();
+
+    /**
+     * @return the ownership
+     */
+    public abstract Ownership Ownership();
+
+    /**
+     * @return the timeBasedFilter
+     */
+    public abstract TimeBasedFilter TimeBasedFilter();
+
+    /**
+     * @return the readerDataLifecycle
+     */
+    public abstract ReaderDataLifecycle ReaderDataLifecycle();
+
+    /**
+     * @return the Representation
+     */
+    public abstract DataRepresentation Representation();
+
+    /**
+     * @return the typeConsistency
+     */
+    public abstract TypeConsistencyEnforcement TypeConsistency();
+
+    /**
+     * @return the durabilityService
+     */
+    public abstract DurabilityService DurabilityService();
+
+    /**
+     * @return the reliability
+     */
+    public abstract Reliability Reliability();
+
+    /**
+     * @return the transportPriority
+     */
+    public abstract TransportPriority TransportPriority();
+
+    /**
+     * @return the lifespan
+     */
+    public abstract Lifespan Lifespan();
+
+    /**
+     * @return the ownershipStrength
+     */
+    public abstract OwnershipStrength OwnershipStrength();
+
+    /**
+     * @return the writerDataLifecycle
+     */
+    public abstract WriterDataLifecycle WriterDataLifecycle();
+
+    /**
+     * @return the partition
+     */
+    public abstract Partition getPartition();
+
+    /**
+     * @return the groupData
+     */
+    public abstract GroupData getGroupData();
+
+    /**
+     * @return the entityFactory
+     */
+    public abstract EntityFactory getEntityFactory();
+}
+
Index: org/omg/dds/core/policy/DurabilityService.java
===================================================================
--- org/omg/dds/core/policy/DurabilityService.java	(revision 209)
+++ org/omg/dds/core/policy/DurabilityService.java	(working copy)
@@ -21,9 +21,6 @@
 import java.util.concurrent.TimeUnit;
 
 import org.omg.dds.core.Duration;
-import org.omg.dds.pub.DataWriter;
-import org.omg.dds.sub.DataReader;
-import org.omg.dds.topic.Topic;
 
 
 /**
@@ -32,15 +29,15 @@
  * {@link Durability.Kind#TRANSIENT} and
  * {@link Durability.Kind#PERSISTENT}.
  * 
- * <b>Concerns:</b> {@link Topic}, {@link DataWriter}
+ * <b>Concerns:</b> {@link org.omg.dds.topic.Topic}, {@link org.omg.dds.pub.DataWriter}
  * 
  * <b>RxO:</b> No
  * 
  * <b>Changeable:</b> No
  * 
- * This policy is used to configure the {@link History} and the
- * {@link ResourceLimits} used by the fictitious {@link DataReader}
- * and {@link DataWriter} used by the "persistence service." The "persistence
+ * This policy is used to configure the {@link org.omg.dds.core.policy.History} and the
+ * {@link org.omg.dds.core.policy.ResourceLimits} used by the fictitious {@link org.omg.dds.sub.DataReader}
+ * and {@link org.omg.dds.pub.DataWriter} used by the "persistence service." The "persistence
  * service" is the one responsible for implementing
  * {@link Durability.Kind#TRANSIENT} and
  * {@link Durability.Kind#PERSISTENT}.
Index: org/omg/dds/core/policy/LatencyBudget.java
===================================================================
--- org/omg/dds/core/policy/LatencyBudget.java	(revision 209)
+++ org/omg/dds/core/policy/LatencyBudget.java	(working copy)
@@ -21,9 +21,6 @@
 import java.util.concurrent.TimeUnit;
 
 import org.omg.dds.core.Duration;
-import org.omg.dds.pub.DataWriter;
-import org.omg.dds.sub.DataReader;
-import org.omg.dds.topic.Topic;
 
 
 /**
@@ -35,7 +32,7 @@
  * value of the duration is zero indicating that the delay should be
  * minimized.
  * 
- * <b>Concerns:</b> {@link Topic}, {@link DataReader}, {@link DataWriter}
+ * <b>Concerns:</b> {@link org.omg.dds.topic.Topic}, {@link org.omg.dds.sub.DataReader}, {@link org.omg.dds.pub.DataWriter}
  * 
  * <b>RxO:</b> Yes
  * 
Index: org/omg/dds/core/policy/OwnershipStrength.java
===================================================================
--- org/omg/dds/core/policy/OwnershipStrength.java	(revision 209)
+++ org/omg/dds/core/policy/OwnershipStrength.java	(working copy)
@@ -18,19 +18,17 @@
 
 package org.omg.dds.core.policy;
 
-import org.omg.dds.pub.DataWriter;
-import org.omg.dds.topic.Topic;
 
 
 /**
  * [optional] Specifies the value of the "strength" used to arbitrate among
- * multiple {@link DataWriter} objects that attempt to modify the same
- * instance of a data object (identified by {@link Topic} + key). This policy
- * only applies if the {@link Ownership#getKind()} is
+ * multiple {@link org.omg.dds.pub.DataWriter} objects that attempt to modify the same
+ * instance of a data object (identified by {@link org.omg.dds.topic.Topic} + key). This policy
+ * only applies if the {@link org.omg.dds.core.policy.Ownership#getKind()} is
  * {@link Ownership.Kind#EXCLUSIVE}. The default value of the
  * ownership strength is zero.
  * 
- * <b>Concerns:</b> {@link DataWriter}
+ * <b>Concerns:</b> {@link org.omg.dds.pub.DataWriter}
  * 
  * <b>RxO:</b> N/A
  * 
Index: org/omg/dds/core/policy/TransportPriority.java
===================================================================
--- org/omg/dds/core/policy/TransportPriority.java	(revision 209)
+++ org/omg/dds/core/policy/TransportPriority.java	(working copy)
@@ -18,16 +18,12 @@
 
 package org.omg.dds.core.policy;
 
-import org.omg.dds.pub.DataWriter;
-import org.omg.dds.topic.Topic;
-
-
 /**
  * This policy is a hint to the infrastructure as to how to set the priority
  * of the underlying transport used to send the data. The default value is
  * zero.
  * 
- * <b>Concerns:</b> {@link Topic}, {@link DataWriter}
+ * <b>Concerns:</b> {@link org.omg.dds.topic.Topic}, {@link org.omg.dds.pub.DataWriter}
  * 
  * <b>RxO:</b> N/A
  * 
Index: org/omg/dds/core/WaitSet.java
===================================================================
--- org/omg/dds/core/WaitSet.java	(revision 202)
+++ org/omg/dds/core/WaitSet.java	(working copy)
@@ -25,7 +25,7 @@
 
 /**
  * A WaitSet object allows an application to wait until one or more of the
- * attached {@link Condition} objects has a triggerValue of true or else until
+ * attached {@link org.omg.dds.core.Condition} objects has a triggerValue of true or else until
  * the timeout expires.
  * 
  * WaitSet is not necessarily associated with a single
@@ -37,8 +37,8 @@
  * 
  * <ul>
  *     <li>The application indicates which relevant information it wants to
- *         get by creating {@link Condition} objects
- *         ({@link StatusCondition}, {@link org.omg.dds.sub.ReadCondition} or
+ *         get by creating {@link org.omg.dds.core.Condition} objects
+ *         ({@link org.omg.dds.core.StatusCondition}, {@link org.omg.dds.sub.ReadCondition} or
  *         {@link org.omg.dds.sub.QueryCondition}) and attaching them to a
  *          WaitSet.</li>
  *     <li>It then waits on that WaitSet until the triggerValue of one or
@@ -46,13 +46,13 @@
  *     <li>It then uses the result of the wait (i.e., the list of Condition
  *         objects with triggerValue == true) to actually get the information
  *         by calling:<ul>
- *         <li>{@link Entity#getStatusChanges()} and then
+ *         <li>{@link org.omg.dds.core.Entity#getStatusChanges()} and then
  *             <code>get&lt;<i>CommunicationStatus</i>&gt;</code> on the
  *             relevant Entity.</li>
- *         <li>{@link Entity#getStatusChanges()} and then
+ *         <li>{@link org.omg.dds.core.Entity#getStatusChanges()} and then
  *             {@link org.omg.dds.sub.Subscriber#getDataReaders(Collection)}
  *             on the relevant Subscriber.</li>
- *         <li>{@link Entity#getStatusChanges()} and then
+ *         <li>{@link org.omg.dds.core.Entity#getStatusChanges()} and then
  *             {@link org.omg.dds.sub.DataReader#read()}/
  *             {@link org.omg.dds.sub.DataReader#take()} on the
  *             relevant DataReader.</li>
@@ -122,7 +122,7 @@
      * It is not allowed for more than one application thread to be waiting
      * on the same WaitSet. If the operation is invoked on a WaitSet that
      * already has a thread blocking on it, the operation will fail with the
-     * value {@link PreconditionNotMetException}.
+     * value {@link org.omg.dds.core.PreconditionNotMetException}.
      */
     public abstract void waitForConditions();
 
@@ -139,7 +139,7 @@
      * It is not allowed for more than one application thread to be waiting
      * on the same WaitSet. If the operation is invoked on a WaitSet that
      * already has a thread blocking on it, the operation will fail with the
-     * value {@link PreconditionNotMetException}.
+     * value {@link org.omg.dds.core.PreconditionNotMetException}.
      */
     public abstract void waitForConditions(
             Collection<Condition> activeConditions);
@@ -157,7 +157,7 @@
      * It is not allowed for more than one application thread to be waiting
      * on the same WaitSet. If the operation is invoked on a WaitSet that
      * already has a thread blocking on it, the operation will fail with the
-     * value {@link PreconditionNotMetException}.
+     * value {@link org.omg.dds.core.PreconditionNotMetException}.
      * 
      * @throws  TimeoutException    if the timeout argument, which specifies
      *          the maximum duration for the wait, is exceeded and none of
@@ -179,7 +179,7 @@
      * It is not allowed for more than one application thread to be waiting
      * on the same WaitSet. If the operation is invoked on a WaitSet that
      * already has a thread blocking on it, the operation will fail with the
-     * value {@link PreconditionNotMetException}.
+     * value {@link org.omg.dds.core.PreconditionNotMetException}.
      * 
      * @throws  TimeoutException    if the timeout argument, which specifies
      *          the maximum duration for the wait, is exceeded and none of
@@ -201,7 +201,7 @@
      * It is not allowed for more than one application thread to be waiting
      * on the same WaitSet. If the operation is invoked on a WaitSet that
      * already has a thread blocking on it, the operation will fail with the
-     * value {@link PreconditionNotMetException}.
+     * value {@link org.omg.dds.core.PreconditionNotMetException}.
      * 
      * @throws  TimeoutException    if the timeout argument, which specifies
      *          the maximum duration for the wait, is exceeded and none of
@@ -225,7 +225,7 @@
      * It is not allowed for more than one application thread to be waiting
      * on the same WaitSet. If the operation is invoked on a WaitSet that
      * already has a thread blocking on it, the operation will fail with the
-     * value {@link PreconditionNotMetException}.
+     * value {@link org.omg.dds.core.PreconditionNotMetException}.
      * 
      * @throws  TimeoutException    if the timeout argument, which specifies
      *          the maximum duration for the wait, is exceeded and none of
Index: org/omg/dds/core/Duration.java
===================================================================
--- org/omg/dds/core/Duration.java	(revision 202)
+++ org/omg/dds/core/Duration.java	(working copy)
@@ -72,7 +72,7 @@
      * @param env       Identifies the Service instance to which the
      *                  object will belong.
      * 
-     * @return  An unmodifiable {@link Duration} of infinite length.
+     * @return  An unmodifiable {@link org.omg.dds.core.Duration} of infinite length.
      */
     public static Duration infiniteDuration(ServiceEnvironment env)
     {
@@ -84,7 +84,7 @@
      * @param env       Identifies the Service instance to which the
      *                  object will belong.
      * 
-     * @return  A {@link Duration} of zero length.
+     * @return  A {@link org.omg.dds.core.Duration} of zero length.
      */
     public static Duration zeroDuration(ServiceEnvironment env)
     {
Index: org/omg/dds/core/ServiceEnvironment.java
===================================================================
--- org/omg/dds/core/ServiceEnvironment.java	(revision 207)
+++ org/omg/dds/core/ServiceEnvironment.java	(working copy)
@@ -23,16 +23,15 @@
 import java.util.Map;
 import java.util.Set;
 import java.util.concurrent.TimeUnit;
-import java.lang.String;
 
+import org.omg.dds.core.policy.PolicyFactory;
 import org.omg.dds.core.status.Status;
 import org.omg.dds.domain.DomainParticipantFactory;
 import org.omg.dds.type.TypeSupport;
-import org.omg.dds.type.dynamic.DynamicTypeFactory;
+import org.omg.dds.type.builtin.KeyedBytes;
+import org.omg.dds.type.builtin.KeyedString;
 import org.omg.dds.type.dynamic.DynamicDataFactory;
-import org.omg.dds.core.QosProvider;
-import org.omg.dds.core.policy.PolicyFactory;
-import org.omg.dds.type.builtin.*;
+import org.omg.dds.type.dynamic.DynamicTypeFactory;
 
 
 /**
@@ -112,7 +111,7 @@
      * invocations of this method. As a result, execution of this method is
      * expected to be relatively expensive. However, as any DDS object can
      * provide a reference to its creating ServiceEnvironment via
-     * {@link DDSObject#getEnvironment()}, executions of this method are also
+     * {@link org.omg.dds.core.DDSObject#getEnvironment()}, executions of this method are also
      * expected to be rare.
      * 
      * @param   implClassNameProperty       The name of a system property,
@@ -386,7 +385,7 @@
         // --- Types: --------------------------------------------------------
 
         /**
-         * Create a new {@link TypeSupport} object for the given physical
+         * Create a new {@link org.omg.dds.type.TypeSupport} object for the given physical
          * type. The Service will register this type under the given name
          * with any participant with which the <code>TypeSupport</code> is
          * used.
@@ -415,7 +414,7 @@
         // --- Time & Duration: ----------------------------------------------
 
         /**
-         * Construct a {@link Duration} of the given magnitude.
+         * Construct a {@link org.omg.dds.core.Duration} of the given magnitude.
          * 
          * A duration of magnitude {@link Long#MAX_VALUE} indicates an
          * infinite duration, regardless of the units specified.
@@ -423,12 +422,12 @@
         public Duration newDuration(long duration, TimeUnit unit);
 
         /**
-         * @return      A {@link Duration} of infinite length.
+         * @return      A {@link org.omg.dds.core.Duration} of infinite length.
          */
         public Duration infiniteDuration();
 
         /**
-         * @return      A {@link Duration} of zero length.
+         * @return      A {@link org.omg.dds.core.Duration} of zero length.
          */
         public Duration zeroDuration();
 
@@ -443,7 +442,7 @@
         public ModifiableTime newTime(long time, TimeUnit units);
 
         /**
-         * @return      A {@link Time} that is not valid.
+         * @return      A {@link org.omg.dds.core.Time} that is not valid.
          */
         public Time invalidTime();
 
@@ -485,8 +484,8 @@
         // --- PolicyFactory -----------------------------------------------------
         
         /**
-         * Provides an instance of {@link PolicyFactory}.
-         * @return An instance of {@link PolicyFactory}
+         * Provides an instance of {@link org.omg.dds.core.policy.PolicyFactory}.
+         * @return An instance of {@link org.omg.dds.core.policy.PolicyFactory}
          */
         public abstract PolicyFactory getPolicyFactory();
         
Index: org/omg/dds/core/Condition.java
===================================================================
--- org/omg/dds/core/Condition.java	(revision 197)
+++ org/omg/dds/core/Condition.java	(working copy)
@@ -18,15 +18,12 @@
 
 package org.omg.dds.core;
 
-import org.omg.dds.sub.ReadCondition;
-
-
 /**
  * A Condition is a root interface for all the conditions that may be
- * attached to a {@link WaitSet}. This basic interface is specialized in the
+ * attached to a {@link org.omg.dds.core.WaitSet}. This basic interface is specialized in the
  * following interfaces that are known by the middleware:
- * {@link GuardCondition}, {@link StatusCondition}, and
- * {@link ReadCondition}.
+ * {@link org.omg.dds.core.GuardCondition}, {@link org.omg.dds.core.StatusCondition}, and
+ * {@link org.omg.dds.sub.ReadCondition}.
  * 
  * A Condition has a triggerValue that can be true or false and is set
  * automatically by the Service.
Index: org/omg/dds/core/DDSException.java
===================================================================
--- org/omg/dds/core/DDSException.java	(revision 197)
+++ org/omg/dds/core/DDSException.java	(working copy)
@@ -18,10 +18,6 @@
 
 package org.omg.dds.core;
 
-import org.omg.dds.core.policy.QosPolicy;
-import org.omg.dds.sub.DataReader;
-
-
 /**
  * DDS recognizes a number of ways in which an operation may return, which
  * are mapped to exceptions in the following way:
@@ -36,7 +32,7 @@
  * <tr>
  *     <td>NO_DATA</td>
  *     <td>Normal, successful return from a data access method such as
- *         {@link DataReader#take()}, but no data was available.
+ *         {@link org.omg.dds.sub.DataReader#take()}, but no data was available.
  *     </td>
  *     <td>(<em>none</em>)</td>
  * </tr>
@@ -62,51 +58,51 @@
  * </tr>
  * <tr>
  *     <td>NOT_ENABLED</td>
- *     <td>The {@link Entity} has not yet been enabled for communication.</td>
- *     <td>{@link NotEnabledException}</td>
+ *     <td>The {@link org.omg.dds.core.Entity} has not yet been enabled for communication.</td>
+ *     <td>{@link org.omg.dds.core.NotEnabledException}</td>
  * </tr>
  * <tr>
  *     <td>ALREADY_DELETED</td>
  *     <td>The object on which the method is invoked has already been closed.
  *     </td>
- *     <td>{@link AlreadyClosedException}</td>
+ *     <td>{@link org.omg.dds.core.AlreadyClosedException}</td>
  * </tr>
  * <tr>
  *     <td>ILLEGAL_OPERATION</td>
  *     <td>The method cannot be invoked in the current calling context (e.g.
  *         from within a listener callback).
  *     </td>
- *     <td>{@link IllegalOperationException}</td>
+ *     <td>{@link org.omg.dds.core.IllegalOperationException}</td>
  * </tr>
  * <tr>
  *     <td>PRECONDITION_NOT_MET</td>
  *     <td>The object is not in the proper state to invoke the method.</td>
- *     <td>{@link PreconditionNotMetException}</td>
+ *     <td>{@link org.omg.dds.core.PreconditionNotMetException}</td>
  * </tr>
  * <tr>
  *     <td>IMMUTABLE_POLICY</td>
- *     <td>An attempt was made to change a {@link QosPolicy} that cannot be
+ *     <td>An attempt was made to change a {@link org.omg.dds.core.policy.QosPolicy} that cannot be
  *         changed.</td>
- *     <td>{@link ImmutablePolicyException}</td>
+ *     <td>{@link org.omg.dds.core.ImmutablePolicyException}</td>
  * </tr>
  * <tr>
  *     <td>INCONSISTENT_POLICY</td>
- *     <td>Two or more {@link QosPolicy} property values have been specified
+ *     <td>Two or more {@link org.omg.dds.core.policy.QosPolicy} property values have been specified
  *         that are inconsistent with one another.
  *     </td>
- *     <td>{@link ImmutablePolicyException}</td>
+ *     <td>{@link org.omg.dds.core.ImmutablePolicyException}</td>
  * </tr>
  * <tr>
  *     <td>OUT_OF_RESOURCES</td>
  *     <td>An internal resource of the DDS implementation has been exhausted,
  *         preventing the successful completion of the method.
  *     </td>
- *     <td>{@link OutOfResourcesException}</td>
+ *     <td>{@link org.omg.dds.core.OutOfResourcesException}</td>
  * </tr>
  * <tr>
  *     <td>ERROR</td>
  *     <td>The method failed to complete successfully for another reason.</td>
- *     <td>{@link DDSException} (this class)</td>
+ *     <td>{@link org.omg.dds.core.DDSException} (this class)</td>
  * </tr>
  * </table>
  */
Index: org/omg/dds/core/StatusCondition.java
===================================================================
--- org/omg/dds/core/StatusCondition.java	(revision 197)
+++ org/omg/dds/core/StatusCondition.java	(working copy)
@@ -26,7 +26,7 @@
 
 /**
  * A StatusCondition object is a specific Condition that is associated with
- * each {@link Entity}. The triggerValue of the StatusCondition depends on
+ * each {@link org.omg.dds.core.Entity}. The triggerValue of the StatusCondition depends on
  * the communication status of that entity (e.g., arrival of data, loss of
  * information, etc.), "filtered" by the set of enabledStatuses on the
  * StatusCondition.
@@ -65,7 +65,7 @@
      * StatusCondition. This operation may change the triggerValue of the
      * StatusCondition.
      * 
-     * {@link WaitSet} objects behavior depend on the changes of the
+     * {@link org.omg.dds.core.WaitSet} objects behavior depend on the changes of the
      * triggerValue of their attached conditions. Therefore, any WaitSet to
      * which the StatusCondition is attached is potentially affected by this
      * operation.
Index: org/omg/dds/core/Time.java
===================================================================
--- org/omg/dds/core/Time.java	(revision 202)
+++ org/omg/dds/core/Time.java	(working copy)
@@ -72,7 +72,7 @@
      * @param env       Identifies the Service instance to which the
      *                  object will belong.
      *                  
-     * @return      An unmodifiable {@link Time} that is not valid.
+     * @return      An unmodifiable {@link org.omg.dds.core.Time} that is not valid.
      */
     public static Time invalidTime(ServiceEnvironment env)
     {
Index: org/omg/dds/sub/DataReaderListener.java
===================================================================
--- org/omg/dds/sub/DataReaderListener.java	(revision 197)
+++ org/omg/dds/sub/DataReaderListener.java	(working copy)
@@ -20,7 +20,7 @@
 
 import java.util.EventListener;
 
-import org.omg.dds.core.Entity;
+
 import org.omg.dds.core.status.DataAvailableEvent;
 import org.omg.dds.core.status.LivelinessChangedEvent;
 import org.omg.dds.core.status.RequestedDeadlineMissedEvent;
@@ -28,22 +28,22 @@
 import org.omg.dds.core.status.SampleLostEvent;
 import org.omg.dds.core.status.SampleRejectedEvent;
 import org.omg.dds.core.status.SubscriptionMatchedEvent;
-import org.omg.dds.pub.DataWriter;
 
 
+
 /**
- * Since a {@link DataReader} is a kind of {@link Entity}, it has the ability
+ * Since a {@link org.omg.dds.sub.DataReader} is a kind of {@link org.omg.dds.core.Entity}, it has the ability
  * to have an associated listener. In this case, the associated listener must
  * be of concrete type DataReaderListener.
  * 
  * The operation {@link #onSubscriptionMatched(SubscriptionMatchedEvent)} is
- * intended to inform the application of the discovery of {@link DataWriter}
+ * intended to inform the application of the discovery of {@link org.omg.dds.pub.DataWriter}
  * entities that match the DataReader. Some implementations of the service
  * may not propagate this information. In that case the DDS specification
  * does not require this listener operation to be called.
  * 
  * @param <TYPE>    The concrete type of the data that can be delivered by
- *                  the {@link DataReader}.
+ *                  the {@link org.omg.dds.sub.DataReader}.
  */
 public interface DataReaderListener<TYPE> extends EventListener {
     public void onRequestedDeadlineMissed(
Index: org/omg/dds/sub/Subscriber.java
===================================================================
--- org/omg/dds/sub/Subscriber.java	(revision 207)
+++ org/omg/dds/sub/Subscriber.java	(working copy)
@@ -19,20 +19,13 @@
 package org.omg.dds.sub;
 
 import java.util.Collection;
-import java.util.List;
 import java.util.Set;
 
 import org.omg.dds.core.DDSObject;
 import org.omg.dds.core.DomainEntity;
-import org.omg.dds.core.InconsistentPolicyException;
-import org.omg.dds.core.NotEnabledException;
-import org.omg.dds.core.PreconditionNotMetException;
 import org.omg.dds.core.StatusCondition;
-import org.omg.dds.core.policy.Presentation;
-import org.omg.dds.core.status.DataAvailableEvent;
 import org.omg.dds.core.status.Status;
 import org.omg.dds.domain.DomainParticipant;
-import org.omg.dds.topic.Topic;
 import org.omg.dds.topic.TopicDescription;
 import org.omg.dds.topic.TopicQos;
 
@@ -40,7 +33,7 @@
  * A Subscriber is the object responsible for the actual reception of the
  * data resulting from its subscriptions.
  * 
- * A Subscriber acts on the behalf of one or several {@link DataReader}
+ * A Subscriber acts on the behalf of one or several {@link org.omg.dds.sub.DataReader}
  * objects that are related to it. When it receives data (from the other
  * parts of the system), it builds the list of concerned DataReader objects,
  * and then indicates to the application that data is available, through its
@@ -57,7 +50,7 @@
  * {@link org.omg.dds.core.Entity#enable()},
  * {@link org.omg.dds.core.Entity#getStatusCondition()}, and
  * {@link #createDataReader(TopicDescription)} may fail with the exception
- * {@link NotEnabledException}.
+ * {@link org.omg.dds.core.NotEnabledException}.
  */
 public interface Subscriber
 extends DomainEntity<SubscriberListener, SubscriberQos>
@@ -65,15 +58,15 @@
     // --- Create (any) DataReader: ------------------------------------------
 
     /**
-     * This operation creates a {@link DataReader}. The returned DataReader
+     * This operation creates a {@link org.omg.dds.sub.DataReader}. The returned DataReader
      * will be attached and belong to the Subscriber.
      * 
      * Note that a common application pattern to construct the QoS for the
      * DataReader is to:
      * 
      * <ul>
-     *     <li>Retrieve the QoS policies on the associated {@link Topic} by
-     *         means of {@link Topic#getQos()}.</li>
+     *     <li>Retrieve the QoS policies on the associated {@link org.omg.dds.topic.Topic} by
+     *         means of {@link org.omg.dds.topic.Topic#getQos()}.</li>
      *     <li>Retrieve the default DataReader QoS by means of
      *         {@link #getDefaultDataReaderQos()}.
      *     <li>Combine those two QoS policies and selectively modify policies
@@ -81,8 +74,8 @@
      *     <li>Use the resulting QoS policies to construct the DataReader.
      * </ul>
      * 
-     * The {@link TopicDescription} passed to this operation must have been
-     * created from the same {@link DomainParticipant} that was used to
+     * The {@link org.omg.dds.topic.TopicDescription} passed to this operation must have been
+     * created from the same {@link org.omg.dds.domain.DomainParticipant} that was used to
      * create this Subscriber. If the TopicDescription was created from a
      * different DomainParticipant, the operation will fail.
      * 
@@ -92,15 +85,15 @@
             TopicDescription<TYPE> topic);
 
     /**
-     * This operation creates a {@link DataReader}. The returned DataReader
+     * This operation creates a {@link org.omg.dds.sub.DataReader}. The returned DataReader
      * will be attached and belong to the Subscriber.
      * 
      * Note that a common application pattern to construct the QoS for the
      * DataReader is to:
      * 
      * <ul>
-     *     <li>Retrieve the QoS policies on the associated {@link Topic} by
-     *         means of {@link Topic#getQos()}.</li>
+     *     <li>Retrieve the QoS policies on the associated {@link org.omg.dds.topic.Topic} by
+     *         means of {@link org.omg.dds.topic.Topic#getQos()}.</li>
      *     <li>Retrieve the default DataReader QoS by means of
      *         {@link #getDefaultDataReaderQos()}.
      *     <li>Combine those two QoS policies and selectively modify policies
@@ -108,8 +101,8 @@
      *     <li>Use the resulting QoS policies to construct the DataReader.
      * </ul>
      * 
-     * The {@link TopicDescription} passed to this operation must have been
-     * created from the same {@link DomainParticipant} that was used to
+     * The {@link org.omg.dds.topic.TopicDescription} passed to this operation must have been
+     * created from the same {@link org.omg.dds.domain.DomainParticipant} that was used to
      * create this Subscriber. If the TopicDescription was created from a
      * different DomainParticipant, the operation will fail.
      * 
@@ -129,7 +122,7 @@
 
     /**
      * This operation retrieves a previously-created DataReader belonging to
-     * the Subscriber that is attached to a {@link Topic} with a matching
+     * the Subscriber that is attached to a {@link org.omg.dds.topic.Topic} with a matching
      * topicName. If no such DataReader exists, the operation will return
      * null.
      * 
@@ -146,7 +139,7 @@
 
     /**
      * This operation retrieves a previously-created DataReader belonging to
-     * the Subscriber that is attached to the given {@link TopicDescription}.
+     * the Subscriber that is attached to the given {@link org.omg.dds.topic.TopicDescription}.
      * If no such DataReader exists, the operation will return null.
      * 
      * If multiple DataReaders attached to the Subscriber satisfy this
@@ -167,17 +160,17 @@
     /**
      * This operation closes all the entities that were created by means of
      * the "create" operations on the Subscriber. That is, it closes all
-     * contained {@link DataReader} objects. This pattern is applied
+     * contained {@link org.omg.dds.sub.DataReader} objects. This pattern is applied
      * recursively. In this manner the operation on the Subscriber will end
      * up closing all the entities recursively contained in the Subscriber,
-     * that is also the {@link QueryCondition} and {@link ReadCondition}
+     * that is also the {@link org.omg.dds.sub.QueryCondition} and {@link org.omg.dds.sub.ReadCondition}
      * objects belonging to the contained DataReaders.
      * 
      * @throws  PreconditionNotMetException     if any of the contained
      *          entities is in a state where it cannot be closed. This will
      *          occur, for example, if a contained DataReader cannot be
      *          closed because the application has called a
-     *          {@link DataReader#read()} or {@link DataReader#take()}
+     *          {@link org.omg.dds.sub.DataReader#read()} or {@link org.omg.dds.sub.DataReader#take()}
      *          operation and has not called the corresponding
      *          {@link Sample.Iterator#close()} operation to return the
      *          loaned samples.
@@ -206,13 +199,13 @@
      * @see     #getDataReaders(Collection, DataState)
      * @see     #beginAccess()
      * @see     #endAccess()
-     * @see     Presentation
+     * @see     org.omg.dds.core.policy.Presentation
      */
     public Collection<DataReader<?>> getDataReaders(
             Collection<DataReader<?>> readers);
 
     /**
-     * This operation allows the application to access the {@link DataReader}
+     * This operation allows the application to access the {@link org.omg.dds.sub.DataReader}
      * objects that contain samples with the specified sample states,
      * view states, and instance states.
      * 
@@ -223,7 +216,7 @@
      * {@link org.omg.dds.core.policy.Presentation.AccessScopeKind#GROUP},
      * this operation should only be invoked inside a {@link #beginAccess()}/
      * {@link #endAccess()} block. Otherwise it will fail with
-     * {@link PreconditionNotMetException}.
+     * {@link org.omg.dds.core.PreconditionNotMetException}.
      * 
      * Depending on the setting of the
      * {@link org.omg.dds.core.policy.Presentation}, the
@@ -231,7 +224,7 @@
      * each DataReader at most once in no specified order, or a 'list'
      * containing each DataReader one or more times in a specific order.
      * (This refers to the semantics of the collection; the concrete type of
-     * the collection may or may not implement {@link Set} or {@link List}).
+     * the collection may or may not implement {@link Set} or {@link java.util.List}).
      * 
      * <ol>
      *     <li>If {@link org.omg.dds.core.policy.Presentation#getAccessScope()}
@@ -272,7 +265,7 @@
      * @see     #getDataReaders(Collection)
      * @see     #beginAccess()
      * @see     #endAccess()
-     * @see     Presentation
+     * @see     org.omg.dds.core.policy.Presentation
      */
     public Collection<DataReader<?>> getDataReaders(
             Collection<DataReader<?>> readers,
@@ -280,13 +273,13 @@
 
     /**
      * This operation invokes the operation
-     * {@link DataReaderListener#onDataAvailable(org.omg.dds.core.status.DataAvailableEvent)}
+     * {@link org.omg.dds.sub.DataReaderListener#onDataAvailable(org.omg.dds.core.status.DataAvailableEvent)}
      * on the DataReaderListener objects attached to contained DataReader
-     * entities with a {@link DataAvailableEvent} that is considered
+     * entities with a {@link org.omg.dds.core.status.DataAvailableEvent} that is considered
      * changed.
      * 
      * This operation is typically invoked from
-     * {@link SubscriberListener#onDataOnReaders(org.omg.dds.core.status.DataOnReadersEvent)}.
+     * {@link org.omg.dds.sub.SubscriberListener#onDataOnReaders(org.omg.dds.core.status.DataOnReadersEvent)}.
      * That way the SubscriberListener can delegate to the DataReaderListener
      * objects the handling of the data.
      */
@@ -294,7 +287,7 @@
 
     /**
      * This operation indicates that the application is about to access the
-     * data samples in any of the {@link DataReader} objects attached to the
+     * data samples in any of the {@link org.omg.dds.sub.DataReader} objects attached to the
      * Subscriber.
      * 
      * The application is required to use this operation only if the
@@ -306,10 +299,10 @@
      * 
      * In the aforementioned case, the operation must be called prior to
      * calling any of the sample-accessing operations, namely:
-     * {@link #getDataReaders(Collection)}, {@link DataReader#read()},
-     * {@link DataReader#take()}, or their overloads. Otherwise the
+     * {@link #getDataReaders(Collection)}, {@link org.omg.dds.sub.DataReader#read()},
+     * {@link org.omg.dds.sub.DataReader#take()}, or their overloads. Otherwise the
      * sample-accessing operations will fail with
-     * {@link PreconditionNotMetException}. Once the application has
+     * {@link org.omg.dds.core.PreconditionNotMetException}. Once the application has
      * finished accessing the data samples it must call {@link #endAccess()}.
      * 
      * It is not required for the application to call {@link #beginAccess()}/
@@ -323,13 +316,13 @@
      * as many times as it called beginAccess.
      * 
      * @see     #endAccess()
-     * @see     Presentation
+     * @see     org.omg.dds.core.policy.Presentation
      */
     public void beginAccess();
 
     /**
      * Indicates that the application has finished accessing the data samples
-     * in {@link DataReader} objects managed by the Subscriber.
+     * in {@link org.omg.dds.sub.DataReader} objects managed by the Subscriber.
      * 
      * This operation must be used to 'close' a corresponding
      * {@link #beginAccess()}.
@@ -348,7 +341,7 @@
     /**
      * This operation retrieves the default value of the DataReader QoS, that
      * is, the QoS policies which will be used for newly created
-     * {@link DataReader} entities in the case where the QoS policies are
+     * {@link org.omg.dds.sub.DataReader} entities in the case where the QoS policies are
      * defaulted in the {@link #createDataReader(TopicDescription)}
      * operation.
      * 
@@ -364,7 +357,7 @@
 
     /**
      * This operation sets a default value of the DataReader QoS policies,
-     * which will be used for newly created {@link DataReader} entities in
+     * which will be used for newly created {@link org.omg.dds.sub.DataReader} entities in
      * the case where the QoS policies are defaulted in the
      * {@link #createDataReader(TopicDescription)} operation.
      * 
@@ -377,13 +370,13 @@
     public void setDefaultDataReaderQos(DataReaderQos qos);
 
     /**
-     * This operation copies the policies in the {@link TopicQos} to the
-     * corresponding policies in the {@link DataReaderQos} (replacing values
+     * This operation copies the policies in the {@link org.omg.dds.topic.TopicQos} to the
+     * corresponding policies in the {@link org.omg.dds.sub.DataReaderQos} (replacing values
      * in the latter, if present).
      * 
      * This is a "convenience" operation most useful in combination with the
      * operations {@link #getDefaultDataReaderQos()} and
-     * {@link Topic#getQos()}. The operation can be used to merge the
+     * {@link org.omg.dds.topic.Topic#getQos()}. The operation can be used to merge the
      * DataReader default QoS policies with the corresponding ones on the
      * Topic. The resulting QoS can then be used to create a new DataReader
      * or set its QoS.
@@ -464,7 +457,7 @@
         // --- Mutators: -----------------------------------------------------
 
         /**
-         * Add the given {@link SampleState} to this DataState.
+         * Add the given {@link org.omg.dds.sub.SampleState} to this DataState.
          * 
          * @param state the state to add.
          * 
@@ -476,7 +469,7 @@
         public DataState with(SampleState state);
 
         /**
-         * Add the given {@link ViewState} to this DataState.
+         * Add the given {@link org.omg.dds.sub.ViewState} to this DataState.
          * 
          * @param state the state to add.
          * 
@@ -488,7 +481,7 @@
         public DataState with(ViewState state);
 
         /**
-         * Add the given {@link InstanceState} to this DataState.
+         * Add the given {@link org.omg.dds.sub.InstanceState} to this DataState.
          * 
          * @param state the state to add.
          * 
@@ -500,7 +493,7 @@
         public DataState with(InstanceState state);
 
         /**
-         * Add all {@link SampleState} values to this DataState.
+         * Add all {@link org.omg.dds.sub.SampleState} values to this DataState.
          * 
          * @return      this
          * 
@@ -510,7 +503,7 @@
         public DataState withAnySampleState();
 
         /**
-         * Add all {@link ViewState} values to this DataState.
+         * Add all {@link org.omg.dds.sub.ViewState} values to this DataState.
          * 
          * @return      this
          * 
@@ -520,7 +513,7 @@
         public DataState withAnyViewState();
 
         /**
-         * Add all {@link InstanceState} values to this DataState.
+         * Add all {@link org.omg.dds.sub.InstanceState} values to this DataState.
          * 
          * @return      this
          * 
@@ -530,8 +523,8 @@
         public DataState withAnyInstanceState();
 
         /**
-         * Add {@link InstanceState#NOT_ALIVE_DISPOSED} and
-         * {@link InstanceState#NOT_ALIVE_NO_WRITERS} to this DataState.
+         * Add {@link org.omg.dds.sub.InstanceState#NOT_ALIVE_DISPOSED} and
+         * {@link org.omg.dds.sub.InstanceState#NOT_ALIVE_NO_WRITERS} to this DataState.
          * 
          * @return      this
          * 
Index: org/omg/dds/sub/SubscriberListener.java
===================================================================
--- org/omg/dds/sub/SubscriberListener.java	(revision 197)
+++ org/omg/dds/sub/SubscriberListener.java	(working copy)
@@ -20,7 +20,6 @@
 
 import java.util.EventListener;
 
-import org.omg.dds.core.Entity;
 import org.omg.dds.core.status.DataAvailableEvent;
 import org.omg.dds.core.status.DataOnReadersEvent;
 import org.omg.dds.core.status.LivelinessChangedEvent;
@@ -32,7 +31,7 @@
 
 
 /**
- * Since a {@link Subscriber} is a kind of {@link Entity}, it has the ability
+ * Since a {@link org.omg.dds.sub.Subscriber} is a kind of {@link org.omg.dds.core.Entity}, it has the ability
  * to have an associated listener. In this case, the associated listener must
  * be of concrete type SubscriberListener.
  */
Index: org/omg/dds/sub/QueryCondition.java
===================================================================
--- org/omg/dds/sub/QueryCondition.java	(revision 197)
+++ org/omg/dds/sub/QueryCondition.java	(working copy)
@@ -22,7 +22,7 @@
 
 
 /**
- * QueryCondition objects are specialized {@link ReadCondition} objects that
+ * QueryCondition objects are specialized {@link org.omg.dds.sub.ReadCondition} objects that
  * allow the application to also specify a filter on the locally available
  * data.
  * 
@@ -31,14 +31,14 @@
  * {@link #setQueryParameters(List)} operation.
  * 
  * This feature is optional. In the cases where it is not supported, the
- * {@link DataReader#createQueryCondition(String, List)} will return null.
+ * {@link org.omg.dds.sub.DataReader#createQueryCondition(String, List)} will return null.
  * 
  * The triggerValue of a QueryCondition is like that of a ReadCondition with
  * the additional condition that the data associated with at least one sample
  * must be such that the queryExpression evaluates to true.
  * 
  * @param <TYPE>    The concrete type of the data that can be read using the
- *                  the {@link DataReader} that created this QueryCondition.
+ *                  the {@link org.omg.dds.sub.DataReader} that created this QueryCondition.
  */
 public interface QueryCondition<TYPE> extends ReadCondition<TYPE> {
     /**
Index: org/omg/dds/sub/Sample.java
===================================================================
--- org/omg/dds/sub/Sample.java	(revision 202)
+++ org/omg/dds/sub/Sample.java	(working copy)
@@ -22,14 +22,13 @@
 import java.util.ListIterator;
 
 import org.omg.dds.core.DDSObject;
-import org.omg.dds.core.InstanceHandle;
 import org.omg.dds.core.ModifiableInstanceHandle;
-import org.omg.dds.pub.DataWriter;
 import org.omg.dds.core.Time;
 
+
 /**
  * A Sample represents an atom of data information (i.e., one value for one
- * instance) as returned by a {@link DataReader}'s read or take operations.
+ * instance) as returned by a {@link org.omg.dds.sub.DataReader}'s read or take operations.
  * It consists of two parts: the Data ({@link #getData()}) and the "Sample
  * Info" (the remainder of the methods defined by this interface).
  * 
@@ -40,17 +39,17 @@
  * 
  * <ul>
  *      <li>The sampleState ({@link #getSampleState()}) of the Data value
- *          (i.e., if the sample has already been {@link SampleState#READ} or
- *          {@link SampleState#NOT_READ} by that same {@link DataReader}).
+ *          (i.e., if the sample has already been {@link org.omg.dds.sub.SampleState#READ} or
+ *          {@link org.omg.dds.sub.SampleState#NOT_READ} by that same {@link org.omg.dds.sub.DataReader}).
  *          </li>
  *      <li>The viewState ({@link #getViewState()}) of the related instance
  *          (i.e., if the current generation of the instance is
- *          {@link ViewState#NEW} or {@link ViewState#NOT_NEW} for that
+ *          {@link org.omg.dds.sub.ViewState#NEW} or {@link org.omg.dds.sub.ViewState#NOT_NEW} for that
  *          DataReader).</li>
  *      <li>The instanceState ({@link #getInstanceState()}) of the related
- *          instance (i.e., if the instance is {@link InstanceState#ALIVE},
- *          {@link InstanceState#NOT_ALIVE_DISPOSED}, or
- *          {@link InstanceState#NOT_ALIVE_NO_WRITERS}).</li>
+ *          instance (i.e., if the instance is {@link org.omg.dds.sub.InstanceState#ALIVE},
+ *          {@link org.omg.dds.sub.InstanceState#NOT_ALIVE_DISPOSED}, or
+ *          {@link org.omg.dds.sub.InstanceState#NOT_ALIVE_NO_WRITERS}).</li>
  *      <li>The "valid data" flag, corresponding to whether {@link #getData()}
  *          return a non-null value. Some samples do not contain data, instead
  *          indicating only a change on the instanceState of the corresponding
@@ -60,30 +59,30 @@
  *          noWritersGenerationCount ({@link #getNoWritersGenerationCount()})
  *          for the related instance at the time the sample was received.
  *          These counters indicate the number of times the instance had
- *          become ALIVE (with instanceState = {@link InstanceState#ALIVE})
+ *          become ALIVE (with instanceState = {@link org.omg.dds.sub.InstanceState#ALIVE})
  *          at the time the sample was received.</li>
  *      <li>The sampleRank ({@link #getSampleRank()}) and generationRank
  *          ({@link #getGenerationRank()}) of the sample within the returned
  *          sequence. These ranks provide a preview of the samples that
  *          follow within the sequence returned by the
- *          {@link DataReader#read()} or {@link DataReader#take()}
+ *          {@link org.omg.dds.sub.DataReader#read()} or {@link org.omg.dds.sub.DataReader#take()}
  *          operations.</li>
  *      <li>The absoluteGenerationRank ({@link #getAbsoluteGenerationRank()})
  *          of the sample within the DataReader. This rank provides a preview
  *          of what is available within the DataReader.</li>
  *      <li>The sourceTimestamp ({@link #getSourceTimestamp()}) of the sample.
- *          This is the time stamp provided by the {@link DataWriter} at the
+ *          This is the time stamp provided by the {@link org.omg.dds.pub.DataWriter} at the
  *          time the sample was produced.</li>
  *      <li>The instanceHandle ({@link #getInstanceHandle()}) that identifies
  *          locally the corresponding instance.</li>
  *      <li>The publicationHandle ({@link #getPublicationHandle()}) that
- *          identifies locally the {@link DataWriter} that modified the
- *          instance. The publicationHandle is the same {@link InstanceHandle}
+ *          identifies locally the {@link org.omg.dds.pub.DataWriter} that modified the
+ *          instance. The publicationHandle is the same {@link org.omg.dds.core.InstanceHandle}
  *          that is returned by the operation
- *          {@link DataReader#getMatchedPublications()}
+ *          {@link org.omg.dds.sub.DataReader#getMatchedPublications()}
  *          on the DataReader and can also be used as a parameter to the
  *          operation
- *          {@link DataReader#getMatchedPublicationData(InstanceHandle)}.</li>
+ *          {@link org.omg.dds.sub.DataReader#getMatchedPublicationData(InstanceHandle)}.</li>
  * </ul>
  * 
  * <b>Interpretation of the Counters and Ranks</b>
@@ -97,7 +96,7 @@
  * to different 'generations' of the instance. Note that it is possible for
  * an instance to transition from not-alive to alive (and back) several times
  * before the application accesses the data by means of
- * {@link DataReader#read()} or {@link DataReader#take()}. In this case the
+ * {@link org.omg.dds.sub.DataReader#read()} or {@link org.omg.dds.sub.DataReader#take()}. In this case the
  * returned collection may contain samples that cross generations (i.e., some
  * samples were received before the instance became not-alive, others after
  * the instance reappeared again). Using the information in the Sample the
@@ -134,7 +133,7 @@
      * timeout) for which there is no associated data. An example of this
      * situation is when the Service detects that an instance has no writers
      * and changes the corresponding instanceState to
-     * {@link InstanceState#NOT_ALIVE_NO_WRITERS}.
+     * {@link org.omg.dds.sub.InstanceState#NOT_ALIVE_NO_WRITERS}.
      * 
      * The actual set of scenarios under which the middleware returns Samples
      * containing no data is implementation dependent. The application can
@@ -157,29 +156,29 @@
 
     /**
      * For each sample received, the middleware internally maintains a
-     * sampleState relative to each {@link DataReader}. The sampleState can
-     * either be {@link SampleState#READ} or {@link SampleState#NOT_READ}.
+     * sampleState relative to each {@link org.omg.dds.sub.DataReader}. The sampleState can
+     * either be {@link org.omg.dds.sub.SampleState#READ} or {@link org.omg.dds.sub.SampleState#NOT_READ}.
      * 
      * <ul>
      *     <li>READ indicates that the DataReader has already accessed that
-     *         sample by means of {@link DataReader#read()}. (Had the sample
-     *         been accessed by {@link DataReader#take()}, it would no longer
+     *         sample by means of {@link org.omg.dds.sub.DataReader#read()}. (Had the sample
+     *         been accessed by {@link org.omg.dds.sub.DataReader#take()}, it would no longer
      *         be available to the DataReader.)</li>
      *     <li>NOT_READ indicates that the DataReader has not accessed that
      *         sample before.</li>
      * </ul>
      * 
      * The sampleState will, in general, be different for each sample in the
-     * collection returned by {@link DataReader#read()} or
-     * {@link DataReader#take()}.
+     * collection returned by {@link org.omg.dds.sub.DataReader#read()} or
+     * {@link org.omg.dds.sub.DataReader#take()}.
      */
     public SampleState getSampleState();
 
     /**
      * For each instance (identified by the key), the middleware internally
-     * maintains a viewState relative to each {@link DataReader}. The
-     * viewState can either be {@link ViewState#NEW} or
-     * {@link ViewState#NOT_NEW}.
+     * maintains a viewState relative to each {@link org.omg.dds.sub.DataReader}. The
+     * viewState can either be {@link org.omg.dds.sub.ViewState#NEW} or
+     * {@link org.omg.dds.sub.ViewState#NOT_NEW}.
      * 
      * <ul>
      *     <li>NEW indicates that either this is the first time that the
@@ -197,7 +196,7 @@
      * The viewState available in the Sample is a snapshot of the viewState
      * of the instance relative to the DataReader used to access the samples
      * at the time the collection was obtained (i.e., at the time
-     * {@link DataReader#read()} or {@link DataReader#take()} was called).
+     * {@link org.omg.dds.sub.DataReader#read()} or {@link org.omg.dds.sub.DataReader#take()} was called).
      * The viewState is therefore the same for all samples in the returned
      * collection that refer to the same instance.
      * 
@@ -210,21 +209,21 @@
 
     /**
      * For each instance the middleware internally maintains an
-     * instanceState. The instanceState can be {@link InstanceState#ALIVE},
-     * {@link InstanceState#NOT_ALIVE_DISPOSED}, or
-     * {@link InstanceState#NOT_ALIVE_NO_WRITERS}.
+     * instanceState. The instanceState can be {@link org.omg.dds.sub.InstanceState#ALIVE},
+     * {@link org.omg.dds.sub.InstanceState#NOT_ALIVE_DISPOSED}, or
+     * {@link org.omg.dds.sub.InstanceState#NOT_ALIVE_NO_WRITERS}.
      * 
      * <ul>
      *     <li>ALIVE indicates that (a) samples have been received for the
-     *         instance, (b) there are live {@link DataWriter} entities
+     *         instance, (b) there are live {@link org.omg.dds.pub.DataWriter} entities
      *         writing the instance, and (c) the instance has not been
      *         explicitly disposed (or else more samples have been received
      *         after it was disposed).</li>
      *     <li>NOT_ALIVE_DISPOSED indicates the instance was explicitly
      *         disposed by a DataWriter by means of
-     *         {@link DataWriter#dispose(InstanceHandle)}.</li>
+     *         {@link org.omg.dds.pub.DataWriter#dispose(InstanceHandle)}.</li>
      *     <li>NOT_ALIVE_NO_WRITERS indicates the instance has been declared
-     *         as not-alive by the {@link DataReader} because it detected
+     *         as not-alive by the {@link org.omg.dds.sub.DataReader} because it detected
      *         that there are no live DataWriter entities writing that
      *         instance.
      * </ul>
@@ -252,8 +251,8 @@
      * 
      * The instanceState available in the Sample is a snapshot of the
      * instanceState of the instance at the time the collection was obtained
-     * (i.e., at the time {@link DataReader#read()} or
-     * {@link DataReader#take()} was called). The instanceState is therefore
+     * (i.e., at the time {@link org.omg.dds.sub.DataReader#read()} or
+     * {@link org.omg.dds.sub.DataReader#take()} was called). The instanceState is therefore
      * the same for all samples in the returned collection that refer to the
      * same instance.
      */
@@ -268,7 +267,7 @@
     /**
      * For each instance the middleware internally maintains two counts: the
      * disposedGenerationCount and noWritersGenerationCount, relative to each
-     * {@link DataReader}:
+     * {@link org.omg.dds.sub.DataReader}:
      * 
      * <ul>
      *     <li>The disposedGenerationCount and noWritersGenerationCount are
@@ -293,7 +292,7 @@
     /**
      * For each instance the middleware internally maintains two counts: the
      * disposedGenerationCount and noWritersGenerationCount, relative to each
-     * {@link DataReader}:
+     * {@link org.omg.dds.sub.DataReader}:
      * 
      * <ul>
      *     <li>The disposedGenerationCount and noWritersGenerationCount are
@@ -318,7 +317,7 @@
     /**
      * The sampleRank and generationRank available in the Sample are computed
      * based solely on the actual samples in the ordered collection returned
-     * by {@link DataReader#read()} or {@link DataReader#take()}.
+     * by {@link org.omg.dds.sub.DataReader#read()} or {@link org.omg.dds.sub.DataReader#take()}.
      * 
      * <ul>
      *     <li>The sampleRank indicates the number of samples of the same
@@ -339,7 +338,7 @@
     /**
      * The sampleRank and generationRank available in the Sample are computed
      * based solely on the actual samples in the ordered collection returned
-     * by {@link DataReader#read()} or {@link DataReader#take()}.
+     * by {@link org.omg.dds.sub.DataReader#read()} or {@link org.omg.dds.sub.DataReader#take()}.
      * 
      * <ul>
      *     <li>The sampleRank indicates the number of samples of the same
@@ -369,7 +368,7 @@
     /**
      * The sampleRank and generationRank available in the Sample are computed
      * based solely on the actual samples in the ordered collection returned
-     * by {@link DataReader#read()} or {@link DataReader#take()}.
+     * by {@link org.omg.dds.sub.DataReader#read()} or {@link org.omg.dds.sub.DataReader#take()}.
      * 
      * <ul>
      *     <li>The sampleRank indicates the number of samples of the same
@@ -387,7 +386,7 @@
      * Sample of the same instance that the middleware has received (MRS).
      * That is, it counts the number of times the instance transitioned from
      * not-alive to alive in the time from the reception of S to the time
-     * when {@link DataReader#read()} or {@link DataReader#take()} was
+     * when {@link org.omg.dds.sub.DataReader#read()} or {@link org.omg.dds.sub.DataReader#take()} was
      * called.
      * 
      * <code>
@@ -418,7 +417,7 @@
         /**
          * This operation indicates to that the application is done accessing
          * the list of Samples obtained by some earlier invocation of
-         * {@link DataReader#read()} or {@link DataReader#take()}.
+         * {@link org.omg.dds.sub.DataReader#read()} or {@link org.omg.dds.sub.DataReader#take()}.
          * 
          * The operation allows implementations to "loan" buffers from the
          * DataReader to the application and in this manner provide
@@ -434,7 +433,7 @@
          * The use of the operation is only necessary if the read or take
          * calls "loaned" buffers to the application. The situations in which
          * this occurs are described in the documentation for
-         * {@link DataReader#read()} and {@link DataReader#take()}. However,
+         * {@link org.omg.dds.sub.DataReader#read()} and {@link org.omg.dds.sub.DataReader#take()}. However,
          * calling close on a collection that does not have a loan is
          * safe and has no side effects.
          * 
Index: org/omg/dds/sub/ReadCondition.java
===================================================================
--- org/omg/dds/sub/ReadCondition.java	(revision 202)
+++ org/omg/dds/sub/ReadCondition.java	(working copy)
@@ -22,33 +22,31 @@
 import java.util.Set;
 
 import org.omg.dds.core.Condition;
-import org.omg.dds.core.StatusCondition;
-import org.omg.dds.core.WaitSet;
 
 
 /**
  * ReadCondition objects are conditions specifically dedicated to read
- * operations and attached to one {@link DataReader}.
+ * operations and attached to one {@link org.omg.dds.sub.DataReader}.
  * 
  * ReadCondition objects allow an application to specify the data samples it
  * is interested in by specifying the desired sample states, view states,
  * and instance states. (See {@link Subscriber.DataState}.)
  * This allows the middleware to enable the condition only when suitable
  * information is available. They are to be used in conjunction with a
- * {@link WaitSet} as normal conditions. More than one ReadCondition may be
+ * {@link org.omg.dds.core.WaitSet} as normal conditions. More than one ReadCondition may be
  * attached to the same DataReader.
  * 
- * Similar to the {@link StatusCondition}, a ReadCondition also has a
- * triggerValue that determines whether the attached {@link WaitSet} is
+ * Similar to the {@link org.omg.dds.core.StatusCondition}, a ReadCondition also has a
+ * triggerValue that determines whether the attached {@link org.omg.dds.core.WaitSet} is
  * BLOCKED or UNBLOCKED. However, unlike the StatusCondition, the
  * triggerValue of the ReadCondition is tied to the presence of at least a
- * sample managed by the Service with {@link SampleState}, {@link ViewState},
- * and {@link InstanceState} matching those of the ReadCondition.
+ * sample managed by the Service with {@link org.omg.dds.sub.SampleState}, {@link org.omg.dds.sub.ViewState},
+ * and {@link org.omg.dds.sub.InstanceState} matching those of the ReadCondition.
  * 
  * The fact that the triggerValue of a ReadCondition is dependent on the
  * presence of samples on the associated DataReader implies that a single
- * {@link DataReader#take()} operation can potentially change the
- * triggerValue of several ReadCondition or {@link QueryCondition}
+ * {@link org.omg.dds.sub.DataReader#take()} operation can potentially change the
+ * triggerValue of several ReadCondition or {@link org.omg.dds.sub.QueryCondition}
  * conditions. For example, if all samples are taken, any ReadCondition and
  * QueryCondition conditions associated with the DataReader that had their
  * triggerValue == true before will see the triggerValue change to false.
@@ -67,7 +65,7 @@
  * has a sample state collection of {NOT_READ} will have triggerValue of true
  * whenever a new sample arrives and will transition to false as soon as all
  * the newly-arrived samples are either read (so their status changes to
- * {@link SampleState#READ}) or taken (so they are no longer managed by the
+ * {@link org.omg.dds.sub.SampleState#READ}) or taken (so they are no longer managed by the
  * Service). However if the same ReadCondition had a sample_statesample state
  * collection of {READ, NOT_READ}, then the triggerValue would only become
  * false once all the newly-arrived samples are taken (it is not sufficient
@@ -75,7 +73,7 @@
  * overlaps the collection on the ReadCondition.
  * 
  * @param <TYPE>    The concrete type of the data that can be read using the
- *                  the {@link DataReader} that created this ReadCondition.
+ *                  the {@link org.omg.dds.sub.DataReader} that created this ReadCondition.
  */
 public interface ReadCondition<TYPE> extends Closeable, Condition
 {
Index: org/omg/dds/sub/DataReader.java
===================================================================
--- org/omg/dds/sub/DataReader.java	(revision 205)
+++ org/omg/dds/sub/DataReader.java	(working copy)
@@ -28,31 +28,24 @@
 import org.omg.dds.core.Duration;
 import org.omg.dds.core.InstanceHandle;
 import org.omg.dds.core.ModifiableInstanceHandle;
-import org.omg.dds.core.NotEnabledException;
-import org.omg.dds.core.PreconditionNotMetException;
 import org.omg.dds.core.StatusCondition;
-import org.omg.dds.core.policy.History;
 import org.omg.dds.core.status.LivelinessChangedStatus;
 import org.omg.dds.core.status.RequestedDeadlineMissedStatus;
 import org.omg.dds.core.status.RequestedIncompatibleQosStatus;
 import org.omg.dds.core.status.SampleLostStatus;
 import org.omg.dds.core.status.SampleRejectedStatus;
 import org.omg.dds.core.status.SubscriptionMatchedStatus;
-import org.omg.dds.domain.DomainParticipant;
-import org.omg.dds.topic.ContentFilteredTopic;
-import org.omg.dds.topic.MultiTopic;
 import org.omg.dds.topic.PublicationBuiltinTopicData;
-import org.omg.dds.topic.Topic;
 import org.omg.dds.topic.TopicDescription;
 
 
 /**
  * A DataReader allows the application (1) to declare the data it wishes to
  * receive (i.e., make a subscription) and (2) to access the data received by
- * the attached {@link Subscriber}.
+ * the attached {@link org.omg.dds.sub.Subscriber}.
  * 
- * A DataReader refers to exactly one {@link TopicDescription} (either a
- * {@link Topic}, a {@link ContentFilteredTopic}, or a {@link MultiTopic})
+ * A DataReader refers to exactly one {@link org.omg.dds.topic.TopicDescription} (either a
+ * {@link org.omg.dds.topic.Topic}, a {@link org.omg.dds.topic.ContentFilteredTopic}, or a {@link org.omg.dds.topic.MultiTopic})
  * that identifies the data to be read. The subscription has a unique
  * resulting type. The data reader may give access to several instances of
  * the resulting type, which can be distinguished from each other by their
@@ -62,11 +55,11 @@
  * {@link #setQos(org.omg.dds.core.EntityQos)}, {@link #getQos()},
  * {@link #setListener(java.util.EventListener)}, {@link #getListener()},
  * {@link #enable()}, {@link #getStatusCondition()}, and {@link #close()} may
- * fail with the exception {@link NotEnabledException}.
+ * fail with the exception {@link org.omg.dds.core.NotEnabledException}.
  * 
  * All sample-accessing operations, namely all variants of {@link #read()} or
  * {@link #take()}, may fail with the exception
- * {@link PreconditionNotMetException}.
+ * {@link org.omg.dds.core.PreconditionNotMetException}.
  * 
  * <b>Access to the Data</b>
  * 
@@ -81,12 +74,12 @@
  * DataReader to access the same sample multiple times but only if all
  * previous accesses were read operations.
  * 
- * Each of these operations returns an ordered collection of {@link Sample}s
+ * Each of these operations returns an ordered collection of {@link org.omg.dds.sub.Sample}s
  * (data values and associated meta-information). Each data value represents
  * an atom of data information (i.e., a value for one instance). This
  * collection may contain samples related to the same or different instances
  * (identified by the key). Multiple samples can refer to the same instance
- * if the settings of the {@link History} allow for it.
+ * if the settings of the {@link org.omg.dds.core.policy.History} allow for it.
  * 
  * @param <TYPE>    The concrete type of the data to be read.
  */
@@ -267,14 +260,14 @@
     /**
      * This operation retrieves the list of publications currently
      * "associated" with the DataReader; that is, publications that have a
-     * matching {@link Topic} and compatible QoS that the application has not
+     * matching {@link org.omg.dds.topic.Topic} and compatible QoS that the application has not
      * indicated should be "ignored" by means of
-     * {@link DomainParticipant#ignorePublication(InstanceHandle)}.
+     * {@link org.omg.dds.domain.DomainParticipant#ignorePublication(InstanceHandle)}.
      * 
      * The handles returned in the 'publicationHandles' list are the ones
      * that are used by the DDS implementation to locally identify the
      * corresponding matched DataWriter entities. These handles match the
-     * ones that appear in {@link Sample#getInstanceHandle()} when reading
+     * ones that appear in {@link org.omg.dds.sub.Sample#getInstanceHandle()} when reading
      * the "DCPSPublications" built-in topic.
      * 
      * The operation may fail if the infrastructure does not locally maintain
@@ -289,9 +282,9 @@
     /**
      * This operation retrieves information on a publication that is
      * currently "associated" with the DataReader; that is, a publication
-     * with a matching {@link Topic} and compatible QoS that the application
+     * with a matching {@link org.omg.dds.topic.Topic} and compatible QoS that the application
      * has not indicated should be "ignored" by means of
-     * {@link DomainParticipant#ignorePublication(InstanceHandle)}.
+     * {@link org.omg.dds.domain.DomainParticipant#ignorePublication(InstanceHandle)}.
      * 
      * The operation {@link #getMatchedPublications()} can be used
      * to find the publications that are currently matched with the
@@ -403,12 +396,12 @@
      *         {@link org.omg.dds.core.policy.DestinationOrder.Kind#BY_SOURCE_TIMESTAMP},
      *         samples belonging to the same instances will appear in the
      *         relative order implied by the result of
-     *         {@link Sample#getSourceTimestamp()} (FIFO, smaller values of
+     *         {@link org.omg.dds.sub.Sample#getSourceTimestamp()} (FIFO, smaller values of
      *         the source time stamp ahead of the larger values).<li>
      * </ul>
      * 
      * In addition to the sample data, the read operation also provides
-     * sample meta-information ("sample info"). See {@link Sample}.
+     * sample meta-information ("sample info"). See {@link org.omg.dds.sub.Sample}.
      * 
      * The returned samples are "loaned" by the DataReader. The use of this
      * variant allows for zero-copy (assuming the implementation supports it)
@@ -418,17 +411,17 @@
      * 
      * Some elements in the returned collection may not have valid data. If
      * the instance state in the Sample is
-     * {@link InstanceState#NOT_ALIVE_DISPOSED} or
-     * {@link InstanceState#NOT_ALIVE_NO_WRITERS}, then the last sample for
+     * {@link org.omg.dds.sub.InstanceState#NOT_ALIVE_DISPOSED} or
+     * {@link org.omg.dds.sub.InstanceState#NOT_ALIVE_NO_WRITERS}, then the last sample for
      * that instance in the collection, that is, the one with
-     * {@link Sample#getSampleRank()} == 0, does not contain valid data.
+     * {@link org.omg.dds.sub.Sample#getSampleRank()} == 0, does not contain valid data.
      * Samples that contain no data do not count towards the limits imposed
      * by the {@link org.omg.dds.core.policy.ResourceLimits}.
      * 
      * The act of reading a sample sets its sample state to
-     * {@link SampleState#READ}. If the sample belongs to the most recent
+     * {@link org.omg.dds.sub.SampleState#READ}. If the sample belongs to the most recent
      * generation of the instance, it will also set the view state of the
-     * instance to {@link ViewState#NOT_NEW}. It will not affect the
+     * instance to {@link org.omg.dds.sub.ViewState#NOT_NEW}. It will not affect the
      * instance state of the instance.
      * 
      * If the DataReader has no samples that meet the constraints, the
@@ -565,7 +558,7 @@
      * The act of taking a sample removes it from the DataReader so it cannot
      * be "read" or "taken" again. If the sample belongs to the most recent
      * generation of the instance, it will also set the view state of the
-     * instance to {@link ViewState#NOT_NEW}. It will not affect the
+     * instance to {@link org.omg.dds.sub.ViewState#NOT_NEW}. It will not affect the
      * instance state of the instance.
      * 
      * The behavior of the take operation follows the same rules than the
@@ -646,7 +639,7 @@
      * {@link #read(List, Selector)} where {@link Selector#getMaxSamples()}
      * is 1, {@link Selector#getDataState()} followed by
      * {@link Subscriber.DataState#getSampleStates()} ==
-     * {@link SampleState#NOT_READ}, {@link Selector#getDataState()} followed by
+     * {@link org.omg.dds.sub.SampleState#NOT_READ}, {@link Selector#getDataState()} followed by
      * {@link Subscriber.DataState#getViewStates()} contains all view
      * states, and {@link Selector#getDataState()} followed by
      * {@link Subscriber.DataState#getInstanceStates()} contains all
@@ -679,7 +672,7 @@
      * {@link #take(List, Selector)} where {@link Selector#getMaxSamples()}
      * is 1, {@link Selector#getDataState()} followed by
      * {@link Subscriber.DataState#getSampleStates()} ==
-     * {@link SampleState#NOT_READ}, {@link Selector#getDataState()} followed by
+     * {@link org.omg.dds.sub.SampleState#NOT_READ}, {@link Selector#getDataState()} followed by
      * {@link Subscriber.DataState#getViewStates()} contains all view
      * states, and {@link Selector#getDataState()} followed by
      * {@link Subscriber.DataState#getInstanceStates()} contains all
@@ -713,7 +706,7 @@
      *
      * @return  keyHolder, as a convenience to facilitate chaining.
      * 
-     * @throws  IllegalArgumentException        if the {@link InstanceHandle}
+     * @throws  IllegalArgumentException        if the {@link org.omg.dds.core.InstanceHandle}
      *          does not correspond to an existing data object known to the
      *          DataReader. If the implementation is not able to check
      *          invalid handles, then the result in this situation is
@@ -781,20 +774,20 @@
      * @return The {@link Selector} object returned by this method
      *         is the default selector. By default it selects 
      *         {@link org.omg.dds.core.policy.ResourceLimits#LENGTH_UNLIMITED} 
-     *         samples.  This is equivalent to calling {@link DataReader#read} without 
+     *         samples.  This is equivalent to calling {@link org.omg.dds.sub.DataReader#read} without 
      *         any parameters. 
      * */
     
     public Selector<TYPE> select();
     
     /**
-     * Selector class encapsulates different ways of selecting samples from a {@link DataReader}.
-     * Selector can be used with {@link DataReader#read(Selector)} and {@link DataReader#take(Selector)}
+     * Selector class encapsulates different ways of selecting samples from a {@link org.omg.dds.sub.DataReader}.
+     * Selector can be used with {@link org.omg.dds.sub.DataReader#read(Selector)} and {@link org.omg.dds.sub.DataReader#take(Selector)}
      * or it can be used stand-alone as it provides {@link #read} and {@link #take} functions.
      * 
-     * {@link DataReader#select} creates a Selector that is bound to the {@link DataReader}.
+     * {@link org.omg.dds.sub.DataReader#select} creates a Selector that is bound to the {@link org.omg.dds.sub.DataReader}.
      *  
-     * A Selector may encapsulate any combination of {@link InstanceHandle}, 
+     * A Selector may encapsulate any combination of {@link org.omg.dds.core.InstanceHandle}, 
      * {@link Subscriber.DataState}, a query filter. It can be used to bound the maximum
      * number of samples retrieved.
      *      
Index: org/omg/dds/topic/TopicDescription.java
===================================================================
--- org/omg/dds/topic/TopicDescription.java	(revision 197)
+++ org/omg/dds/topic/TopicDescription.java	(working copy)
@@ -21,21 +21,18 @@
 import java.io.Closeable;
 
 import org.omg.dds.core.DDSObject;
-import org.omg.dds.core.Entity;
 import org.omg.dds.domain.DomainParticipant;
-import org.omg.dds.pub.DataWriter;
-import org.omg.dds.sub.DataReader;
 import org.omg.dds.type.TypeSupport;
 
 
 /**
- * This interface is the base for {@link Topic}, {@link ContentFilteredTopic},
- * and {@link MultiTopic}.
+ * This interface is the base for {@link org.omg.dds.topic.Topic}, {@link org.omg.dds.topic.ContentFilteredTopic},
+ * and {@link org.omg.dds.topic.MultiTopic}.
  * 
  * TopicDescription represents the fact that both publications and
  * subscriptions are tied to a single data type. Its attribute typeName
  * defines a unique resulting type for the publication or the subscription
- * and therefore creates an implicit association with a {@link TypeSupport}.
+ * and therefore creates an implicit association with a {@link org.omg.dds.type.TypeSupport}.
  * TopicDescription has also a name that allows it to be retrieved locally.
  *
  * @param <TYPE>    The concrete type of the data that will be published and/
@@ -45,7 +42,7 @@
 public interface TopicDescription<TYPE> extends Closeable, DDSObject
 {
     /**
-     * @return  the {@link TypeSupport} used to create this TopicDescription.
+     * @return  the {@link org.omg.dds.type.TypeSupport} used to create this TopicDescription.
      */
     public TypeSupport<TYPE> getTypeSupport();
 
@@ -71,7 +68,7 @@
     public String getName();
 
     /**
-     * @return  the {@link DomainParticipant} to which the TopicDescription
+     * @return  the {@link org.omg.dds.domain.DomainParticipant} to which the TopicDescription
      *          belongs.
      */
     public DomainParticipant getParent();
@@ -80,12 +77,12 @@
      * Dispose the resources held by this object.
      * 
      * A TopicDescription cannot be closed if it is in use by any
-     * {@link DataWriter}s or {@link DataReader}s. With respect to
-     * {@link Topic}s specifically: a Topic cannot be closed if it has any
-     * remaining {@link ContentFilteredTopic}s or {@link MultiTopic}s related
+     * {@link org.omg.dds.pub.DataWriter}s or {@link org.omg.dds.sub.DataReader}s. With respect to
+     * {@link org.omg.dds.topic.Topic}s specifically: a Topic cannot be closed if it has any
+     * remaining {@link org.omg.dds.topic.ContentFilteredTopic}s or {@link org.omg.dds.topic.MultiTopic}s related
      * to it.
      * 
-     * @see     Entity#close()
+     * @see     org.omg.dds.core.Entity#close()
      */
     public void close();
 }
Index: org/omg/dds/topic/TopicListener.java
===================================================================
--- org/omg/dds/topic/TopicListener.java	(revision 197)
+++ org/omg/dds/topic/TopicListener.java	(working copy)
@@ -20,12 +20,12 @@
 
 import java.util.EventListener;
 
-import org.omg.dds.core.Entity;
+
 import org.omg.dds.core.status.InconsistentTopicEvent;
 
 
 /**
- * Since {@link Topic} is a kind of {@link Entity}, it has the ability to
+ * Since {@link org.omg.dds.topic.Topic} is a kind of {@link org.omg.dds.core.Entity}, it has the ability to
  * have an associated listener. In this case, the associated listener must be
  * of concrete type TopicListener.
  * 
Index: org/omg/dds/topic/ContentFilteredTopic.java
===================================================================
--- org/omg/dds/topic/ContentFilteredTopic.java	(revision 197)
+++ org/omg/dds/topic/ContentFilteredTopic.java	(working copy)
@@ -27,7 +27,7 @@
  * 
  * ContentFilteredTopic describes a more sophisticated subscription that
  * indicates the subscriber does not want to necessarily see all values of
- * each instance published under the {@link Topic}. Rather, it wants to see
+ * each instance published under the {@link org.omg.dds.topic.Topic}. Rather, it wants to see
  * only the values whose contents satisfy certain criteria. This class
  * therefore can be used to request content-based subscriptions.
  * 
@@ -77,7 +77,7 @@
     public void setExpressionParameters(List<String> expressionParameters);
 
     /**
-     * @return  the {@link Topic} associated with the ContentFilteredTopic,
+     * @return  the {@link org.omg.dds.topic.Topic} associated with the ContentFilteredTopic,
      *          that is, the Topic specified when the ContentFilteredTopic
      *          was created.
      */
Index: org/omg/dds/topic/MultiTopic.java
===================================================================
--- org/omg/dds/topic/MultiTopic.java	(revision 197)
+++ org/omg/dds/topic/MultiTopic.java	(working copy)
@@ -20,16 +20,12 @@
 
 import java.util.List;
 
-import org.omg.dds.core.Condition;
-import org.omg.dds.sub.DataReader;
-import org.omg.dds.sub.InstanceState;
-import org.omg.dds.sub.ViewState;
 
 
 /**
  * MultiTopic is a specialization of TopicDescription that allows
  * subscriptions to combine/filter/rearrange data coming from several
- * {@link Topic}s.
+ * {@link org.omg.dds.topic.Topic}s.
  * 
  * MultiTopic allows a more sophisticated subscription that can select and
  * combine data received from multiple topics into a single resulting type
@@ -51,15 +47,15 @@
  *      subscriptionExpression. The number of supplied parameters must fit
  *      with the requested values in the subscriptionExpression (i.e., the
  *      number of "%n" tokens).</li>
- * <li>{@link DataReader} entities associated with a MultiTopic are alerted
- *     of data modifications by the usual Listener or {@link Condition}
+ * <li>{@link org.omg.dds.sub.DataReader} entities associated with a MultiTopic are alerted
+ *     of data modifications by the usual Listener or {@link org.omg.dds.core.Condition}
  *     mechanisms whenever modifications occur to the data associated with
  *     any of the topics relevant to the MultiTopic.</li>
  * <li>DataReader entities associated with a MultiTopic access instances that
  *     are "constructed" at the DataReader side from the instances written by
  *     multiple DataWriter entities. The MultiTopic access instance will
  *     begin to exist as soon as all the constituting Topic instances are in
- *     existence. The {@link ViewState} and {@link InstanceState} are
+ *     existence. The {@link org.omg.dds.sub.ViewState} and {@link org.omg.dds.sub.InstanceState} are
  *     computed from the corresponding states of the constituting instances:
  *     <ul><li>The viewState of the MultiTopic instance is NEW if at least
  *             one of the constituting instances has viewState = NEW,
Index: org/omg/dds/topic/Topic.java
===================================================================
--- org/omg/dds/topic/Topic.java	(revision 197)
+++ org/omg/dds/topic/Topic.java	(working copy)
@@ -19,11 +19,9 @@
 package org.omg.dds.topic;
 
 import org.omg.dds.core.DomainEntity;
-import org.omg.dds.core.NotEnabledException;
 import org.omg.dds.core.StatusCondition;
 import org.omg.dds.core.status.InconsistentTopicStatus;
 import org.omg.dds.domain.DomainParticipant;
-import org.omg.dds.pub.DataWriter;
 
 
 /**
@@ -33,14 +31,14 @@
  * A Topic is identified by its name, which must be unique in the whole
  * Domain.
  * 
- * Topic is the only {@link TopicDescription} that can be used for
- * publications and therefore associated to a {@link DataWriter}. All
+ * Topic is the only {@link org.omg.dds.topic.TopicDescription} that can be used for
+ * publications and therefore associated to a {@link org.omg.dds.pub.DataWriter}. All
  * operations except for the inherited operations
  * {@link #setQos(org.omg.dds.core.EntityQos)},
  * {@link #getQos()}, {@link #setListener(java.util.EventListener)},
  * {@link #getListener()}, {@link #enable()}, {@link #getStatusCondition()},
  * and {@link #close()} may fail with the exception
- * {@link NotEnabledException}.
+ * {@link org.omg.dds.core.NotEnabledException}.
  *
  * @param <TYPE>    The concrete type of the data that will be published and/
  *                  or subscribed by the readers and writers that use this
@@ -51,12 +49,12 @@
 {
     /**
      * This method allows the application to retrieve the
-     * {@link InconsistentTopicStatus} of the Topic.
+     * {@link org.omg.dds.core.status.InconsistentTopicStatus} of the Topic.
      * 
-     * Each {@link DomainEntity} has a set of relevant communication
+     * Each {@link org.omg.dds.core.DomainEntity} has a set of relevant communication
      * statuses. A change of status causes the corresponding Listener to be
      * invoked and can also be monitored by means of the associated
-     * {@link StatusCondition}.
+     * {@link org.omg.dds.core.StatusCondition}.
      * 
      * @see     TopicListener
      * @see     StatusCondition
